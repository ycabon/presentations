// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define("require exports ../../../core/tsSupport/makeTemplateObjectHelper ../../../core/tsSupport/generatorHelper ../../../core/tsSupport/awaiterHelper ../webgl-engine/core/shaderLibrary/Transform.glsl ../webgl-engine/core/shaderModules/interfaces ../webgl-engine/core/shaderModules/ShaderBuilder".split(" "),function(v,e,b,w,x,t,c,u){Object.defineProperty(e,"__esModule",{value:!0});e.build=function(d){var a=new u.ShaderBuilder;2===d.geometry?(a.attributes.add("position","vec2"),a.varyings.add("color",
"vec4"),a.vertex.uniforms.add("lightingMainDirection","vec3").add("cameraPosition","vec3").add("undergroundFadeAlpha","float"),a.vertex.code.add(c.glsl(f||(f=b(["\n      void main(void) {\n          float ndotl \x3d dot(normalize(cameraPosition), -lightingMainDirection);\n          float lighting \x3d max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));\n\n          color \x3d vec4(vec3(lighting), undergroundFadeAlpha);\n\n          gl_Position \x3d vec4(position.xy, 1.0, 1.0); // on the far plane\n      }\n  "],
["\n      void main(void) {\n          float ndotl \x3d dot(normalize(cameraPosition), -lightingMainDirection);\n          float lighting \x3d max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));\n\n          color \x3d vec4(vec3(lighting), undergroundFadeAlpha);\n\n          gl_Position \x3d vec4(position.xy, 1.0, 1.0); // on the far plane\n      }\n  "])))),a.fragment.code.add(c.glsl(g||(g=b(["\n      void main() {\n          gl_FragColor \x3d color;\n      }\n  "],["\n      void main() {\n          gl_FragColor \x3d color;\n      }\n  "]))))):
(a.include(t.Transform,{linearDepth:!1}),a.attributes.add("position","vec3"),a.varyings.add("vtc","vec2"),a.varyings.add("falloff","float"),1!==d.geometry&&a.varyings.add("innerFactor","float"),a.vertex.uniforms.add("proj","mat4").add("view","mat4").add("lightingMainDirection","vec3"),1!==d.geometry&&a.vertex.uniforms.add("silCircleCenter","vec3").add("silCircleV1","vec3").add("silCircleV2","vec3").add("texV","vec2").add("innerScale","float"),1!==d.geometry&&a.vertex.code.add(c.glsl(h||(h=b(["\n\t\t\tconst float TWICEPI \x3d 2.0*3.14159265;\n\t\t\tconst float ATMOSPHERE_RIM_SEGMENTS \x3d 128.0;\n\t\t"],
["\n\t\t\tconst float TWICEPI \x3d 2.0*3.14159265;\n\t\t\tconst float ATMOSPHERE_RIM_SEGMENTS \x3d 128.0;\n\t\t"])))),a.vertex.code.add(c.glsl(k||(k=b(["\n\t\tvoid main(void) {\n\t\t\tvec3 lightDirection \x3d -lightingMainDirection;\n\t"],["\n\t\tvoid main(void) {\n\t\t\tvec3 lightDirection \x3d -lightingMainDirection;\n\t"])))),1===d.geometry?a.vertex.code.add(c.glsl(l||(l=b(["\n\t\t\tvec3 pos \x3d position;\n\t\t\tfloat ndotl \x3d lightDirection.z;\n\t\t\tvtc \x3d vec2(0.0, position.z+0.05);\n\t\t\t"],
["\n\t\t\tvec3 pos \x3d position;\n\t\t\tfloat ndotl \x3d lightDirection.z;\n\t\t\tvtc \x3d vec2(0.0, position.z+0.05);\n\t\t\t"])))):a.vertex.code.add(c.glsl(m||(m=b(["\n\t\t\tinnerFactor \x3d clamp(-position.z, 0.0, 1.0);\n\t\t\tfloat scale \x3d position.y * (1.0 + innerFactor * innerScale);\n\t\t\tfloat phi \x3d position.x * (TWICEPI / ATMOSPHERE_RIM_SEGMENTS) + 1.0;\n\t\t\tvec3 pos \x3d  (silCircleCenter + sin(phi) * silCircleV1 + cos(phi) * silCircleV2) * scale;\n\t\t\tfloat ndotl \x3d dot(normalize(position.y \x3e 0.0 ? pos: silCircleCenter), lightDirection);\n\n\t\t\tvtc.x \x3d position.x / ATMOSPHERE_RIM_SEGMENTS;\n\t\t\tvtc.y \x3d texV.x * (1.0 - position.z) + texV.y * position.z;\n\t\t"],
["\n\t\t\tinnerFactor \x3d clamp(-position.z, 0.0, 1.0);\n\t\t\tfloat scale \x3d position.y * (1.0 + innerFactor * innerScale);\n\t\t\tfloat phi \x3d position.x * (TWICEPI / ATMOSPHERE_RIM_SEGMENTS) + 1.0;\n\t\t\tvec3 pos \x3d  (silCircleCenter + sin(phi) * silCircleV1 + cos(phi) * silCircleV2) * scale;\n\t\t\tfloat ndotl \x3d dot(normalize(position.y \x3e 0.0 ? pos: silCircleCenter), lightDirection);\n\n\t\t\tvtc.x \x3d position.x / ATMOSPHERE_RIM_SEGMENTS;\n\t\t\tvtc.y \x3d texV.x * (1.0 - position.z) + texV.y * position.z;\n\t\t"])))),
a.vertex.code.add(c.glsl(n||(n=b(["\n\t\tfalloff \x3d max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));\n\n\t\tgl_Position \x3d transformPosition(proj, view, pos);\n\t\tgl_Position.z \x3d gl_Position.w; // project atmosphere onto the far plane\n\t\t\t}\n\t"],["\n\t\tfalloff \x3d max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));\n\n\t\tgl_Position \x3d transformPosition(proj, view, pos);\n\t\tgl_Position.z \x3d gl_Position.w; // project atmosphere onto the far plane\n\t\t\t}\n\t"])))),a.fragment.uniforms.add("tex",
"sampler2D"),1!==d.geometry&&a.fragment.uniforms.add("altitudeFade","float"),a.fragment.code.add(c.glsl(p||(p=b(["\n\t\tvoid main() {\n\t\t\tvec4 texColor \x3d texture2D(tex, vtc);\n\t"],["\n\t\tvoid main() {\n\t\t\tvec4 texColor \x3d texture2D(tex, vtc);\n\t"])))),1===d.geometry?a.fragment.code.add(c.glsl(q||(q=b(["\n\t\t\tgl_FragColor \x3d texColor * falloff;\n\t\t\t}\n\t\t"],["\n\t\t\tgl_FragColor \x3d texColor * falloff;\n\t\t\t}\n\t\t"])))):a.fragment.code.add(c.glsl(r||(r=b(["\n\t\t\tvec4 atmosphereColor \x3d texColor * falloff;\n\t\t\tvec4 innerColor \x3d vec4(texColor.rgb * falloff, 1.0 - altitudeFade);\n\t\t\tgl_FragColor \x3d mix(atmosphereColor, innerColor, smoothstep(0.0, 1.0, innerFactor));\n\t\t}\n\t\t"],
["\n\t\t\tvec4 atmosphereColor \x3d texColor * falloff;\n\t\t\tvec4 innerColor \x3d vec4(texColor.rgb * falloff, 1.0 - altitudeFade);\n\t\t\tgl_FragColor \x3d mix(atmosphereColor, innerColor, smoothstep(0.0, 1.0, innerFactor));\n\t\t}\n\t\t"])))));return a};var f,g,h,k,l,m,n,p,q,r});