// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define("require exports ../../../../../core/tsSupport/makeTemplateObjectHelper ./output/ReadLinearDepth.glsl ./util/CameraSpace.glsl ../shaderModules/interfaces".split(" "),function(p,d,b,m,n,c){Object.defineProperty(d,"__esModule",{value:!0});d.Laserline=function(a,d){a.extensions.add("GL_OES_standard_derivatives");a.include(m.ReadLinearDepth);a.include(n.CameraSpace);a.fragment.uniforms.add("glowColor","vec3");a.fragment.uniforms.add("glowWidth","float");a.fragment.uniforms.add("glowFalloff","float");
a.fragment.uniforms.add("innerColor","vec3");a.fragment.uniforms.add("innerWidth","float");a.fragment.uniforms.add("depthMap","sampler2D");a.fragment.uniforms.add("nearFar","vec2");a.fragment.uniforms.add("frameColor","sampler2D");d.contrastControlEnabled&&a.fragment.uniforms.add("globalAlphaContrastBoost","float");a.fragment.code.add(c.glsl(e||(e=b(["\n  vec4 blendPremultiplied(vec4 source, vec4 dest) {\n    float oneMinusSourceAlpha \x3d 1.0 - source.a;\n\n    return vec4(\n      source.rgb + dest.rgb * oneMinusSourceAlpha,\n      source.a + dest.a * oneMinusSourceAlpha\n    );\n  }\n  "],
["\n  vec4 blendPremultiplied(vec4 source, vec4 dest) {\n    float oneMinusSourceAlpha \x3d 1.0 - source.a;\n\n    return vec4(\n      source.rgb + dest.rgb * oneMinusSourceAlpha,\n      source.a + dest.a * oneMinusSourceAlpha\n    );\n  }\n  "]))));a.fragment.code.add(c.glsl(f||(f=b(["\n  vec4 premultipliedColor(vec3 rgb, float alpha) {\n    return vec4(rgb * alpha, alpha);\n  }\n  "],["\n  vec4 premultipliedColor(vec3 rgb, float alpha) {\n    return vec4(rgb * alpha, alpha);\n  }\n  "]))));a.fragment.code.add(c.glsl(g||
(g=b(["\n  vec4 laserlineProfile(float dist) {\n    if (dist \x3e glowWidth) {\n      return vec4(0.0);\n    }\n\n    float innerAlpha \x3d (1.0 - smoothstep(0.0, innerWidth, dist));\n    float glowAlpha \x3d pow(max(0.0, 1.0 - dist / glowWidth), glowFalloff);\n\n    return blendPremultiplied(\n      premultipliedColor(innerColor, innerAlpha),\n      premultipliedColor(glowColor, glowAlpha)\n    );\n  }\n  "],["\n  vec4 laserlineProfile(float dist) {\n    if (dist \x3e glowWidth) {\n      return vec4(0.0);\n    }\n\n    float innerAlpha \x3d (1.0 - smoothstep(0.0, innerWidth, dist));\n    float glowAlpha \x3d pow(max(0.0, 1.0 - dist / glowWidth), glowFalloff);\n\n    return blendPremultiplied(\n      premultipliedColor(innerColor, innerAlpha),\n      premultipliedColor(glowColor, glowAlpha)\n    );\n  }\n  "]))));
a.fragment.code.add(c.glsl(h||(h=b(["\n  bool laserlineReconstructFromDepth(out vec3 pos, out vec3 normal, out float depthDiscontinuityAlpha) {\n    float depth \x3d linearDepth(depthMap, uv, nearFar);\n\n    if (-depth \x3d\x3d nearFar[0]) {\n      return false;\n    }\n\n    pos \x3d reconstructPosition(gl_FragCoord.xy, depth);\n    normal \x3d normalize(cross(dFdx(pos), dFdy(pos)));\n\n    float ddepth \x3d fwidth(depth);\n    depthDiscontinuityAlpha \x3d 1.0 - smoothstep(0.0, 0.01, -ddepth / depth);\n\n    return true;\n  }\n  "],
["\n  bool laserlineReconstructFromDepth(out vec3 pos, out vec3 normal, out float depthDiscontinuityAlpha) {\n    float depth \x3d linearDepth(depthMap, uv, nearFar);\n\n    if (-depth \x3d\x3d nearFar[0]) {\n      return false;\n    }\n\n    pos \x3d reconstructPosition(gl_FragCoord.xy, depth);\n    normal \x3d normalize(cross(dFdx(pos), dFdy(pos)));\n\n    float ddepth \x3d fwidth(depth);\n    depthDiscontinuityAlpha \x3d 1.0 - smoothstep(0.0, 0.01, -ddepth / depth);\n\n    return true;\n  }\n  "]))));
d.contrastControlEnabled?a.fragment.code.add(c.glsl(k||(k=b(["\n    float rgbToLuminance(vec3 color) {\n      return dot(vec3(0.2126, 0.7152, 0.0722), color);\n    }\n\n    vec4 laserlineOutput(vec4 color) {\n      float backgroundLuminance \x3d rgbToLuminance(texture2D(frameColor, uv).rgb);\n      float alpha \x3d clamp(globalAlpha * max(backgroundLuminance * globalAlphaContrastBoost, 1.0), 0.0, 1.0);\n\n      return color * alpha;\n    }\n    "],["\n    float rgbToLuminance(vec3 color) {\n      return dot(vec3(0.2126, 0.7152, 0.0722), color);\n    }\n\n    vec4 laserlineOutput(vec4 color) {\n      float backgroundLuminance \x3d rgbToLuminance(texture2D(frameColor, uv).rgb);\n      float alpha \x3d clamp(globalAlpha * max(backgroundLuminance * globalAlphaContrastBoost, 1.0), 0.0, 1.0);\n\n      return color * alpha;\n    }\n    "])))):
a.fragment.code.add(c.glsl(l||(l=b(["\n    vec4 laserlineOutput(vec4 color) {\n      return color * globalAlpha;\n    }\n    "],["\n    vec4 laserlineOutput(vec4 color) {\n      return color * globalAlpha;\n    }\n    "]))))};var e,f,g,h,k,l});