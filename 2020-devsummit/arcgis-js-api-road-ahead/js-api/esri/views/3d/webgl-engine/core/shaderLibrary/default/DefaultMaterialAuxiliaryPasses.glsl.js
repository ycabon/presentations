// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define("require exports ../../../../../../core/tsSupport/makeTemplateObjectHelper ../Slice.glsl ../Transform.glsl ../attributes/NormalAttribute.glsl ../attributes/TextureCoordinateAttribute.glsl ../attributes/VertexNormal.glsl ../output/OutputDepth.glsl ../output/OutputHighlight.glsl ../shading/VisualVariables.glsl ../util/AlphaDiscard.glsl ../../shaderModules/interfaces".split(" "),function(G,n,c,e,f,C,g,D,E,F,h,k,d){Object.defineProperty(n,"__esModule",{value:!0});n.DefaultMaterialAuxiliaryPasses=
function(a,b){var l=a.vertex.code,m=a.fragment.code;if(1===b.output||3===b.output)a.include(f.Transform,{linearDepth:!0}),a.include(g.TextureCoordinateAttribute,b),a.include(h.VisualVariables,b),a.include(E.OutputDepth,b),a.include(e.Slice,b),a.vertex.uniforms.add("nearFar","vec2"),a.varyings.add("depth","float"),b.hasColorTexture&&a.fragment.uniforms.add("tex","sampler2D"),l.add(d.glsl(p||(p=c(["\n      void main(void) {\n        vpos \x3d calculateVPos();\n        vpos \x3d subtractOrigin(vpos);\n        vpos \x3d addVerticalOffset(vpos, localOrigin);\n        gl_Position \x3d transformPositionWithDepth(proj, view, vpos, nearFar, depth);\n        forwardTextureCoordinates();\n      }\n    "],
["\n      void main(void) {\n        vpos \x3d calculateVPos();\n        vpos \x3d subtractOrigin(vpos);\n        vpos \x3d addVerticalOffset(vpos, localOrigin);\n        gl_Position \x3d transformPositionWithDepth(proj, view, vpos, nearFar, depth);\n        forwardTextureCoordinates();\n      }\n    "])))),a.include(k.DiscardOrAdjustAlpha,b),m.add(d.glsl(q||(q=c(["\n      void main(void) {\n        discardBySlice(vpos);\n        ","\n        outputDepth(depth);\n      }\n    "],["\n      void main(void) {\n        discardBySlice(vpos);\n        ",
"\n        outputDepth(depth);\n      }\n    "])),b.hasColorTexture?d.glsl(r||(r=c(["\n        vec4 texColor \x3d texture2D(tex, vuv0);\n        discardOrAdjustAlpha(texColor);"],["\n        vec4 texColor \x3d texture2D(tex, vuv0);\n        discardOrAdjustAlpha(texColor);"]))):""));2===b.output&&(a.include(f.Transform,{linearDepth:!1}),a.include(C.NormalAttribute,b),a.include(D.VertexNormal,b),a.include(g.TextureCoordinateAttribute,b),a.include(h.VisualVariables,b),b.hasColorTexture&&a.fragment.uniforms.add("tex",
"sampler2D"),a.vertex.uniforms.add("viewNormal","mat4"),a.varyings.add("vPositionView","vec3"),l.add(d.glsl(t||(t=c(["\n      void main(void) {\n        vpos \x3d calculateVPos();\n        vpos \x3d subtractOrigin(vpos);\n        ","\n        vpos \x3d addVerticalOffset(vpos, localOrigin);\n        gl_Position \x3d transformPosition(proj, view, vpos);\n        forwardTextureCoordinates();\n      }\n    "],["\n      void main(void) {\n        vpos \x3d calculateVPos();\n        vpos \x3d subtractOrigin(vpos);\n        ",
"\n        vpos \x3d addVerticalOffset(vpos, localOrigin);\n        gl_Position \x3d transformPosition(proj, view, vpos);\n        forwardTextureCoordinates();\n      }\n    "])),0===b.normalType?d.glsl(u||(u=c(["\n        vNormalWorld \x3d dpNormalView(vvLocalNormal(normalModel()));"],["\n        vNormalWorld \x3d dpNormalView(vvLocalNormal(normalModel()));"]))):"")),a.include(e.Slice,b),a.include(k.DiscardOrAdjustAlpha,b),m.add(d.glsl(v||(v=c(["\n      void main() {\n        discardBySlice(vpos);\n        ",
"\n\n        ","\n        gl_FragColor \x3d vec4(vec3(0.5) + 0.5 * normal, 1.0);\n      }\n    "],["\n      void main() {\n        discardBySlice(vpos);\n        ","\n\n        ","\n        gl_FragColor \x3d vec4(vec3(0.5) + 0.5 * normal, 1.0);\n      }\n    "])),b.hasColorTexture?d.glsl(w||(w=c(["\n        vec4 texColor \x3d texture2D(tex, vuv0);\n        discardOrAdjustAlpha(texColor);"],["\n        vec4 texColor \x3d texture2D(tex, vuv0);\n        discardOrAdjustAlpha(texColor);"]))):"",3===b.normalType?
d.glsl(x||(x=c(["\n            vec3 normal \x3d screenDerivativeNormal(vPositionView);"],["\n            vec3 normal \x3d screenDerivativeNormal(vPositionView);"]))):d.glsl(y||(y=c(["\n            vec3 normal \x3d normalize(vNormalWorld);\n            if (gl_FrontFacing \x3d\x3d false) normal \x3d -normal;"],["\n            vec3 normal \x3d normalize(vNormalWorld);\n            if (gl_FrontFacing \x3d\x3d false) normal \x3d -normal;"]))))));4===b.output&&(a.include(f.Transform,{linearDepth:!1}),a.include(g.TextureCoordinateAttribute,
b),a.include(h.VisualVariables,b),b.hasColorTexture&&a.fragment.uniforms.add("tex","sampler2D"),l.add(d.glsl(z||(z=c(["\n      void main(void) {\n        vpos \x3d calculateVPos();\n        vpos \x3d subtractOrigin(vpos);\n        vpos \x3d addVerticalOffset(vpos, localOrigin);\n        gl_Position \x3d transformPosition(proj, view, vpos);\n        forwardTextureCoordinates();\n      }\n    "],["\n      void main(void) {\n        vpos \x3d calculateVPos();\n        vpos \x3d subtractOrigin(vpos);\n        vpos \x3d addVerticalOffset(vpos, localOrigin);\n        gl_Position \x3d transformPosition(proj, view, vpos);\n        forwardTextureCoordinates();\n      }\n    "])))),
a.include(e.Slice,b),a.include(k.DiscardOrAdjustAlpha,b),a.include(F.OutputHighlight),m.add(d.glsl(A||(A=c(["\n      void main() {\n        discardBySlice(vpos);\n        ","\n        outputHighlight();\n      }\n    "],["\n      void main() {\n        discardBySlice(vpos);\n        ","\n        outputHighlight();\n      }\n    "])),b.hasColorTexture?d.glsl(B||(B=c(["\n        vec4 texColor \x3d texture2D(tex, vuv0);\n        discardOrAdjustAlpha(texColor);"],["\n        vec4 texColor \x3d texture2D(tex, vuv0);\n        discardOrAdjustAlpha(texColor);"]))):
"")))};var p,r,q,u,t,w,x,y,v,z,B,A});