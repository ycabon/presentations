// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define("require exports ../../../../../../core/tsSupport/makeTemplateObjectHelper ../ForwardLinearDepth.glsl ../Offset.glsl ../Slice.glsl ../Transform.glsl ../attributes/InstancedDoublePrecision.glsl ../attributes/NormalAttribute.glsl ../attributes/PositionAttribute.glsl ../attributes/SymbolColor.glsl ../attributes/TextureCoordinateAttribute.glsl ../attributes/VertexColor.glsl ../attributes/VerticalOffset.glsl ./DefaultMaterialAuxiliaryPasses.glsl ../shading/EvaluateAmbientOcclusion.glsl ../shading/EvaluateSceneLighting.glsl ../shading/PhysicallyBasedRendering.glsl ../shading/PhysicallyBasedRenderingParameters.glsl ../shading/ReadShadowMap.glsl ../shading/VisualVariables.glsl ../util/AlphaDiscard.glsl ../util/MixExternalColor.glsl ../../shaderModules/interfaces ../../shaderModules/ShaderBuilder".split(" "),
function(Q,e,d,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,f,N,c,O){Object.defineProperty(e,"__esModule",{value:!0});e.build=function(a){var b=new O.ShaderBuilder,e=b.vertex.code,P=b.fragment.code;b.vertex.uniforms.add("proj","mat4").add("view","mat4").add("camPos","vec3").add("localOrigin","vec3");b.include(B.PositionAttribute);b.varyings.add("vpos","vec3");b.include(M.VisualVariables,a);b.include(z.InstancedDoublePrecision,a);b.include(F.VerticalOffset,a);0===a.output&&(b.include(A.NormalAttribute,a),b.include(y.Transform,
{linearDepth:!1}),a.offsetBackfaces&&b.include(w.Offset),a.instancedColor&&b.attributes.add("instanceColor","vec4"),b.varyings.add("vNormalWorld","vec3"),b.varyings.add("localvpos","vec3"),b.include(D.TextureCoordinateAttribute,a),b.include(v.ForwardLinearDepth,a),b.include(C.SymbolColor,a),b.include(E.VertexColor,a),b.vertex.uniforms.add("externalColor","vec4"),b.varyings.add("vcolorExt","vec4"),e.add(c.glsl(g||(g=d(["\n        void main(void) {\n          forwardNormalizedVertexColor();\n          vcolorExt \x3d externalColor;\n          ",
"\n          vcolorExt *\x3d vvColor();\n          vcolorExt *\x3d getSymbolColor();\n          forwardColorMixMode();\n\n          if (vcolorExt.a \x3c ",") {\n            gl_Position \x3d vec4(1e38, 1e38, 1e38, 1.0);\n          }\n          else {\n            vpos \x3d calculateVPos();\n            localvpos \x3d vpos - view[3].xyz;\n            vpos \x3d subtractOrigin(vpos);\n            vNormalWorld \x3d dpNormal(vvLocalNormal(normalModel()));\n            vpos \x3d addVerticalOffset(vpos, localOrigin);\n            gl_Position \x3d transformPosition(proj, view, vpos);\n            ",
"\n          }\n          forwardLinearDepth();\n          forwardTextureCoordinates();\n        }\n      "],["\n        void main(void) {\n          forwardNormalizedVertexColor();\n          vcolorExt \x3d externalColor;\n          ","\n          vcolorExt *\x3d vvColor();\n          vcolorExt *\x3d getSymbolColor();\n          forwardColorMixMode();\n\n          if (vcolorExt.a \x3c ",") {\n            gl_Position \x3d vec4(1e38, 1e38, 1e38, 1.0);\n          }\n          else {\n            vpos \x3d calculateVPos();\n            localvpos \x3d vpos - view[3].xyz;\n            vpos \x3d subtractOrigin(vpos);\n            vNormalWorld \x3d dpNormal(vvLocalNormal(normalModel()));\n            vpos \x3d addVerticalOffset(vpos, localOrigin);\n            gl_Position \x3d transformPosition(proj, view, vpos);\n            ",
"\n          }\n          forwardLinearDepth();\n          forwardTextureCoordinates();\n        }\n      "])),a.instancedColor?"vcolorExt *\x3d instanceColor;":"",c.glsl.float(f.symbolAlphaCutoff),a.offsetBackfaces?"gl_Position \x3d offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, camPos);":"")),b.include(x.Slice,a),b.include(I.EvaluateSceneLighting,a),b.include(H.EvaluateAmbientOcclusion,a),b.include(f.DiscardOrAdjustAlpha,a),a.receiveShadows&&b.include(L.ReadShadowMap,a),b.fragment.uniforms.add("camPos",
"vec3").add("localOrigin","vec3").add("ambient","vec3").add("diffuse","vec3").add("opacity","float").add("layerOpacity","float"),b.fragment.uniforms.add("view","mat4"),a.hasColorTexture&&b.fragment.uniforms.add("tex","sampler2D"),b.include(K.PhysicallyBasedRenderingParameters,a),b.include(J.PhysicallyBasedRendering,a),b.include(N.MixExternalColor,{stages:1}),P.add(c.glsl(h||(h=d(["\n      void main() {\n        discardBySlice(vpos);\n        ","\n        vec3 viewDirection \x3d normalize(vpos - camPos);\n        ",
"\n        float ssao \x3d evaluateAmbientOcclusionInverse();\n        ssao *\x3d getBakedOcclusion();\n\n        float additionalAmbientScale \x3d _oldHeuristicLighting(vpos + localOrigin);\n        vec3 additionalLight \x3d ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ","\n        vec3 matColor \x3d max(ambient, diffuse);\n        ","\n        ","\n        ","\n        ","\n        gl_FragColor \x3d highlightSlice(vec4(shadedColor, opacity_), vpos);\n      }\n    "],
["\n      void main() {\n        discardBySlice(vpos);\n        ","\n        vec3 viewDirection \x3d normalize(vpos - camPos);\n        ","\n        float ssao \x3d evaluateAmbientOcclusionInverse();\n        ssao *\x3d getBakedOcclusion();\n\n        float additionalAmbientScale \x3d _oldHeuristicLighting(vpos + localOrigin);\n        vec3 additionalLight \x3d ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ","\n        vec3 matColor \x3d max(ambient, diffuse);\n        ",
"\n        ","\n        ","\n        ","\n        gl_FragColor \x3d highlightSlice(vec4(shadedColor, opacity_), vpos);\n      }\n    "])),a.hasColorTexture?c.glsl(k||(k=d(["\n        vec4 texColor \x3d texture2D(tex, vuv0);\n        ","\n        discardOrAdjustAlpha(texColor);"],["\n        vec4 texColor \x3d texture2D(tex, vuv0);\n        ","\n        discardOrAdjustAlpha(texColor);"])),a.textureAlphaPremultiplied?"texColor.rgb /\x3d texColor.a;":""):c.glsl(l||(l=d(["vec4 texColor \x3d vec4(1.0);"],
["vec4 texColor \x3d vec4(1.0);"]))),1===a.pbrMode?"applyPBRFactors();":"",a.receiveShadows?"float shadow \x3d readShadowMap(vpos, linearDepth);":0===a.viewingMode?"float shadow \x3d lightingGlobalFactor * (1.0 - additionalAmbientScale);":"float shadow \x3d 0.0;",a.attributeColor?c.glsl(m||(m=d(["\n        vec3 albedo_ \x3d mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ \x3d layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));"],
["\n        vec3 albedo_ \x3d mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ \x3d layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));"]))):c.glsl(n||(n=d(["\n        vec3 albedo_ \x3d mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ \x3d layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        "],
["\n        vec3 albedo_ \x3d mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ \x3d layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        "]))),c.glsl(p||(p=d(["\n        vec3 shadedNormal \x3d normalize(vNormalWorld);\n        albedo_ *\x3d 1.2;\n        vec3 viewForward \x3d - vec3(view[0][2], view[1][2], view[2][2]);\n        float alignmentLightView \x3d clamp(dot(-viewForward, lightingMainDirection), 0.0, 1.0);\n        float transmittance \x3d 1.0 - clamp(dot(-viewForward, shadedNormal), 0.0, 1.0);\n        float treeRadialFalloff \x3d vColor.r;\n        float backLightFactor \x3d 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n        additionalLight +\x3d backLightFactor * lightingMainIntensity;"],
["\n        vec3 shadedNormal \x3d normalize(vNormalWorld);\n        albedo_ *\x3d 1.2;\n        vec3 viewForward \x3d - vec3(view[0][2], view[1][2], view[2][2]);\n        float alignmentLightView \x3d clamp(dot(-viewForward, lightingMainDirection), 0.0, 1.0);\n        float transmittance \x3d 1.0 - clamp(dot(-viewForward, shadedNormal), 0.0, 1.0);\n        float treeRadialFalloff \x3d vColor.r;\n        float backLightFactor \x3d 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n        additionalLight +\x3d backLightFactor * lightingMainIntensity;"]))),
1===a.pbrMode||2===a.pbrMode?0===a.viewingMode?c.glsl(q||(q=d(["vec3 normalGround \x3d normalize(vpos + localOrigin);"],["vec3 normalGround \x3d normalize(vpos + localOrigin);"]))):c.glsl(r||(r=d(["vec3 normalGround \x3d vec3(0.0, 0.0, 1.0);"],["vec3 normalGround \x3d vec3(0.0, 0.0, 1.0);"]))):c.glsl(t||(t=d([""],[""]))),1===a.pbrMode||2===a.pbrMode?c.glsl(u||(u=d(["\n            float additionalAmbientIrradiance \x3d additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n            vec3 shadedColor \x3d evaluateSceneLightingPBR(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);"],
["\n            float additionalAmbientIrradiance \x3d additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n            vec3 shadedColor \x3d evaluateSceneLightingPBR(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);"]))):"vec3 shadedColor \x3d evaluateSceneLighting(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight);")));b.include(G.DefaultMaterialAuxiliaryPasses,a);return b};var g,k,l,m,n,p,q,r,
t,u,h});