// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define("require exports ../../../../../../core/tsSupport/makeTemplateObjectHelper ../attributes/VertexColor.glsl ../util/MixExternalColor.glsl ../../shaderModules/interfaces".split(" "),function(l,b,c,h,k,d){Object.defineProperty(b,"__esModule",{value:!0});b.ComputeMaterialColor=function(a,b){a.include(h.VertexColor,b);a.include(k.MixExternalColor,{stages:1});a=a.fragment;a.uniforms.add("uBaseColor","vec4");a.uniforms.add("uObjectOpacity","float");b.attributeColor?a.code.add(d.glsl(e||(e=c(["\n      vec3 _baseColor() {\n        // combine the old material parameters into a single one\n        return uBaseColor.rgb * vColor.rgb;\n      }\n\n      float _baseOpacity() {\n        return uBaseColor.a * vColor.a;\n      }\n    "],
["\n      vec3 _baseColor() {\n        // combine the old material parameters into a single one\n        return uBaseColor.rgb * vColor.rgb;\n      }\n\n      float _baseOpacity() {\n        return uBaseColor.a * vColor.a;\n      }\n    "])))):a.code.add(d.glsl(f||(f=c(["\n      vec3 _baseColor() {\n        // combine the old material parameters into a single one\n        return uBaseColor.rgb;\n      }\n\n      float _baseOpacity() {\n        return uBaseColor.a;\n      }\n    "],["\n      vec3 _baseColor() {\n        // combine the old material parameters into a single one\n        return uBaseColor.rgb;\n      }\n\n      float _baseOpacity() {\n        return uBaseColor.a;\n      }\n    "]))));
a.code.add(d.glsl(g||(g=c(["\n    vec4 computeMaterialColor(vec4 textureColor, vec4 externalColor, int externalColorMixMode) {\n      vec3 baseColor \x3d _baseColor();\n      float baseOpacity \x3d _baseOpacity();\n\n      vec3 color \x3d mixExternalColor(\n        baseColor,\n        textureColor.rgb,\n        externalColor.rgb,\n        externalColorMixMode\n      );\n      float opacity \x3d uObjectOpacity * mixExternalOpacity(\n        baseOpacity,\n        textureColor.a,\n        externalColor.a,\n        externalColorMixMode\n      );\n\n      return vec4(color, opacity);\n    }\n  "],
["\n    vec4 computeMaterialColor(vec4 textureColor, vec4 externalColor, int externalColorMixMode) {\n      vec3 baseColor \x3d _baseColor();\n      float baseOpacity \x3d _baseOpacity();\n\n      vec3 color \x3d mixExternalColor(\n        baseColor,\n        textureColor.rgb,\n        externalColor.rgb,\n        externalColorMixMode\n      );\n      float opacity \x3d uObjectOpacity * mixExternalOpacity(\n        baseOpacity,\n        textureColor.a,\n        externalColor.a,\n        externalColorMixMode\n      );\n\n      return vec4(color, opacity);\n    }\n  "]))))};
var e,f,g});