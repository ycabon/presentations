// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define(["require","exports","../../../../../../core/tsSupport/makeTemplateObjectHelper","../../shaderModules/interfaces"],function(h,c,f,g){function d(a){a.fragment.uniforms.add("texWaveNormal","sampler2D");a.fragment.uniforms.add("texWavePerturbation","sampler2D");a.fragment.uniforms.add("waveParams","vec4");a.fragment.uniforms.add("waveDirection","vec2");a.fragment.code.add(g.glsl(e||(e=f(["\n      const vec2  FLOW_JUMP \x3d vec2(6.0/25.0, 5.0/24.0);\n\n      vec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {\n        return 2.0 * texture2D(_tex, _uv).rg - 1.0;\n      }\n\n      float sampleNoiseTexture(vec2 _uv) {\n        return texture2D(texWavePerturbation, _uv).b;\n      }\n\n      vec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {\n        return 2.0 * texture2D(_tex, _uv).rgb - 1.0;\n      }\n\n      float computeProgress(vec2 uv, float time) {\n        return fract(time);\n      }\n\n      float computeWeight(vec2 uv, float time) {\n        float progress \x3d computeProgress(uv, time);\n        return 1.0 - abs(1.0 - 2.0 * progress);\n      }\n\n      vec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {\n        float flowStrength \x3d waveParams[2];\n        float flowOffset \x3d waveParams[3];\n\n        vec2 flowVector \x3d textureDenormalized2D(texFlow, uv) * flowStrength;\n\n        float progress \x3d computeProgress(uv, time + phaseOffset);\n        float weight \x3d computeWeight(uv, time + phaseOffset);\n\n        vec2 result \x3d uv;\n        result -\x3d flowVector * (progress + flowOffset);\n        result +\x3d phaseOffset;\n        result +\x3d (time - progress) * FLOW_JUMP;\n\n        return vec3(result, weight);\n      }\n\n      const float TIME_NOISE_TEXTURE_REPEAT \x3d 0.3737;\n      const float TIME_NOISE_STRENGTH \x3d 7.77;\n\n      vec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {\n        float waveStrength \x3d waveParams[0];\n\n        // overall directional shift in uv's for directional wave movement for\n        // now we do a hard coded scale for wave speed such that a unit length\n        // direction is not too fast.\n        vec2 waveMovement \x3d time * -_waveDir;\n\n        float timeNoise \x3d sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;\n\n        // compute two perturbed uvs and blend weights\n        // then sample the wave normals at the two positions and blend\n        vec3 uv_A \x3d computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);\n        vec3 uv_B \x3d computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);\n\n        vec3 normal_A \x3d textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;\n        vec3 normal_B \x3d textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;\n\n        // logic to flatten the wave pattern\n        // scale xy components of the normal, then adjust z (up) component\n        vec3 mixNormal \x3d normalize(normal_A + normal_B);\n        mixNormal.xy *\x3d waveStrength;\n        mixNormal.z \x3d sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));\n\n        return mixNormal;\n      }\n\n      vec3 getSurfaceNormal(vec2 _uv, float _time) {\n        float waveTextureRepeat \x3d waveParams[1];\n        return getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);\n      }\n    "],
["\n      const vec2  FLOW_JUMP \x3d vec2(6.0/25.0, 5.0/24.0);\n\n      vec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {\n        return 2.0 * texture2D(_tex, _uv).rg - 1.0;\n      }\n\n      float sampleNoiseTexture(vec2 _uv) {\n        return texture2D(texWavePerturbation, _uv).b;\n      }\n\n      vec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {\n        return 2.0 * texture2D(_tex, _uv).rgb - 1.0;\n      }\n\n      float computeProgress(vec2 uv, float time) {\n        return fract(time);\n      }\n\n      float computeWeight(vec2 uv, float time) {\n        float progress \x3d computeProgress(uv, time);\n        return 1.0 - abs(1.0 - 2.0 * progress);\n      }\n\n      vec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {\n        float flowStrength \x3d waveParams[2];\n        float flowOffset \x3d waveParams[3];\n\n        vec2 flowVector \x3d textureDenormalized2D(texFlow, uv) * flowStrength;\n\n        float progress \x3d computeProgress(uv, time + phaseOffset);\n        float weight \x3d computeWeight(uv, time + phaseOffset);\n\n        vec2 result \x3d uv;\n        result -\x3d flowVector * (progress + flowOffset);\n        result +\x3d phaseOffset;\n        result +\x3d (time - progress) * FLOW_JUMP;\n\n        return vec3(result, weight);\n      }\n\n      const float TIME_NOISE_TEXTURE_REPEAT \x3d 0.3737;\n      const float TIME_NOISE_STRENGTH \x3d 7.77;\n\n      vec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {\n        float waveStrength \x3d waveParams[0];\n\n        // overall directional shift in uv's for directional wave movement for\n        // now we do a hard coded scale for wave speed such that a unit length\n        // direction is not too fast.\n        vec2 waveMovement \x3d time * -_waveDir;\n\n        float timeNoise \x3d sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;\n\n        // compute two perturbed uvs and blend weights\n        // then sample the wave normals at the two positions and blend\n        vec3 uv_A \x3d computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);\n        vec3 uv_B \x3d computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);\n\n        vec3 normal_A \x3d textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;\n        vec3 normal_B \x3d textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;\n\n        // logic to flatten the wave pattern\n        // scale xy components of the normal, then adjust z (up) component\n        vec3 mixNormal \x3d normalize(normal_A + normal_B);\n        mixNormal.xy *\x3d waveStrength;\n        mixNormal.z \x3d sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));\n\n        return mixNormal;\n      }\n\n      vec3 getSurfaceNormal(vec2 _uv, float _time) {\n        float waveTextureRepeat \x3d waveParams[1];\n        return getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);\n      }\n    "]))))}
Object.defineProperty(c,"__esModule",{value:!0});c.WaterDistortion=d;(function(a){a.bindUniforms=function(a,b){a.setUniform1i("texWaveNormal",0);a.setUniform1i("texWavePerturbation",1);a.setUniform4f("waveParams",b.waveStrength,b.waveTextureRepeat,b.flowStrength,b.flowOffset);a.setUniform2f("waveDirection",b.waveDirection[0]*b.waveVelocity,b.waveDirection[1]*b.waveVelocity)}})(d=c.WaterDistortion||(c.WaterDistortion={}));var e});