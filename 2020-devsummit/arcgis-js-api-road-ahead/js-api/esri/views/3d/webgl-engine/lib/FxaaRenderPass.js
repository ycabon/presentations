// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define("require exports ../../../../core/maybe ./DefaultVertexBufferLayouts ../../../webgl/BufferObject ../../../webgl/Program ../../../webgl/renderState ../../../webgl/VertexArrayObject".split(" "),function(n,p,g,h,k,l,f,m){return function(){function a(c){this.isEnabled=!1;this.vertexAttributeLocations={position:0};this.rctx=c}a.prototype.enable=function(){if(this.isEnabled)return!0;var c=this.rctx;this.program=new l(c,"\n      #version 100\n      precision highp float;\n\n      attribute vec2 position;\n\n      varying   vec2 fCoordinate;\n\n      void main() {\n        fCoordinate \x3d (position + 1.0 ) * 0.5;\n        gl_Position \x3d vec4(position, -1, 1);\n      }",
"\n      #version 100\n      #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      #else\n      precision mediump float;\n      #endif\n\n      /**\n       * @license\n       * Copyright (c) 2011 NVIDIA Corporation. All rights reserved.\n       *\n       * TO  THE MAXIMUM  EXTENT PERMITTED  BY APPLICABLE  LAW, THIS SOFTWARE  IS PROVIDED\n       * *AS IS*  AND NVIDIA AND  ITS SUPPLIERS DISCLAIM  ALL WARRANTIES,  EITHER  EXPRESS\n       * OR IMPLIED, INCLUDING, BUT NOT LIMITED  TO, NONINFRINGEMENT,IMPLIED WARRANTIES OF\n       * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL  NVIDIA\n       * OR ITS SUPPLIERS BE  LIABLE  FOR  ANY  DIRECT, SPECIAL,  INCIDENTAL,  INDIRECT,  OR\n       * CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION,  DAMAGES FOR LOSS\n       * OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY\n       * OTHER PECUNIARY LOSS) ARISING OUT OF THE  USE OF OR INABILITY  TO USE THIS SOFTWARE,\n       * EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n       */\n\n      #define FXAA_EDGE_THRESHOLD      (1.0/8.0)\n      #define FXAA_EDGE_THRESHOLD_MIN  (1.0/24.0)\n      #define FXAA_SEARCH_STEPS        16\n      #define FXAA_SEARCH_THRESHOLD    (1.0/4.0)\n      #define FXAA_SUBPIX_CAP          (3.0/4.0)\n      #define FXAA_SUBPIX_TRIM         (1.0/4.0)\n      #define FXAA_SUBPIX_TRIM_SCALE (1.0/(1.0 - FXAA_SUBPIX_TRIM))\n\n      uniform vec2 uRcpFrameDimension;\n      uniform sampler2D uColorTexture;\n      varying vec2 fCoordinate;\n\n      // Return the luma, the estimation of luminance from rgb inputs.\n      // This approximates luma using one FMA instruction,\n      // skipping normalization and tossing out blue.\n      // FxaaLuma() will range 0.0 to 2.963210702.\n      float FxaaLuma(vec3 rgb) {\n        return rgb.y * (0.587 / 0.299) + rgb.x;\n      }\n      vec3 FxaaLerp3(vec3 a, vec3 b, float amountOfA) {\n        return (vec3(-amountOfA) * b) + ((a * vec3(amountOfA)) + b);\n      }\n      vec4 FxaaTexOff(sampler2D tex, vec2 pos, ivec2 off, vec2 rcpFrame) {\n        float x \x3d pos.x + float(off.x) * rcpFrame.x;\n        float y \x3d pos.y + float(off.y) * rcpFrame.y;\n        return texture2D(tex, vec2(x, y));\n      }\n\n      // pos is the output of FxaaVertexShader interpolated across screen.\n      // xy -\x3e actual texture position {0.0 to 1.0}\n      // rcpFrame should be a uniform equal to  {1.0/frameWidth, 1.0/frameHeight}\n      vec3 FxaaPixelShader(vec2 pos, sampler2D tex, vec2 rcpFrame) {\n        vec3 rgbN \x3d FxaaTexOff(tex, pos.xy, ivec2( 0,-1), rcpFrame).xyz;\n        vec3 rgbW \x3d FxaaTexOff(tex, pos.xy, ivec2(-1, 0), rcpFrame).xyz;\n        vec3 rgbM \x3d FxaaTexOff(tex, pos.xy, ivec2( 0, 0), rcpFrame).xyz;\n        vec3 rgbE \x3d FxaaTexOff(tex, pos.xy, ivec2( 1, 0), rcpFrame).xyz;\n        vec3 rgbS \x3d FxaaTexOff(tex, pos.xy, ivec2( 0, 1), rcpFrame).xyz;\n        float lumaN \x3d FxaaLuma(rgbN);\n        float lumaW \x3d FxaaLuma(rgbW);\n        float lumaM \x3d FxaaLuma(rgbM);\n        float lumaE \x3d FxaaLuma(rgbE);\n        float lumaS \x3d FxaaLuma(rgbS);\n        float rangeMin \x3d min(lumaM, min(min(lumaN, lumaW), min(lumaS, lumaE)));\n        float rangeMax \x3d max(lumaM, max(max(lumaN, lumaW), max(lumaS, lumaE)));\n        float range \x3d rangeMax - rangeMin;\n        if (range \x3c max(FXAA_EDGE_THRESHOLD_MIN, rangeMax * FXAA_EDGE_THRESHOLD)) {\n          return rgbM;\n        }\n        vec3 rgbL \x3d rgbN + rgbW + rgbM + rgbE + rgbS;\n        float lumaL \x3d (lumaN + lumaW + lumaE + lumaS) * 0.25;\n        float rangeL \x3d abs(lumaL - lumaM);\n        float blendL \x3d max(0.0, (rangeL / range) - FXAA_SUBPIX_TRIM) * FXAA_SUBPIX_TRIM_SCALE;\n        blendL \x3d min(FXAA_SUBPIX_CAP, blendL);\n        vec3 rgbNW \x3d FxaaTexOff(tex, pos.xy, ivec2(-1,-1), rcpFrame).xyz;\n        vec3 rgbNE \x3d FxaaTexOff(tex, pos.xy, ivec2( 1,-1), rcpFrame).xyz;\n        vec3 rgbSW \x3d FxaaTexOff(tex, pos.xy, ivec2(-1, 1), rcpFrame).xyz;\n        vec3 rgbSE \x3d FxaaTexOff(tex, pos.xy, ivec2( 1, 1), rcpFrame).xyz;\n        rgbL +\x3d (rgbNW + rgbNE + rgbSW + rgbSE);\n        rgbL *\x3d vec3(1.0/9.0);\n        float lumaNW \x3d FxaaLuma(rgbNW);\n        float lumaNE \x3d FxaaLuma(rgbNE);\n        float lumaSW \x3d FxaaLuma(rgbSW);\n        float lumaSE \x3d FxaaLuma(rgbSE);\n        float edgeVert \x3d\n          abs((0.25 * lumaNW) + (-0.5 * lumaN) + (0.25 * lumaNE)) +\n          abs((0.50 * lumaW ) + (-1.0 * lumaM) + (0.50 * lumaE )) +\n          abs((0.25 * lumaSW) + (-0.5 * lumaS) + (0.25 * lumaSE));\n        float edgeHorz \x3d\n          abs((0.25 * lumaNW) + (-0.5 * lumaW) + (0.25 * lumaSW)) +\n          abs((0.50 * lumaN ) + (-1.0 * lumaM) + (0.50 * lumaS )) +\n          abs((0.25 * lumaNE) + (-0.5 * lumaE) + (0.25 * lumaSE));\n        bool horzSpan \x3d edgeHorz \x3e\x3d edgeVert;\n        float lengthSign \x3d horzSpan ? -rcpFrame.y : -rcpFrame.x;\n        if(!horzSpan) {\n          lumaN \x3d lumaW;\n          lumaS \x3d lumaE;\n        }\n        float gradientN \x3d abs(lumaN - lumaM);\n        float gradientS \x3d abs(lumaS - lumaM);\n        lumaN \x3d (lumaN + lumaM) * 0.5;\n        lumaS \x3d (lumaS + lumaM) * 0.5;\n        if (gradientN \x3c gradientS)\n        {\n          lumaN \x3d lumaS;\n          lumaN \x3d lumaS;\n          gradientN \x3d gradientS;\n          lengthSign *\x3d -1.0;\n        }\n        vec2 posN;\n        posN.x \x3d pos.x + (horzSpan ? 0.0 : lengthSign * 0.5);\n        posN.y \x3d pos.y + (horzSpan ? lengthSign * 0.5 : 0.0);\n        gradientN *\x3d FXAA_SEARCH_THRESHOLD;\n        vec2 posP \x3d posN;\n        vec2 offNP \x3d horzSpan ? vec2(rcpFrame.x, 0.0) : vec2(0.0, rcpFrame.y);\n        float lumaEndN \x3d lumaN;\n        float lumaEndP \x3d lumaN;\n        bool doneN \x3d false;\n        bool doneP \x3d false;\n        posN +\x3d offNP * vec2(-1.0, -1.0);\n        posP +\x3d offNP * vec2( 1.0,  1.0);\n        for(int i \x3d 0; i \x3c FXAA_SEARCH_STEPS; i++) {\n          if(!doneN) {\n            lumaEndN \x3d FxaaLuma(texture2D(tex, posN.xy).xyz);\n          }\n          if(!doneP) {\n            lumaEndP \x3d FxaaLuma(texture2D(tex, posP.xy).xyz);\n          }\n          doneN \x3d doneN || (abs(lumaEndN - lumaN) \x3e\x3d gradientN);\n          doneP \x3d doneP || (abs(lumaEndP - lumaN) \x3e\x3d gradientN);\n          if(doneN \x26\x26 doneP) { break; }\n          if(!doneN) {\n            posN -\x3d offNP;\n          }\n          if(!doneP) {\n            posP +\x3d offNP;\n          }\n        }\n        float dstN \x3d horzSpan ? pos.x - posN.x : pos.y - posN.y;\n        float dstP \x3d horzSpan ? posP.x - pos.x : posP.y - pos.y;\n        bool directionN \x3d dstN \x3c dstP;\n        lumaEndN \x3d directionN ? lumaEndN : lumaEndP;\n        if(((lumaM - lumaN) \x3c 0.0) \x3d\x3d ((lumaEndN - lumaN) \x3c 0.0)) {\n          lengthSign \x3d 0.0;\n        }\n        float spanLength \x3d (dstP + dstN);\n        dstN \x3d directionN ? dstN : dstP;\n        float subPixelOffset \x3d (0.5 + (dstN * (-1.0/spanLength))) * lengthSign;\n        vec3 rgbF \x3d texture2D(tex, vec2(\n          pos.x + (horzSpan ? 0.0 : subPixelOffset),\n          pos.y + (horzSpan ? subPixelOffset : 0.0))).xyz;\n        return FxaaLerp3(rgbL, rgbF, blendL);\n      }\n\n      void main() {\n        vec4 color;\n        vec2 screenCoord \x3d fCoordinate;\n        // if (screenCoord.x \x3c 0.5) {\n          color.rgb \x3d FxaaPixelShader(screenCoord, uColorTexture, uRcpFrameDimension);\n        // } else if (screenCoord.x \x3c 0.501 \x26\x26 screenCoord.x \x3e 0.499) {\n        //   color.rgb \x3d vec3(1,0,0);\n        // } else {\n        //   color \x3d texture2D(uColorTexture, fCoordinate);\n        // }\n        color.a \x3d 1.0;\n        gl_FragColor \x3d color;\n      }",
this.vertexAttributeLocations);this.pipelineState=f.makePipelineState({colorWrite:f.defaultColorWriteParams});var d=new Float32Array([-1,-1,3,-1,-1,3]);this.vao=new m(c,this.vertexAttributeLocations,{geometry:h.Pos2},{geometry:new k(c,34962,35044,d)});return this.isEnabled=!0};a.prototype.disable=function(){this.isEnabled&&(this.program.dispose(),this.program=null,this.vao.dispose(),this.vao=null,this.isEnabled=!1)};a.prototype.render=function(c,d){this.enable();var b=this.rctx;b.bindVAO(this.vao);
b.bindFramebuffer(d);var a=0,e=0;g.isSome(d)?(a=d.descriptor.width,e=d.descriptor.height):(a=b.gl.canvas.width,e=b.gl.canvas.height);b.bindProgram(this.program);b.setPipelineState(this.pipelineState);b.bindTexture(c.colorTexture,0);this.program.setUniform1i("uColorTexture",0);this.program.setUniform2f("uRcpFrameDimension",1/a,1/e);b.drawArrays(4,0,3)};return a}()});