// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define("require exports ../../../../core/tsSupport/makeTemplateObjectHelper ../../../../core/mathUtils ../core/shaderLibrary/Laserline.glsl ../core/shaderLibrary/ScreenSpacePass ../core/shaderModules/interfaces ../core/shaderModules/ShaderBuilder".split(" "),function(B,e,c,x,y,z,d,A){Object.defineProperty(e,"__esModule",{value:!0});e.defaultAngleCutoff=x.deg2rad(6);e.build=function(b){var a=new A.ShaderBuilder;a.extensions.add("GL_OES_standard_derivatives");a.include(z.ScreenSpacePass);a.include(y.Laserline,
b);a.fragment.uniforms.add("angleCutoff","vec2");a.fragment.uniforms.add("globalAlpha","float");b.heightPlaneEnabled&&a.fragment.uniforms.add("heightPlane","vec4");b.heightPlaneHeightEnabled&&(a.fragment.uniforms.add("heightPlaneHeight","float"),a.fragment.uniforms.add("heightPlaneFillColor","vec4"));b.pointDistanceEnabled&&a.fragment.uniforms.add("pointDistanceSphere","vec4");b.lineVerticalPlaneEnabled&&a.fragment.uniforms.add("lineVerticalPlane","vec4").add("lineVerticalStart","vec3").add("lineVerticalEnd",
"vec3");(b.heightPlaneEnabled||b.pointDistanceEnabled||b.lineVerticalPlaneEnabled)&&a.fragment.uniforms.add("maxPixelDistance","float");b.intersectsLineEnabled&&a.fragment.uniforms.add("intersectsLineStart","vec3").add("intersectsLineEnd","vec3").add("intersectsLineDirection","vec3").add("intersectsLineRadius","float").add("perScreenPixelRatio","float");if(b.heightPlaneEnabled||b.lineVerticalPlaneEnabled)b.heightPlaneHeightEnabled&&!b.lineVerticalPlaneEnabled||a.fragment.code.add(d.glsl(f||(f=c(["\n      float planeDistancePixels(vec4 plane, vec3 pos) {\n        float dist \x3d dot(plane.xyz, pos) + plane.w;\n        float width \x3d fwidth(dist);\n        dist /\x3d min(width, maxPixelDistance);\n        return abs(dist);\n      }"],
["\n      float planeDistancePixels(vec4 plane, vec3 pos) {\n        float dist \x3d dot(plane.xyz, pos) + plane.w;\n        float width \x3d fwidth(dist);\n        dist /\x3d min(width, maxPixelDistance);\n        return abs(dist);\n      }"])))),b.heightPlaneHeightEnabled&&a.fragment.code.add(d.glsl(g||(g=c(["\n      vec2 boxDistancePixels(vec4 plane, float height, vec3 pos) {\n        float d \x3d dot(plane.xyz, pos);\n\n        float offsetMin \x3d plane.w;\n        float offsetMax \x3d offsetMin - height;\n\n        float dmin \x3d d + offsetMin;\n        float dmax \x3d d + offsetMax;\n\n        float width \x3d fwidth(d);\n\n        float outerDistance \x3d min(abs(dmin), abs(dmax));\n        float innerDistance \x3d max(-dmin, dmax);\n\n        return vec2(innerDistance, outerDistance) / min(width, maxPixelDistance);\n      }"],
["\n      vec2 boxDistancePixels(vec4 plane, float height, vec3 pos) {\n        float d \x3d dot(plane.xyz, pos);\n\n        float offsetMin \x3d plane.w;\n        float offsetMax \x3d offsetMin - height;\n\n        float dmin \x3d d + offsetMin;\n        float dmax \x3d d + offsetMax;\n\n        float width \x3d fwidth(d);\n\n        float outerDistance \x3d min(abs(dmin), abs(dmax));\n        float innerDistance \x3d max(-dmin, dmax);\n\n        return vec2(innerDistance, outerDistance) / min(width, maxPixelDistance);\n      }"]))));
b.pointDistanceEnabled&&a.fragment.code.add(d.glsl(h||(h=c(["\n    float sphereDistancePixels(vec4 sphere, vec3 pos) {\n      float dist \x3d distance(sphere.xyz, pos) - sphere.w;\n      float width \x3d fwidth(dist);\n      dist /\x3d min(width, maxPixelDistance);\n      return abs(dist);\n    }\n    "],["\n    float sphereDistancePixels(vec4 sphere, vec3 pos) {\n      float dist \x3d distance(sphere.xyz, pos) - sphere.w;\n      float width \x3d fwidth(dist);\n      dist /\x3d min(width, maxPixelDistance);\n      return abs(dist);\n    }\n    "]))));
b.intersectsLineEnabled&&a.fragment.code.add(d.glsl(k||(k=c(["\n    float lineDistancePixels(vec3 start, vec3 dir, float radius, vec3 pos) {\n      float dist \x3d length(cross(dir, pos - start)) / (length(pos) * perScreenPixelRatio);\n      return abs(dist) - radius;\n    }\n    "],["\n    float lineDistancePixels(vec3 start, vec3 dir, float radius, vec3 pos) {\n      float dist \x3d length(cross(dir, pos - start)) / (length(pos) * perScreenPixelRatio);\n      return abs(dist) - radius;\n    }\n    "]))));
(b.lineVerticalPlaneEnabled||b.intersectsLineEnabled)&&a.fragment.code.add(d.glsl(l||(l=c(["\n    bool pointIsWithinLine(vec3 pos, vec3 start, vec3 end) {\n      vec3 dir \x3d end - start;\n      float t2 \x3d dot(dir, pos - start);\n      float l2 \x3d dot(dir, dir);\n      return t2 \x3e\x3d 0.0 \x26\x26 t2 \x3c\x3d l2;\n    }\n    "],["\n    bool pointIsWithinLine(vec3 pos, vec3 start, vec3 end) {\n      vec3 dir \x3d end - start;\n      float t2 \x3d dot(dir, pos - start);\n      float l2 \x3d dot(dir, dir);\n      return t2 \x3e\x3d 0.0 \x26\x26 t2 \x3c\x3d l2;\n    }\n    "]))));
a.fragment.code.add(d.glsl(m||(m=c(["\n  void main() {\n    vec3 pos;\n    vec3 normal;\n    float depthDiscontinuityAlpha;\n\n    if (!laserlineReconstructFromDepth(pos, normal, depthDiscontinuityAlpha)) {\n      discard;\n    }\n\n    vec4 color \x3d vec4(0, 0, 0, 0);\n  "],["\n  void main() {\n    vec3 pos;\n    vec3 normal;\n    float depthDiscontinuityAlpha;\n\n    if (!laserlineReconstructFromDepth(pos, normal, depthDiscontinuityAlpha)) {\n      discard;\n    }\n\n    vec4 color \x3d vec4(0, 0, 0, 0);\n  "]))));
b.heightPlaneEnabled&&(a.fragment.code.add(d.glsl(n||(n=c(["\n    {\n      float heightPlaneAlpha \x3d 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, heightPlane.xyz)));\n    "],["\n    {\n      float heightPlaneAlpha \x3d 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, heightPlane.xyz)));\n    "])))),b.heightPlaneHeightEnabled?a.fragment.code.add(d.glsl(p||(p=c(["\n      vec2 heightBoxDistance \x3d boxDistancePixels(heightPlane, heightPlaneHeight, pos);\n      vec4 heightPlaneFill \x3d premultipliedColor(heightPlaneFillColor.rgb, heightPlaneFillColor.a) * clamp(0.5 - heightBoxDistance.x, 0.0, 1.0);\n      vec4 heightPlaneLine \x3d laserlineProfile(heightBoxDistance.y);\n\n      vec4 heightPlaneColor \x3d blendPremultiplied(heightPlaneFill, heightPlaneLine);\n      "],
["\n      vec2 heightBoxDistance \x3d boxDistancePixels(heightPlane, heightPlaneHeight, pos);\n      vec4 heightPlaneFill \x3d premultipliedColor(heightPlaneFillColor.rgb, heightPlaneFillColor.a) * clamp(0.5 - heightBoxDistance.x, 0.0, 1.0);\n      vec4 heightPlaneLine \x3d laserlineProfile(heightBoxDistance.y);\n\n      vec4 heightPlaneColor \x3d blendPremultiplied(heightPlaneFill, heightPlaneLine);\n      "])))):a.fragment.code.add(d.glsl(q||(q=c(["\n      vec4 heightPlaneColor \x3d laserlineProfile(planeDistancePixels(heightPlane, pos));\n      "],
["\n      vec4 heightPlaneColor \x3d laserlineProfile(planeDistancePixels(heightPlane, pos));\n      "])))),a.fragment.code.add(d.glsl(r||(r=c(["\n      color \x3d max(color, heightPlaneColor * heightPlaneAlpha);\n    }\n    "],["\n      color \x3d max(color, heightPlaneColor * heightPlaneAlpha);\n    }\n    "])))));b.pointDistanceEnabled&&a.fragment.code.add(d.glsl(t||(t=c(["\n    {\n      // distance to sphere\n      float pointDistanceSphereDistance \x3d sphereDistancePixels(pointDistanceSphere, pos);\n      vec4 pointDistanceSphereColor \x3d laserlineProfile(pointDistanceSphereDistance);\n      float pointDistanceSphereAlpha \x3d 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, normalize(pos - pointDistanceSphere.xyz))));\n\n      color \x3d max(color, pointDistanceSphereColor * pointDistanceSphereAlpha);\n    }\n    "],
["\n    {\n      // distance to sphere\n      float pointDistanceSphereDistance \x3d sphereDistancePixels(pointDistanceSphere, pos);\n      vec4 pointDistanceSphereColor \x3d laserlineProfile(pointDistanceSphereDistance);\n      float pointDistanceSphereAlpha \x3d 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, normalize(pos - pointDistanceSphere.xyz))));\n\n      color \x3d max(color, pointDistanceSphereColor * pointDistanceSphereAlpha);\n    }\n    "]))));b.lineVerticalPlaneEnabled&&
a.fragment.code.add(d.glsl(u||(u=c(["\n    {\n      if (pointIsWithinLine(pos, lineVerticalStart, lineVerticalEnd)) {\n        float lineVerticalDistance \x3d planeDistancePixels(lineVerticalPlane, pos);\n\n        vec4 lineVerticalColor \x3d laserlineProfile(lineVerticalDistance);\n        float lineVerticalAlpha \x3d 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, lineVerticalPlane.xyz)));\n\n        color \x3d max(color, lineVerticalColor * lineVerticalAlpha);\n      }\n    }\n    "],
["\n    {\n      if (pointIsWithinLine(pos, lineVerticalStart, lineVerticalEnd)) {\n        float lineVerticalDistance \x3d planeDistancePixels(lineVerticalPlane, pos);\n\n        vec4 lineVerticalColor \x3d laserlineProfile(lineVerticalDistance);\n        float lineVerticalAlpha \x3d 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, lineVerticalPlane.xyz)));\n\n        color \x3d max(color, lineVerticalColor * lineVerticalAlpha);\n      }\n    }\n    "]))));b.intersectsLineEnabled&&
a.fragment.code.add(d.glsl(v||(v=c(["\n    {\n      if (pointIsWithinLine(pos, intersectsLineStart, intersectsLineEnd)) {\n        float intersectsLineDistance \x3d lineDistancePixels(intersectsLineStart, intersectsLineDirection, intersectsLineRadius, pos);\n        vec4 intersectsLineColor \x3d laserlineProfile(intersectsLineDistance);\n        float intersectsLineAlpha \x3d 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, 1.0 - abs(dot(normal, intersectsLineDirection)));\n\n        color \x3d max(color, intersectsLineColor * intersectsLineAlpha);\n      }\n    }\n    "],
["\n    {\n      if (pointIsWithinLine(pos, intersectsLineStart, intersectsLineEnd)) {\n        float intersectsLineDistance \x3d lineDistancePixels(intersectsLineStart, intersectsLineDirection, intersectsLineRadius, pos);\n        vec4 intersectsLineColor \x3d laserlineProfile(intersectsLineDistance);\n        float intersectsLineAlpha \x3d 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, 1.0 - abs(dot(normal, intersectsLineDirection)));\n\n        color \x3d max(color, intersectsLineColor * intersectsLineAlpha);\n      }\n    }\n    "]))));
a.fragment.code.add(d.glsl(w||(w=c(["\n    gl_FragColor \x3d laserlineOutput(color * depthDiscontinuityAlpha);\n  }\n  "],["\n    gl_FragColor \x3d laserlineOutput(color * depthDiscontinuityAlpha);\n  }\n  "]))));return a};var f,g,h,k,l,m,n,p,q,r,t,u,v,w});