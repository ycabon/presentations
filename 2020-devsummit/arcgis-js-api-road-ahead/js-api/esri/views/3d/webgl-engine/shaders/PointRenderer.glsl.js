// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define("require exports ../../../../core/tsSupport/makeTemplateObjectHelper ../core/shaderLibrary/Slice.glsl ../core/shaderLibrary/output/OutputHighlight.glsl ../core/shaderLibrary/util/RgbaFloatEncoding.glsl ../core/shaderModules/interfaces ../core/shaderModules/ShaderBuilder".split(" "),function(y,e,b,u,v,w,c,x){Object.defineProperty(e,"__esModule",{value:!0});e.build=function(d){var a=new x.ShaderBuilder,e=0===d.output,f=1===d.output,g=4===d.output;a.extensions.add("GL_OES_standard_derivatives");
a.include(u.Slice,d);a.attributes.add("position","vec3");a.attributes.add("color","vec3");a.vertex.uniforms.add("uModelViewMatrix","mat4").add("uProjectionMatrix","mat4").add("uScreenMinMaxSize","vec2").add("uPointScale","vec2").add("uClipMin","vec3").add("uClipMax","vec3");f?(a.vertex.uniforms.add("nearFar","vec2"),a.varyings.add("depth","float")):4!==d.output&&a.varyings.add("vColor","vec3");a.vertex.code.add(c.glsl(h||(h=b(["\n    void main(void) {\n      // Move clipped points outside of clipspace\n      if (position.x \x3c uClipMin.x || position.y \x3c uClipMin.y || position.z \x3c uClipMin.z ||\n        position.x \x3e uClipMax.x || position.y \x3e uClipMax.y || position.z \x3e uClipMax.z) {\n        gl_Position \x3d vec4(0.0,0.0,0.0,2.0);\n        gl_PointSize \x3d 0.0;\n        return;\n      }\n\n      if (rejectBySlice(position)) {\n        gl_Position \x3d vec4(0.0,0.0,0.0,2.0);\n        gl_PointSize \x3d 0.0;\n        return;\n      }\n\n      // Position in camera space\n      vec4 camera \x3d uModelViewMatrix * vec4(position, 1.0);\n\n      float pointSize \x3d uPointScale.x;\n      vec4 position \x3d uProjectionMatrix * camera;\n     ",
"\n\n     gl_PointSize \x3d clampedScreenSize;\n     gl_Position \x3d position;\n\n     ","\n     ","\n    }\n  "],["\n    void main(void) {\n      // Move clipped points outside of clipspace\n      if (position.x \x3c uClipMin.x || position.y \x3c uClipMin.y || position.z \x3c uClipMin.z ||\n        position.x \x3e uClipMax.x || position.y \x3e uClipMax.y || position.z \x3e uClipMax.z) {\n        gl_Position \x3d vec4(0.0,0.0,0.0,2.0);\n        gl_PointSize \x3d 0.0;\n        return;\n      }\n\n      if (rejectBySlice(position)) {\n        gl_Position \x3d vec4(0.0,0.0,0.0,2.0);\n        gl_PointSize \x3d 0.0;\n        return;\n      }\n\n      // Position in camera space\n      vec4 camera \x3d uModelViewMatrix * vec4(position, 1.0);\n\n      float pointSize \x3d uPointScale.x;\n      vec4 position \x3d uProjectionMatrix * camera;\n     ",
"\n\n     gl_PointSize \x3d clampedScreenSize;\n     gl_Position \x3d position;\n\n     ","\n     ","\n    }\n  "])),d.drawScreenSize?c.glsl(k||(k=b(["\n      float clampedScreenSize \x3d pointSize;"],["\n      float clampedScreenSize \x3d pointSize;"]))):c.glsl(l||(l=b(["\n      float pointRadius \x3d 0.5 * pointSize;\n      vec4 cameraOffset \x3d camera + vec4(0.0, pointRadius, 0.0, 0.0);\n      vec4 positionOffset \x3d uProjectionMatrix * cameraOffset;\n      float radius \x3d abs(positionOffset.y - position.y);\n      float viewHeight \x3d uPointScale.y;\n      // screen diameter \x3d (2 * r / w) * (h / 2)\n      float screenPointSize \x3d (radius / position.w) * viewHeight;\n      float clampedScreenSize \x3d clamp(screenPointSize, uScreenMinMaxSize.x, uScreenMinMaxSize.y);\n      // Shift towards camera, to move rendered point out of terrain i.e. to\n      // the camera-facing end of the virtual point when considering it as a\n      // 3D sphere.\n      camera.xyz -\x3d normalize(camera.xyz) * pointRadius * clampedScreenSize / screenPointSize;\n      position \x3d uProjectionMatrix * camera;"],
["\n      float pointRadius \x3d 0.5 * pointSize;\n      vec4 cameraOffset \x3d camera + vec4(0.0, pointRadius, 0.0, 0.0);\n      vec4 positionOffset \x3d uProjectionMatrix * cameraOffset;\n      float radius \x3d abs(positionOffset.y - position.y);\n      float viewHeight \x3d uPointScale.y;\n      // screen diameter \x3d (2 * r / w) * (h / 2)\n      float screenPointSize \x3d (radius / position.w) * viewHeight;\n      float clampedScreenSize \x3d clamp(screenPointSize, uScreenMinMaxSize.x, uScreenMinMaxSize.y);\n      // Shift towards camera, to move rendered point out of terrain i.e. to\n      // the camera-facing end of the virtual point when considering it as a\n      // 3D sphere.\n      camera.xyz -\x3d normalize(camera.xyz) * pointRadius * clampedScreenSize / screenPointSize;\n      position \x3d uProjectionMatrix * camera;"]))),
f?c.glsl(m||(m=b(["depth \x3d (-camera.z - nearFar[0]) / (nearFar[1] - nearFar[0]);"],["depth \x3d (-camera.z - nearFar[0]) / (nearFar[1] - nearFar[0]);"]))):"",e?c.glsl(n||(n=b(["vColor \x3d color;"],["vColor \x3d color;"]))):""));a.include(w.RgbaFloatEncoding,d);g&&a.include(v.OutputHighlight);a.fragment.code.add(c.glsl(p||(p=b(["\n    void main(void) {\n      vec2 vOffset \x3d gl_PointCoord - vec2(0.5, 0.5);\n      float r2 \x3d dot(vOffset, vOffset);\n\n      if (r2 \x3e 0.25) {\n        discard;\n      }\n      ",
"\n      ","\n      ","\n    }\n  "],["\n    void main(void) {\n      vec2 vOffset \x3d gl_PointCoord - vec2(0.5, 0.5);\n      float r2 \x3d dot(vOffset, vOffset);\n\n      if (r2 \x3e 0.25) {\n        discard;\n      }\n      ","\n      ","\n      ","\n    }\n  "])),f?c.glsl(q||(q=b(["gl_FragColor \x3d float2rgba(depth);"],["gl_FragColor \x3d float2rgba(depth);"]))):"",g?c.glsl(r||(r=b(["outputHighlight();"],["outputHighlight();"]))):"",e?c.glsl(t||(t=b(["gl_FragColor \x3d vec4(vColor, 1.0);"],["gl_FragColor \x3d vec4(vColor, 1.0);"]))):
""));return a};var k,l,m,n,h,q,r,t,p});