// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define("require exports ../../../../core/tsSupport/makeTemplateObjectHelper ../core/shaderLibrary/Slice.glsl ../core/shaderLibrary/Transform.glsl ../core/shaderModules/interfaces ../core/shaderModules/ShaderBuilder".split(" "),function(l,b,c,g,h,d,k){Object.defineProperty(b,"__esModule",{value:!0});b.build=function(b){var a=new k.ShaderBuilder;a.include(h.Transform,{linearDepth:!1});a.vertex.uniforms.add("proj","mat4").add("view","mat4").add("viewNormal","mat4").add("model","mat4").add("modelNormal",
"mat4");a.fragment.uniforms.add("color","vec4").add("shadedColor","vec4").add("shadingDirection","vec3");a.attributes.add("position","vec3");a.attributes.add("normal","vec3");a.varyings.add("vWorldPosition","vec3");a.varyings.add("vViewNormal","vec3");a.varyings.add("vViewDirection","vec3");a.vertex.code.add(d.glsl(e||(e=c(["\n    void main(void) {\n      vWorldPosition \x3d (model * vec4(position, 1.0)).xyz;\n\n      vec3 worldNormal \x3d (modelNormal * vec4(normal, 1)).xyz;\n      vViewNormal \x3d (viewNormal * vec4(worldNormal, 1)).xyz;\n\n      gl_Position \x3d transformPosition(proj, view, vWorldPosition);\n    }\n  "],
["\n    void main(void) {\n      vWorldPosition \x3d (model * vec4(position, 1.0)).xyz;\n\n      vec3 worldNormal \x3d (modelNormal * vec4(normal, 1)).xyz;\n      vViewNormal \x3d (viewNormal * vec4(worldNormal, 1)).xyz;\n\n      gl_Position \x3d transformPosition(proj, view, vWorldPosition);\n    }\n  "]))));a.include(g.Slice,b);a.fragment.code.add(d.glsl(f||(f=c(["\n    void main() {\n      discardBySlice(vWorldPosition);\n\n      vec3 viewNormalNorm \x3d normalize(vViewNormal);\n\n      float shadingFactor \x3d 1.0 - clamp(-dot(viewNormalNorm, shadingDirection), 0.0, 1.0);\n      vec4 colorWithShading \x3d mix(color, shadedColor, shadingFactor);\n\n      gl_FragColor \x3d highlightSlice(colorWithShading, vWorldPosition);\n    }\n    "],
["\n    void main() {\n      discardBySlice(vWorldPosition);\n\n      vec3 viewNormalNorm \x3d normalize(vViewNormal);\n\n      float shadingFactor \x3d 1.0 - clamp(-dot(viewNormalNorm, shadingDirection), 0.0, 1.0);\n      vec4 colorWithShading \x3d mix(color, shadedColor, shadingFactor);\n\n      gl_FragColor \x3d highlightSlice(colorWithShading, vWorldPosition);\n    }\n    "]))));return a};var e,f});