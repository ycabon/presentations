// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define(["require","exports"],function(a,b){return{environment:{"stars.frag":"#include \x3cutil/fsPrecision.glsl\x3e\nvarying vec4 vcolor;\nvarying float vsize;\nvoid main() {\n  float cap \x3d 0.7;\n  float scale \x3d 1.0/cap;\n  float helper \x3d clamp(length(abs(gl_PointCoord-vec2(0.5))),0.0,cap);\n  float alpha \x3d clamp((cap-helper)*scale,0.0,1.0);\n  float intensity \x3d alpha*alpha*alpha;\n  if (vsize \x3c 3.0)\n    intensity *\x3d 0.5;\n  gl_FragColor \x3d vec4(1.0,1.0,1.0,intensity);\n  gl_FragColor.xyz *\x3d vcolor.xyz;\n}",
"stars.vert":"#include \x3cutil/vsPrecision.glsl\x3e\n#include \x3cutil/alignPixel.glsl\x3e\nuniform mat4 proj;\nuniform mat4 view;\nuniform mat4 model;\nuniform vec4 viewport;\nuniform float pixelRatio;\nattribute vec3 position;\nattribute vec4 color;\nattribute float size;\nvarying vec4 vcolor;\nvarying float vsize;\nvoid main(void) {\n  vec4 posProj \x3d proj * view * model*vec4(position*1.0e25,1.0);\n  gl_Position \x3d alignToPixelCenter(posProj, viewport.zw);\n  gl_Position.z \x3d gl_Position.w;\n  vcolor \x3d color / 1.2;\n  vsize \x3d size * 5.0 * pixelRatio;\n  gl_PointSize \x3d vsize;\n}"},
materials:{hud:{"colorPass.frag":"#include \x3cmaterials/hud/hudHeader.glsl\x3e\nvoid main() {\n#include \x3cmaterials/hud/hudMain.glsl\x3e\n}","highlightPass.frag":"#include \x3cmaterials/hud/hudHeader.glsl\x3e\n#include \x3cutil/highlight.glsl\x3e\nuniform sampler2D depthTex;\nuniform vec4 highlightViewportPixelSz;\nvoid main() {\n#include \x3cmaterials/hud/hudMain.glsl\x3e\n#ifdef BINARY_HIGHLIGHT_OCCLUSION\n  if (voccluded \x3d\x3d 1.0) {\n    gl_FragColor \x3d vec4(1.0, 1.0, 0.0, 1.0);\n  } else {\n    gl_FragColor \x3d vec4(1.0, 0.0, 1.0, 1.0);\n  }\n#else\n  gl_FragColor \x3d highlightData(gl_FragCoord, depthTex, highlightViewportPixelSz);\n#endif\n}",
"hud.vert":"#include \x3cutil/vsPrecision.glsl\x3e\n#include \x3cutil/alignPixel.glsl\x3e\n#include \x3cutil/hud.glsl\x3e\n#include \x3cutil/visualVariables.glsl\x3e\n#include \x3cutil/slice.glsl\x3e\nuniform vec2 screenOffset;\nuniform vec2 anchorPos;\nuniform vec2 textureCoordinateScaleFactor;\n#ifdef SCREEN_SIZE_PERSPECTIVE\nuniform vec4 screenSizePerspective;\n#endif\n#ifdef DEBUG_DRAW_BORDER\nvarying vec4 debugBorderCoords;\n#endif\nattribute vec2 uv0;\nattribute vec4 color;\nattribute vec2 size;\nattribute vec4 auxpos2;\nvarying vec4 vcolor;\nvarying vec2 vtc;\nvarying vec2 vsize;\n#ifdef BINARY_HIGHLIGHT_OCCLUSION\nvarying float voccluded;\n#endif\nvoid main(void) {\n  ProjectHUDAux projectAux;\n  vec4 posProj \x3d projectPositionHUD(projectAux);\n  if (rejectBySlice(projectAux.posModel)) {\n    gl_Position \x3d vec4(1e038, 1e038, 1e038, 1.0);\n    return;\n  }\n  vec2 inputSize;\n#ifdef SCREEN_SIZE_PERSPECTIVE\n  inputSize \x3d screenSizePerspectiveScaleVec2(size, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspective);\n  vec2 screenOffsetScaled \x3d screenSizePerspectiveScaleVec2(screenOffset, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);\n#else\n  inputSize \x3d size;\n  vec2 screenOffsetScaled \x3d screenOffset;\n#endif\n#ifdef VV_SIZE\n  inputSize *\x3d vvGetScale(auxpos2).xx;\n#endif\n  vec2 combinedSize \x3d inputSize * pixelRatio;\n  vec4 quadOffset \x3d vec4(0.0);\n#if defined(OCCL_TEST) || defined(BINARY_HIGHLIGHT_OCCLUSION)\n  bool visible \x3d testVisibilityHUD(posProj);\n#endif\n#ifdef BINARY_HIGHLIGHT_OCCLUSION\nvoccluded \x3d visible ? 0.0 : 1.0;\n#endif\n#ifdef OCCL_TEST\n  if (visible) {\n#endif\n    vec2 uv01 \x3d floor(uv0);\n    vec2 uv \x3d uv0 - uv01;\n    quadOffset.xy \x3d ((uv01 - anchorPos) * 2.0 * combinedSize + screenOffsetScaled) / viewport.zw * posProj.w;\n#ifdef SIGNED_DISTANCE_FIELD\n    posProj \x3d alignToPixelOrigin(posProj, viewport.zw) + quadOffset;\n#else\n    posProj +\x3d quadOffset;\n    if (inputSize.x \x3d\x3d size.x) {\n      posProj \x3d alignToPixelOrigin(posProj, viewport.zw);\n    }\n#endif\n    gl_Position \x3d posProj;\n    vtc \x3d uv * textureCoordinateScaleFactor;\n#ifdef DEBUG_DRAW_BORDER\n    debugBorderCoords \x3d vec4(uv01, 1.5 / combinedSize);\n#endif\n    vsize \x3d inputSize;\n#ifdef OCCL_TEST\n  } else {\n    vtc \x3d vec2(.0);\n#ifdef DEBUG_DRAW_BORDER\n    debugBorderCoords \x3d vec4(0.5, 0.5, 1.5 / combinedSize);\n#endif\n  }\n#endif\n  gl_Position \x3d posProj;\n#ifdef VV_COLOR\n  vcolor \x3d vvGetColor(auxpos2, vvColorValues, vvColorColors);\n#else\n  vcolor \x3d color / 255.0;\n#endif\n}",
"hudHeader.glsl":"#include \x3cutil/enableExtensions.glsl\x3e\n#include \x3cutil/fsPrecision.glsl\x3e\n#include \x3cutil/encoding.glsl\x3e\n#include \x3cutil/color.glsl\x3e\nuniform sampler2D tex;\nuniform vec4 overrideColor;\nuniform vec4 outlineColor;\nuniform float outlineSize;\nvarying vec4 vcolor;\nvarying vec2 vtc;\nvarying vec2 vsize;\n#ifdef BINARY_HIGHLIGHT_OCCLUSION\nvarying float voccluded;\n#endif\n#ifdef DEBUG_DRAW_BORDER\nvarying vec4 debugBorderCoords;\n#endif","hudMain.glsl":"#ifdef SIGNED_DISTANCE_FIELD\n  vec4 color \x3d vec4(0.0, 0.0, 0.0, 0.0);\n  vec4 fillPixelColor \x3d overrideColor * vcolor;\n  const float txSize \x3d 128.0;\n  const float texelSize \x3d 1.0 / txSize;\n  vec2 scaleFactor \x3d (vsize - txSize) * texelSize;\n  vec2 samplePos \x3d vtc + (vec2(1.0, -1.0) * texelSize) * scaleFactor;\n  float d \x3d rgba2float(texture2D(tex, samplePos)) - 0.5;\n  float dist \x3d d * vsize.x;\n  fillPixelColor.a *\x3d clamp(0.5 - dist, 0.0, 1.0);\n  if (outlineSize \x3e 0.25) {\n    vec4 outlinePixelColor \x3d outlineColor;\n    float clampedOutlineSize \x3d min(outlineSize, 0.5*vsize.x);\n    outlinePixelColor.a *\x3d clamp(0.5 - (abs(dist) - 0.5*clampedOutlineSize), 0.0, 1.0);\n    float compositeAlpha \x3d outlinePixelColor.a + fillPixelColor.a * (1.0 - outlinePixelColor.a);\n    vec3 compositeColor \x3d vec3(outlinePixelColor) * outlinePixelColor.a +\n      vec3(fillPixelColor) * fillPixelColor.a * (1.0 - outlinePixelColor.a);\n    gl_FragColor \x3d vec4(compositeColor, compositeAlpha);\n  }\n  else {\n    gl_FragColor \x3d premultiplyAlpha(fillPixelColor);\n  }\n#else\n  gl_FragColor \x3d texture2D(tex, vtc, -0.5) * premultiplyAlpha(overrideColor * vcolor);\n#endif\n#ifdef DEBUG_DRAW_BORDER\n   float isBorder \x3d float(any(lessThan(debugBorderCoords.xy, debugBorderCoords.zw)) || any(greaterThan(debugBorderCoords.xy, 1.0 - debugBorderCoords.zw)));\n   gl_FragColor \x3d mix(gl_FragColor, vec4(1.0, 0.0, 1.0, 1.0), isBorder);\n#endif\n  if (gl_FragColor.a \x3c 0.1) {\n    discard;\n  }",
"occlusionTest.frag":"#include \x3cutil/fsPrecision.glsl\x3e\nuniform vec4 color;\nvoid main() {\n  gl_FragColor \x3d color;\n}","occlusionTest.vert":"#include \x3cutil/vsPrecision.glsl\x3e\n#include \x3cutil/alignPixel.glsl\x3e\n#include \x3cutil/hud.glsl\x3e\n#include \x3cutil/slice.glsl\x3e\nvoid main(void) {\n  vec4 posProjCenter;\n  if (dot(position, position) \x3e 0.0) {\n    ProjectHUDAux projectAux;\n    vec4 posProj \x3d projectPositionHUD(projectAux);\n    posProjCenter \x3d alignToPixelCenter(posProj, viewport.zw);\n    vec3 vpos \x3d projectAux.posModel;\n    if (rejectBySlice(vpos)) {\n      posProjCenter \x3d vec4(1e038, 1e038, 1e038, 1.0);\n    }\n  }\n  else {\n    posProjCenter \x3d vec4(1e038, 1e038, 1e038, 1.0);\n  }\n  gl_Position \x3d posProjCenter;\n  gl_PointSize \x3d 1.0;\n}"},
lineCallout:{"lineCallout.frag":"#include \x3cutil/fsPrecision.glsl\x3e\nuniform vec4 color;\nuniform vec4 borderColor;\nvarying vec4 coverageSampling;\nvarying vec2 lineSizes;\nvoid main() {\n  vec2 coverage \x3d min(1.0 - clamp(abs(coverageSampling.xy) - coverageSampling.zw, 0.0, 1.0), lineSizes);\n  float borderAlpha \x3d color.a * borderColor.a * coverage.y;\n  float colorAlpha \x3d color.a * coverage.x;\n  float finalAlpha \x3d mix(borderAlpha, 1.0, colorAlpha);\n#ifdef DEPTH_HUD\n  if (finalAlpha \x3c 0.01) {\n    discard;\n  }\n#else\n  vec3 finalRgb \x3d mix(borderColor.rgb * borderAlpha, color.rgb, colorAlpha);\n  gl_FragColor \x3d vec4(finalRgb, finalAlpha);\n#endif\n}",
"lineCallout.vert":"#include \x3cutil/vsPrecision.glsl\x3e\n#include \x3cutil/alignPixel.glsl\x3e\n#include \x3cutil/hud.glsl\x3e\n#include \x3cutil/slice.glsl\x3e\nattribute vec2 uv0;\nuniform float lineSize;\nuniform vec2 pixelToNDC;\nuniform float borderSize;\nuniform vec2 screenOffset;\nvarying vec4 coverageSampling;\nvarying vec2 lineSizes;\nvoid main(void) {\n  ProjectHUDAux projectAux;\n  vec4 endPoint \x3d projectPositionHUD(projectAux);\n  vec3 vpos \x3d projectAux.posModel;\n  if (rejectBySlice(vpos)) {\n    gl_Position \x3d vec4(1e38, 1e38, 1e38, 1.0);\n    return;\n  }\n#ifdef OCCL_TEST\n  if (!testVisibilityHUD(endPoint)) {\n    gl_Position \x3d vec4(1e38, 1e38, 1e38, 1.0);\n    return;\n  }\n#endif\n#ifdef SCREEN_SIZE_PERSPECTIVE\n  vec4 perspectiveFactor \x3d screenSizePerspectiveScaleFactor(projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);\n  vec2 screenOffsetScaled \x3d applyScreenSizePerspectiveScaleFactorVec2(screenOffset, perspectiveFactor);\n#else\n  vec2 screenOffsetScaled \x3d screenOffset;\n#endif\n  vec3 posView \x3d (view * (model * vec4(position, 1.0))).xyz;\n  applyHUDViewDependentPolygonOffset(auxpos1.w, projectAux.absCosAngle, posView);\n  vec4 startPoint \x3d proj * vec4(posView, 1.0);\n  vec2 screenOffsetNorm \x3d screenOffsetScaled * 2.0 / viewport.zw;\n  startPoint.xy +\x3d screenOffsetNorm * startPoint.w;\n  endPoint.xy +\x3d screenOffsetNorm * endPoint.w;\n  vec4 startAligned \x3d alignToPixelOrigin(startPoint, viewport.zw);\n  vec4 endAligned \x3d alignToPixelOrigin(endPoint, viewport.zw);\n#ifdef DEPTH_HUD\n#ifdef DEPTH_HUD_ALIGN_START\n  endAligned \x3d vec4(endAligned.xy / endAligned.w * startAligned.w, startAligned.zw);\n#else\n  startAligned \x3d vec4(startAligned.xy / startAligned.w * endAligned.w, endAligned.zw);\n#endif\n#endif\n  vec4 projectedPosition \x3d mix(startAligned, endAligned, uv0.y);\n  vec2 screenSpaceDirection \x3d normalize(endAligned.xy / endAligned.w - startAligned.xy / startAligned.w);\n  vec2 perpendicularScreenSpaceDirection \x3d vec2(screenSpaceDirection.y, -screenSpaceDirection.x);\n#ifdef SCREEN_SIZE_PERSPECTIVE\n  float lineSizeScaled \x3d applyScreenSizePerspectiveScaleFactorFloat(lineSize, perspectiveFactor);\n  float borderSizeScaled \x3d applyScreenSizePerspectiveScaleFactorFloat(borderSize, perspectiveFactor);\n#else\n  float lineSizeScaled \x3d lineSize;\n  float borderSizeScaled \x3d borderSize;\n#endif\n  float halfPixelSize \x3d lineSizeScaled * 0.5;\n  float halfWholePixelSize \x3d floor(lineSizeScaled) * 0.5;\n  float halfPixelSizeInt \x3d floor(halfWholePixelSize);\n  float subpixelOffset \x3d -fract(lineSizeScaled) * float(halfWholePixelSize \x3e 0.0);\n  float pixelOffset \x3d -halfPixelSizeInt + subpixelOffset;\n  float padding \x3d 1.0 + borderSizeScaled;\n  vec2 ndcOffset \x3d (pixelOffset - padding + uv0.x * (lineSizeScaled + padding + padding)) * pixelToNDC;\n  projectedPosition.xy +\x3d perpendicularScreenSpaceDirection * ndcOffset * projectedPosition.w;\n  float edgeDirection \x3d (uv0.x * 2.0 - 1.0);\n  float halfBorderSize \x3d 0.5 * borderSizeScaled;\n  float halfPixelSizeAndBorder \x3d halfPixelSize + halfBorderSize;\n  float outerEdgeCoverageSampler \x3d edgeDirection * (halfPixelSizeAndBorder + halfBorderSize + 1.0);\n  float isOneSided \x3d float(lineSizeScaled \x3c 2.0 \x26\x26 borderSize \x3c 2.0);\n  coverageSampling \x3d vec4(\n    outerEdgeCoverageSampler,\n    outerEdgeCoverageSampler - halfPixelSizeAndBorder * isOneSided,\n    halfPixelSize - 0.5,\n    halfBorderSize - 0.5 + halfPixelSizeAndBorder * (1.0 - isOneSided)\n  );\n  lineSizes \x3d vec2(lineSizeScaled, borderSizeScaled);\n  gl_Position \x3d projectedPosition;\n}"},
measurementArrow:{"measurementArrow.frag":"#include \x3cutil/fsPrecision.glsl\x3e\nuniform float outlineSize;\nuniform vec4 outlineColor;\nuniform float stripeLength;\nuniform vec4 stripeEvenColor;\nuniform vec4 stripeOddColor;\nvarying vec2 vtc;\nvarying float vlength;\nvarying float vradius;\n#define INV_SQRT2 (1.0 / sqrt(2.0))\nvec4 arrowColor(vec2 tc, float len) {\n  float d \x3d INV_SQRT2 * (tc.x - abs(tc.y));\n  d \x3d min(d, INV_SQRT2 * (len - tc.x - abs(tc.y)));\n  d \x3d min(d, 1.0 - abs(tc.y));\n  if (d \x3c 0.0) {\n    return vec4(0.0);\n  } else if (d \x3c outlineSize) {\n    return outlineColor;\n  } else {\n    return fract(0.5 / stripeLength * tc.x * vradius) \x3e\x3d 0.5 ? stripeOddColor : stripeEvenColor;\n  }\n}\nvoid main(void) {\n  vec2 ntc \x3d vec2(vtc.x / vradius, vtc.y);\n  vec4 color \x3d arrowColor(ntc, vlength / vradius);\n  if (color.a \x3d\x3d 0.0) {\n    discard;\n  }\n  gl_FragColor \x3d color;\n}",
"measurementArrow.vert":"#include \x3cutil/vsPrecision.glsl\x3e\nuniform mat4 proj;\nuniform mat4 view;\nuniform mat4 model;\nuniform float width;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv0;\nattribute float auxpos1;\nvarying vec2 vtc;\nvarying float vlength;\nvarying float vradius;\nvoid main(void) {\n  vec3 bitangent \x3d normal;\n  vtc \x3d uv0;\n  vlength \x3d auxpos1;\n  vradius \x3d 0.5 * width;\n  vec4 pos \x3d view * vec4((model * vec4(position + vradius * bitangent * uv0.y, 1.0)).xyz, 1.0);\n  gl_Position \x3d proj * pos;\n}"},
slicePlane:{"slicePlane.frag":"#include \x3cutil/enableExtensions.glsl\x3e\n#include \x3cutil/fsPrecision.glsl\x3e\nuniform vec4 backgroundColor;\nuniform vec4 gridColor;\nuniform float ratio;\nuniform float gridWidth;\nvarying vec2 vUV;\nvoid main() {\n  const float LINE_WIDTH \x3d 1.0;\n  vec2 uvScaled \x3d vUV * gridWidth;\n  vec2 gridUV \x3d (fract(uvScaled + 0.5) - 0.5) / (LINE_WIDTH * fwidth(uvScaled));\n  vec2 grid \x3d (1.0 - step(0.5, gridUV)) * step(-0.5, gridUV);\n  grid.x *\x3d step(0.5, uvScaled.x) * step(uvScaled.x, gridWidth - 0.5);\n  grid.y *\x3d step(0.5, uvScaled.y) * step(uvScaled.y, gridWidth - 0.5);\n  float gridFade \x3d max(grid.x, grid.y);\n  float gridAlpha \x3d gridColor.a * gridFade;\n  gl_FragColor \x3d\n    vec4(backgroundColor.rgb * backgroundColor.a, backgroundColor.a) * (1.0 - gridAlpha) +\n    vec4(gridColor.rgb, 1.0) * gridAlpha;\n}",
"slicePlane.vert":"#include \x3cutil/vsPrecision.glsl\x3e\nuniform mat4 proj;\nuniform mat4 view;\nuniform mat4 model;\nattribute vec3 position;\nattribute vec2 uv0;\nvarying vec2 vUV;\nvoid main(void) {\n  vUV \x3d uv0;\n  gl_Position \x3d proj * view * vec4((model * vec4(position, 1.0)).xyz, 1.0);\n}"}},pointRenderer:{"pointRenderer.frag":"#include \x3cutil/fsPrecision.glsl\x3e\n#include \x3cutil/encoding.glsl\x3e\n#ifdef HIGHLIGHT_PASS\n#include \x3cutil/highlight.glsl\x3e\nuniform sampler2D depthTex;\nuniform vec4 highlightViewportPixelSz;\n#endif\n#ifdef DEPTH_PASS\nvarying float depth;\n#elif defined(HIGHLIGHT_PASS)\n#else\nvarying vec3 vColor;\n#endif\nvoid main(void) {\n  vec2 vOffset \x3d gl_PointCoord - vec2(0.5, 0.5);\n  float r2 \x3d dot(vOffset, vOffset);\n  if (r2 \x3e 0.25) {\n    discard;\n  }\n#ifdef DEPTH_PASS\n  gl_FragColor \x3d float2rgba(depth);\n#elif defined(HIGHLIGHT_PASS)\n  gl_FragColor \x3d highlightData(gl_FragCoord, depthTex, highlightViewportPixelSz);\n#else\n  gl_FragColor \x3d vec4(vColor, 1.0);\n#endif\n}",
"pointRenderer.vert":"#include \x3cutil/slice.glsl\x3e\n#include \x3cutil/vsPrecision.glsl\x3e\nattribute vec3 aPosition;\nattribute vec3 aColor;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform vec2 uScreenMinMaxSize;\nuniform vec2 uPointScale;\nuniform vec3 uClipMin;\nuniform vec3 uClipMax;\n#ifdef DEPTH_PASS\nuniform vec2 nearFar;\nvarying float depth;\n#else\nvarying vec3 vColor;\n#endif\nvoid main(void) {\n  if (aPosition.x \x3c uClipMin.x || aPosition.y \x3c uClipMin.y || aPosition.z \x3c uClipMin.z ||\n      aPosition.x \x3e uClipMax.x || aPosition.y \x3e uClipMax.y || aPosition.z \x3e uClipMax.z) {\n    gl_Position \x3d vec4(0.0,0.0,0.0,2.0);\n    gl_PointSize \x3d 0.0;\n    return;\n  }\n  if (rejectBySlice(aPosition)) {\n    gl_Position \x3d vec4(0.0,0.0,0.0,2.0);\n    gl_PointSize \x3d 0.0;\n    return;\n  }\n  vec4 camera \x3d uModelViewMatrix * vec4(aPosition, 1.0);\n  float pointSize \x3d uPointScale.x;\n  vec4 position \x3d uProjectionMatrix * camera;\n#ifdef DRAW_SCREEN_SIZE\n    float clampedScreenSize \x3d pointSize;\n#else\n    float pointRadius \x3d 0.5 * pointSize;\n    vec4 cameraOffset \x3d camera + vec4(0.0, pointRadius, 0.0, 0.0);\n    vec4 positionOffset \x3d uProjectionMatrix * cameraOffset;\n    float radius \x3d abs(positionOffset.y - position.y);\n    float viewHeight \x3d uPointScale.y;\n    float screenPointSize \x3d (radius / position.w) * viewHeight;\n    float clampedScreenSize \x3d clamp(screenPointSize, uScreenMinMaxSize.x, uScreenMinMaxSize.y);\n    camera.xyz -\x3d normalize(camera.xyz) * pointRadius * clampedScreenSize / screenPointSize;\n    position \x3d uProjectionMatrix * camera;\n#endif\n  gl_PointSize \x3d clampedScreenSize;\n  gl_Position \x3d position;\n#ifdef DEPTH_PASS\n  depth \x3d (-camera.z - nearFar[0]) / (nearFar[1] - nearFar[0]);\n#else\n  vColor \x3d aColor;\n#endif\n}"},
renderer:{highlight:{"apply.frag":"#include \x3cutil/fsPrecision.glsl\x3e\nuniform sampler2D tex;\nuniform sampler2D origin;\nuniform vec4 color;\nuniform vec4 haloColor;\nuniform float outlineSize;\nuniform float blurSize;\nuniform vec4 opacities;\nvarying vec2 uv;\nvoid main() {\n  #if defined(GRID_OPTIMIZATION) \x26\x26 defined(GRID_DEBUG)\n    gl_FragColor \x3d vec4(uv, 0.0, 1.0);\n  #else\n    vec4 blurredHighlightValue \x3d texture2D(tex, uv);\n    float highlightIntensity \x3d blurredHighlightValue.a;\n    if (highlightIntensity \x3d\x3d 0.0) {\n      discard;\n    }\n    vec4 origin_color \x3d texture2D(origin, uv);\n    float outlineIntensity;\n    float fillIntensity;\n    if (blurredHighlightValue.g \x3e blurredHighlightValue.b) {\n      outlineIntensity \x3d haloColor.w * opacities[1];\n      fillIntensity \x3d color.w * opacities[3];\n    }\n    else {\n      outlineIntensity \x3d haloColor.w * opacities[0];\n      fillIntensity \x3d color.w * opacities[2];\n    }\n    float inner \x3d 1.0 - outlineSize / 9.0;\n    float outer \x3d 1.0 - (outlineSize + blurSize) / 9.0;\n    float outlineFactor \x3d smoothstep(outer, inner, highlightIntensity);\n    float fillFactor \x3d any(notEqual(origin_color, vec4(0.0, 0.0, 0.0, 0.0))) ? 1.0 : 0.0;\n    float intensity \x3d outlineIntensity * outlineFactor * (1.0 - fillFactor) + fillIntensity * fillFactor;\n    gl_FragColor \x3d vec4(mix(haloColor.rgb, color.rgb, fillFactor), intensity);\n  #endif\n}",
"apply.vert":"#include \x3cutil/vsPrecision.glsl\x3e\nattribute vec2 position;\nvarying vec2 uv;\n#ifdef GRID_OPTIMIZATION\n  attribute vec2 uv0;\n  uniform sampler2D coverageTex;\n#endif\nvoid main() {\n  #ifdef GRID_OPTIMIZATION\n    #ifdef GRID_DEBUG\n      vec4 cov \x3d texture2D(coverageTex, uv0);\n      if (cov.r \x3d\x3d 0.0 || cov.g \x3d\x3d 1.0 || cov.b \x3d\x3d 1.0) {\n        gl_Position \x3d vec4(0.0);\n        return;\n      }\n      gl_Position \x3d vec4(position, .0, 1.0);\n      uv \x3d uv0;\n      return;\n    #else\n      vec4 cov \x3d texture2D(coverageTex, uv0);\n      if (cov.r \x3d\x3d 0.0) {\n        gl_Position \x3d vec4(0.0);\n        return;\n      }\n    #endif\n  #endif\n  gl_Position \x3d vec4(position, .0, 1.0);\n  uv \x3d position.xy * .5 + vec2(.5);\n}",
"blur.frag":"#include \x3cutil/fsPrecision.glsl\x3e\nuniform sampler2D tex;\n#ifdef GRID_OPTIMIZATION\n  uniform vec2 blurSize;\n  varying vec3 blurCoordinate;\n#else\n  varying vec2 blurCoordinates[GAUSSIAN_SAMPLES];\n#endif\nvoid main() {\n  #ifdef GRID_OPTIMIZATION\n    vec2 uv \x3d blurCoordinate.xy;\n    vec4 center \x3d texture2D(tex, uv);\n    if (blurCoordinate.z \x3d\x3d 1.0) {\n      gl_FragColor \x3d center;\n    }\n    else {\n      vec4 sum \x3d vec4(0.0);\n      #if GAUSSIAN_SAMPLES \x3d\x3d 3\n        sum +\x3d center * 0.204164;\n        sum +\x3d texture2D(tex, uv + blurSize * 1.407333) * 0.304005;\n        sum +\x3d texture2D(tex, uv - blurSize * 1.407333) * 0.304005;\n      #elif GAUSSIAN_SAMPLES \x3d\x3d 5\n        sum +\x3d center * 0.204164;\n        sum +\x3d texture2D(tex, uv + blurSize * 1.407333) * 0.304005;\n        sum +\x3d texture2D(tex, uv - blurSize * 1.407333) * 0.304005;\n        sum +\x3d texture2D(tex, uv + blurSize * 3.294215) * 0.093913;\n        sum +\x3d texture2D(tex, uv - blurSize * 3.294215) * 0.093913;\n      #elif GAUSSIAN_SAMPLES \x3d\x3d 7\n        sum +\x3d center * 0.204164;\n        sum +\x3d texture2D(tex, uv + blurSize * 1.407333) * 0.304005;\n        sum +\x3d texture2D(tex, uv - blurSize * 1.407333) * 0.304005;\n        sum +\x3d texture2D(tex, uv + blurSize * 3.294215) * 0.093913;\n        sum +\x3d texture2D(tex, uv - blurSize * 3.294215) * 0.093913;\n        sum +\x3d texture2D(tex, uv + blurSize * 5.1) * 0.03;\n        sum +\x3d texture2D(tex, uv - blurSize * 5.1) * 0.03;\n      #elif GAUSSIAN_SAMPLES \x3d\x3d 9\n        sum +\x3d center * 0.154164;\n        sum +\x3d texture2D(tex, uv + blurSize * 1.5) * 0.204005;\n        sum +\x3d texture2D(tex, uv - blurSize * 1.5) * 0.204005;\n        sum +\x3d texture2D(tex, uv + blurSize * 3.5) * 0.123913;\n        sum +\x3d texture2D(tex, uv - blurSize * 3.5) * 0.123913;\n        sum +\x3d texture2D(tex, uv + blurSize * 5.5) * 0.123913;\n        sum +\x3d texture2D(tex, uv - blurSize * 5.5) * 0.123913;\n        sum +\x3d texture2D(tex, uv + blurSize * 7.5) * 0.05;\n        sum +\x3d texture2D(tex, uv - blurSize * 7.5) * 0.05;\n      #endif\n      gl_FragColor \x3d sum;\n    }\n  #else\n    vec4 sum \x3d vec4(0.0);\n    #if GAUSSIAN_SAMPLES \x3d\x3d 3\n      sum +\x3d texture2D(tex, blurCoordinates[0]) * 0.204164;\n      sum +\x3d texture2D(tex, blurCoordinates[1]) * 0.304005;\n      sum +\x3d texture2D(tex, blurCoordinates[2]) * 0.304005;\n    #elif GAUSSIAN_SAMPLES \x3d\x3d 5\n      sum +\x3d texture2D(tex, blurCoordinates[0]) * 0.204164;\n      sum +\x3d texture2D(tex, blurCoordinates[1]) * 0.304005;\n      sum +\x3d texture2D(tex, blurCoordinates[2]) * 0.304005;\n      sum +\x3d texture2D(tex, blurCoordinates[3]) * 0.093913;\n      sum +\x3d texture2D(tex, blurCoordinates[4]) * 0.093913;\n    #elif GAUSSIAN_SAMPLES \x3d\x3d 7\n      sum +\x3d texture2D(tex, blurCoordinates[0]) * 0.204164;\n      sum +\x3d texture2D(tex, blurCoordinates[1]) * 0.304005;\n      sum +\x3d texture2D(tex, blurCoordinates[2]) * 0.304005;\n      sum +\x3d texture2D(tex, blurCoordinates[3]) * 0.093913;\n      sum +\x3d texture2D(tex, blurCoordinates[4]) * 0.093913;\n      sum +\x3d texture2D(tex, blurCoordinates[5]) * 0.03;\n      sum +\x3d texture2D(tex, blurCoordinates[6]) * 0.03;\n    #elif GAUSSIAN_SAMPLES \x3d\x3d 9\n      sum +\x3d texture2D(tex, blurCoordinates[0]) * 0.154164;\n      sum +\x3d texture2D(tex, blurCoordinates[1]) * 0.204005;\n      sum +\x3d texture2D(tex, blurCoordinates[2]) * 0.204005;\n      sum +\x3d texture2D(tex, blurCoordinates[3]) * 0.123913;\n      sum +\x3d texture2D(tex, blurCoordinates[4]) * 0.123913;\n      sum +\x3d texture2D(tex, blurCoordinates[5]) * 0.09;\n      sum +\x3d texture2D(tex, blurCoordinates[6]) * 0.09;\n      sum +\x3d texture2D(tex, blurCoordinates[7]) * 0.05;\n      sum +\x3d texture2D(tex, blurCoordinates[8]) * 0.05;\n    #endif\n    gl_FragColor \x3d sum;\n  #endif\n}",
"blur.vert":"#include \x3cutil/vsPrecision.glsl\x3e\nattribute vec2 position;\nattribute vec2 uv0;\n#ifdef GRID_OPTIMIZATION\n  uniform sampler2D coverageTex;\n  varying vec3 blurCoordinate;\n#else\n  uniform vec2 blurSize;\n  varying vec2 blurCoordinates[GAUSSIAN_SAMPLES];\n#endif\nvoid main() {\n  gl_Position \x3d vec4(position, 0.0, 1.0);\n  #ifdef GRID_OPTIMIZATION\n    vec4 cov \x3d texture2D(coverageTex, uv0);\n    if (cov.r \x3d\x3d 0.0) {\n      gl_Position \x3d vec4(0.0);\n    }\n    blurCoordinate \x3d vec3(gl_Position.xy * .5 + vec2(.5), max(cov.g, cov.b));\n  #else\n    vec2 uv \x3d position.xy * .5 + vec2(.5);\n    #if GAUSSIAN_SAMPLES \x3d\x3d 3\n      blurCoordinates[0] \x3d uv;\n      blurCoordinates[1] \x3d uv + blurSize * 1.407333;\n      blurCoordinates[2] \x3d uv - blurSize * 1.407333;\n    #elif GAUSSIAN_SAMPLES \x3d\x3d 5\n      blurCoordinates[0] \x3d uv;\n      blurCoordinates[1] \x3d uv + blurSize * 1.407333;\n      blurCoordinates[2] \x3d uv - blurSize * 1.407333;\n      blurCoordinates[3] \x3d uv + blurSize * 3.294215;\n      blurCoordinates[4] \x3d uv - blurSize * 3.294215;\n    #elif GAUSSIAN_SAMPLES \x3d\x3d 7\n      blurCoordinates[0] \x3d uv;\n      blurCoordinates[1] \x3d uv + blurSize * 1.407333;\n      blurCoordinates[2] \x3d uv - blurSize * 1.407333;\n      blurCoordinates[3] \x3d uv + blurSize * 3.294215;\n      blurCoordinates[4] \x3d uv - blurSize * 3.294215;\n      blurCoordinates[5] \x3d uv + blurSize * 5.1;\n      blurCoordinates[6] \x3d uv - blurSize * 5.1;\n    #elif GAUSSIAN_SAMPLES \x3d\x3d 9\n      blurCoordinates[0] \x3d uv;\n      blurCoordinates[1] \x3d uv + blurSize * 1.407333;\n      blurCoordinates[2] \x3d uv - blurSize * 1.407333;\n      blurCoordinates[3] \x3d uv + blurSize * 3.294215;\n      blurCoordinates[4] \x3d uv - blurSize * 3.294215;\n      blurCoordinates[5] \x3d uv + blurSize * 5.1;\n      blurCoordinates[6] \x3d uv - blurSize * 5.1;\n      blurCoordinates[7] \x3d uv + blurSize * 7.1;\n      blurCoordinates[8] \x3d uv - blurSize * 7.1;\n    #endif\n  #endif\n}",
"downsample.frag":"#include \x3cutil/fsPrecision.glsl\x3e\nuniform sampler2D tex;\nuniform vec2 invFramebufferDim;\nvoid main() {\n  vec2 coord \x3d gl_FragCoord.xy * invFramebufferDim;\n  vec4 value \x3d texture2D(tex, coord);\n  float mx \x3d floor(max(value.g, value.b));\n  gl_FragColor \x3d vec4(ceil(value.r), mx, mx, 1.0);\n}","downsample.vert":"#include \x3cutil/vsPrecision.glsl\x3e\nattribute vec2 position;\nvoid main() {\n  gl_Position \x3d vec4(vec2(1.0) - position * 2.0, .0, 1.0);\n}"},
laserLine:{"laserLine.frag":"#include \x3cutil/enableExtensions.glsl\x3e\n#include \x3cutil/fsPrecision.glsl\x3e\n#include \x3cutil/depth.glsl\x3e\nuniform sampler2D depthMap;\nuniform vec2 nearFar;\nuniform vec4 projInfo;\nuniform vec2 zScale;\nuniform float maxPixelDistance;\nuniform vec4 focusPlane;\nuniform vec4 focusSphere;\nuniform vec4 segmentPlane;\nuniform vec3 segmentStart;\nuniform vec3 segmentEnd;\nuniform vec3 glowColor;\nuniform float glowWidth;\nuniform vec3 innerColor;\nuniform float innerWidth;\nuniform float globalAlpha;\nvarying vec2 uv;\n#define INFINITY 100000.0\nvec3 reconstructPosition(vec2 fragCoord, float depth) {\n  return vec3((fragCoord * projInfo.xy + projInfo.zw) * (zScale.x * depth + zScale.y), depth);\n}\nfloat planeDistancePixels(vec4 plane, vec3 pos) {\n  float dist \x3d dot(plane.xyz, pos) + plane.w;\n  float width \x3d fwidth(dist);\n  dist /\x3d min(width, maxPixelDistance);\n  return abs(dist);\n}\nfloat sphereDistancePixels(vec4 sphere, vec3 pos) {\n  float dist \x3d distance(sphere.xyz, pos) - sphere.w;\n  float width \x3d fwidth(dist);\n  dist /\x3d min(width, maxPixelDistance);\n  return abs(dist);\n}\nvec4 blendPremultiplied(vec4 source, vec4 dest) {\n  float oneMinusSourceAlpha \x3d 1.0 - source.a;\n  return vec4(\n    source.rgb + dest.rgb * oneMinusSourceAlpha,\n    source.a + dest.a * oneMinusSourceAlpha\n  );\n}\nvec4 premultipliedColor(vec3 rgb, float alpha) {\n  return vec4(rgb * alpha, alpha);\n}\nvec4 laserLineProfile(float dist) {\n  if (dist \x3e glowWidth) {\n    return vec4(0.0);\n  }\n  float innerAlpha \x3d (1.0 - smoothstep(0.0, innerWidth, dist));\n  float glowAlpha \x3d pow(max(0.0, 1.0 - dist / glowWidth), 8.0);\n  return blendPremultiplied(\n    premultipliedColor(innerColor, innerAlpha),\n    premultipliedColor(glowColor, glowAlpha)\n  );\n}\nvoid main() {\n  float depth \x3d linearDepth(depthMap, uv, nearFar);\n  if (-depth \x3d\x3d nearFar[0]) {\n    discard;\n  }\n  vec3 pos \x3d reconstructPosition(gl_FragCoord.xy, depth);\n  float ddepth \x3d fwidth(depth);\n  float depthDiscontinuityAlpha \x3d 1.0 - smoothstep(0.0, 0.01, -ddepth / depth);\n  vec3 normal \x3d normalize(cross(dFdx(pos), dFdy(pos)));\n  float focusPlaneDistance \x3d planeDistancePixels(focusPlane, pos);\n  float focusSphereDistance \x3d sphereDistancePixels(focusSphere, pos);\n  float segmentDistance \x3d INFINITY;\n  float segmentLength \x3d length(segmentEnd - segmentStart);\n  vec3 segmentDir \x3d (segmentEnd - segmentStart) / segmentLength;\n  float t \x3d dot(segmentDir, pos - segmentStart);\n  if (segmentLength \x3e 0.0 \x26\x26 t \x3e\x3d 0.0 \x26\x26 t \x3c\x3d segmentLength) {\n    segmentDistance \x3d planeDistancePixels(segmentPlane, pos);\n  }\n  vec4 focusPlaneColor \x3d laserLineProfile(focusPlaneDistance);\n  vec4 focusSphereColor \x3d laserLineProfile(focusSphereDistance);\n  vec4 segmentColor \x3d laserLineProfile(segmentDistance);\n  float focusPlaneAlpha \x3d 1.0 - smoothstep(0.995, 0.999, abs(dot(normal, focusPlane.xyz)));\n  float focusSphereAlpha \x3d 1.0 - smoothstep(0.995, 0.999, abs(dot(normal, normalize(pos - focusSphere.xyz))));\n  float segmentAlpha \x3d 1.0 - smoothstep(0.995, 0.999, abs(dot(normal, segmentPlane.xyz)));\n  vec4 color \x3d max(\n    focusPlaneColor * focusPlaneAlpha,\n    max(\n      focusSphereColor * focusSphereAlpha,\n      segmentColor * segmentAlpha\n    )\n  );\n  gl_FragColor \x3d color * globalAlpha * depthDiscontinuityAlpha;\n}"},
offscreen:{"composite.frag":"#include \x3cutil/fsPrecision.glsl\x3e\nuniform sampler2D tex;\nvarying vec2 vtc;\nvoid main() {\n  gl_FragColor \x3d texture2D(tex, vtc);\n}","compositeOccluded.frag":"#include \x3cutil/fsPrecision.glsl\x3e\nuniform sampler2D occludedColorMap;\nuniform float opacity;\nvarying vec2 vtc;\nvoid main() {\n  vec4 occludedColor \x3d texture2D(occludedColorMap, vtc);\n  gl_FragColor \x3d occludedColor * opacity;\n}","compositeTransparentToHUDVisibility.frag":"#include \x3cutil/fsPrecision.glsl\x3e\nuniform sampler2D tex;\nvarying vec2 vtc;\nvoid main() {\n  gl_FragColor \x3d vec4(1.0 - texture2D(tex, vtc).a);\n}",
"offscreen.vert":"#include \x3cutil/vsPrecision.glsl\x3e\nattribute vec2 position;\nvarying vec2 vtc;\nvoid main(void) {\n  gl_Position \x3d vec4(position.xy, 0.0, 1.0);\n  vtc \x3d position.xy * 0.5 + 0.5;\n}"}},util:{"alignPixel.glsl":"vec4 alignToPixelCenter(vec4 clipCoord, vec2 widthHeight) {\n  vec2 xy \x3d vec2(.500123) + .5 * clipCoord.xy / clipCoord.w;\n  vec2 pixelSz \x3d vec2(1.0) / widthHeight;\n  vec2 ij \x3d (floor(xy * widthHeight) + vec2(0.5)) * pixelSz;\n  vec2 result \x3d (ij * 2.0 - vec2(1.0)) * clipCoord.w;\n  return vec4(result, clipCoord.zw);\n}\nvec4 alignToPixelOrigin(vec4 clipCoord, vec2 widthHeight) {\n  vec2 xy \x3d vec2(.5) + .5 * clipCoord.xy / clipCoord.w;\n  vec2 pixelSz \x3d vec2(1.0) / widthHeight;\n  vec2 ij \x3d floor((xy + .5 * pixelSz) * widthHeight) * pixelSz;\n  vec2 result \x3d (ij * 2.0 - vec2(1.0)) * clipCoord.w;\n  return vec4(result, clipCoord.zw);\n}",
"color.glsl":"vec4 premultiplyAlpha(vec4 v) {\n  return vec4(v.rgb * v.a, v.a);\n}\nvec3 rgb2hsv(vec3 c) {\n  vec4 K \x3d vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p \x3d c.g \x3c c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n  vec4 q \x3d c.r \x3c p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n  float d \x3d q.x - min(q.w, q.y);\n  float e \x3d 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\n  vec4 K \x3d vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p \x3d abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nfloat rgb2v(vec3 c) {\n  return max(c.x, max(c.y, c.z));\n}",
"depth.glsl":"#include \x3cutil/encoding.glsl\x3e\nfloat linearDepth(sampler2D depthTex, vec2 uv, vec2 nearFar) {\n  return -(rgba2float(texture2D(depthTex, uv)) * (nearFar[1] - nearFar[0]) + nearFar[0]);\n}\nfloat calcFragDepth(const in float depth) {\n  const float SLOPE_SCALE \x3d 2.0;\n  const float BIAS \x3d 2.0 * .000015259;\n  float m \x3d max(abs(dFdx(depth)), abs(dFdy(depth)));\n  float result \x3d depth + SLOPE_SCALE * m + BIAS;\n  return clamp(result, .0, .999999);\n}","doublePrecision.glsl":"#ifdef DOUBLE_PRECISION_REQUIRES_OBFUSCATION\nvec3 dpPlusFrc(vec3 a, vec3 b) {\n  return mix(a, a + b, vec3(notEqual(b, vec3(0))));\n}\nvec3 dpMinusFrc(vec3 a, vec3 b) {\n  return mix(vec3(0), a - b, vec3(notEqual(a, b)));\n}\nvec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\n  vec3 t1 \x3d dpPlusFrc(hiA, hiB);\n  vec3 e \x3d dpMinusFrc(t1, hiA);\n  vec3 t2 \x3d dpMinusFrc(hiB, e) + dpMinusFrc(hiA, dpMinusFrc(t1, e)) + loA + loB;\n  return t1 + t2;\n}\n#else\nvec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\n  vec3 t1 \x3d hiA + hiB;\n  vec3 e \x3d t1 - hiA;\n  vec3 t2 \x3d ((hiB - e) + (hiA - (t1 - e))) + loA + loB;\n  return t1 + t2;\n}\n#endif",
"enableExtensions.glsl":"#define EXTENSIONS_ENABLED\n#extension GL_OES_standard_derivatives : enable\n#extension GL_EXT_shader_texture_lod : enable","encoding.glsl":"const float MAX_RGBA_FLOAT \x3d\n  255.0 / 256.0 +\n  255.0 / 256.0 / 256.0 +\n  255.0 / 256.0 / 256.0 / 256.0 +\n  255.0 / 256.0 / 256.0 / 256.0 / 256.0;\nconst vec4 fixedPointFactors \x3d vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\nvec4 float2rgba(const float value) {\n  float valueInValidDomain \x3d clamp(value, 0.0, MAX_RGBA_FLOAT);\n  vec4 fixedPointU8 \x3d floor(fract(valueInValidDomain * fixedPointFactors) * 256.0);\n  const float toU8AsFloat \x3d 1.0 / 255.0;\n  return fixedPointU8 * toU8AsFloat;\n}\nconst vec4 rgba2float_factors \x3d vec4(\n  255.0 / (256.0),\n  255.0 / (256.0 * 256.0),\n  255.0 / (256.0 * 256.0 * 256.0),\n  255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\n  return dot(rgba, rgba2float_factors);\n}",
"fsPrecision.glsl":"#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\nprecision highp sampler2D;\n#else\nprecision mediump float;\nprecision mediump sampler2D;\n#endif","highlight.glsl":"vec4 highlightData(vec4 fragCoord, sampler2D depthTex, vec4 viewportPixelSize) {\n  float sceneDepth \x3d texture2D(depthTex, (fragCoord.xy - viewportPixelSize.xy) * viewportPixelSize.zw).r;\n  if (fragCoord.z \x3e sceneDepth + 5e-7) {\n    return vec4(1.0, 1.0, 0.0, 1.0);\n  }\n  else {\n    return vec4(1.0, 0.0, 1.0, 1.0);\n  }\n}",
"hud.glsl":"#include \x3cutil/screenSizePerspective.glsl\x3e\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec4 auxpos1;\nuniform mat4 proj;\nuniform mat4 view;\nuniform mat4 viewNormal;\nuniform mat4 model;\nuniform mat4 modelNormal;\nuniform vec4 viewport;\nuniform vec3 camPos;\nuniform float polygonOffset;\nuniform float cameraGroundRelative;\nuniform float pixelRatio;\nuniform float perDistancePixelRatio;\n#ifdef VERTICAL_OFFSET\nuniform vec4 verticalOffset;\n#endif\n#ifdef SCREEN_SIZE_PERSPECTIVE\nuniform vec4 screenSizePerspectiveAlignment;\n#endif\nuniform sampler2D hudVisibilityTexture;\nconst float SMALL_OFFSET_ANGLE \x3d 0.984807753012208;\nstruct ProjectHUDAux {\n  vec3 posModel;\n  vec3 posView;\n  vec3 vnormal;\n  float distanceToCamera;\n  float absCosAngle;\n};\nfloat applyHUDViewDependentPolygonOffset(float pointGroundDistance, float absCosAngle, inout vec3 posView) {\n  float pointGroundSign \x3d sign(pointGroundDistance);\n  if (pointGroundSign \x3d\x3d 0.0) {\n    pointGroundSign \x3d cameraGroundRelative;\n  }\n  float groundRelative \x3d cameraGroundRelative * pointGroundSign;\n  if (polygonOffset \x3e .0) {\n    float cosAlpha \x3d clamp(absCosAngle, 0.01, 1.0);\n    float tanAlpha \x3d sqrt(1.0 - cosAlpha * cosAlpha) / cosAlpha;\n    float factor \x3d (1.0 - tanAlpha / viewport[2]);\n    if (groundRelative \x3e 0.0) {\n      posView *\x3d factor;\n    }\n    else {\n      posView /\x3d factor;\n    }\n  }\n  return groundRelative;\n}\nvoid applyHUDVerticalGroundOffset(vec3 normalModel, inout vec3 posModel, inout vec3 posView) {\n  float distanceToCamera \x3d length(posView);\n  float pixelOffset \x3d distanceToCamera * perDistancePixelRatio * 0.5;\n  vec3 modelOffset \x3d normalModel * cameraGroundRelative * pixelOffset;\n  vec3 viewOffset \x3d (viewNormal * vec4(modelOffset, 1.0)).xyz;\n  posModel +\x3d modelOffset;\n  posView +\x3d viewOffset;\n}\nvec4 projectPositionHUD(out ProjectHUDAux aux) {\n  vec3 centerOffset \x3d auxpos1.xyz;\n  float pointGroundDistance \x3d auxpos1.w;\n  aux.posModel \x3d (model * vec4(position, 1.0)).xyz;\n  aux.posView \x3d (view * vec4(aux.posModel, 1.0)).xyz;\n  aux.vnormal \x3d (modelNormal * vec4(normal, 1.0)).xyz;\n  applyHUDVerticalGroundOffset(aux.vnormal, aux.posModel, aux.posView);\n  aux.distanceToCamera \x3d length(aux.posView);\n  vec3 viewDirObjSpace \x3d normalize(camPos - aux.posModel);\n  float cosAngle \x3d dot(aux.vnormal, viewDirObjSpace);\n  aux.absCosAngle \x3d abs(cosAngle);\n#ifdef SCREEN_SIZE_PERSPECTIVE\n#if defined(VERTICAL_OFFSET) || defined(CENTER_OFFSET_UNITS_SCREEN)\n  vec4 perspectiveFactor \x3d screenSizePerspectiveScaleFactor(aux.absCosAngle, aux.distanceToCamera, screenSizePerspectiveAlignment);\n#endif\n#endif\n#ifdef VERTICAL_OFFSET\n#ifdef SCREEN_SIZE_PERSPECTIVE\n  float verticalOffsetScreenHeight \x3d applyScreenSizePerspectiveScaleFactorFloat(verticalOffset.x, perspectiveFactor);\n#else\n  float verticalOffsetScreenHeight \x3d verticalOffset.x;\n#endif\n  float worldOffset \x3d clamp(verticalOffsetScreenHeight * verticalOffset.y * aux.distanceToCamera, verticalOffset.z, verticalOffset.w);\n  vec3 modelOffset \x3d aux.vnormal * worldOffset;\n  aux.posModel +\x3d modelOffset;\n  vec3 viewOffset \x3d (viewNormal * vec4(modelOffset, 1.0)).xyz;\n  aux.posView +\x3d viewOffset;\n  pointGroundDistance +\x3d worldOffset;\n#endif\n  float groundRelative \x3d applyHUDViewDependentPolygonOffset(pointGroundDistance, aux.absCosAngle, aux.posView);\n#ifndef CENTER_OFFSET_UNITS_SCREEN\n  aux.posView +\x3d vec3(centerOffset.x, centerOffset.y, 0.0);\n  if (centerOffset.z !\x3d 0.0) {\n    aux.posView -\x3d normalize(aux.posView) * centerOffset.z;\n  }\n#endif\n  vec4 posProj \x3d proj * vec4(aux.posView, 1.0);\n#ifdef CENTER_OFFSET_UNITS_SCREEN\n#ifdef SCREEN_SIZE_PERSPECTIVE\n  float centerOffsetY \x3d applyScreenSizePerspectiveScaleFactorFloat(centerOffset.y, perspectiveFactor);\n#else\n  float centerOffsetY \x3d centerOffset.y;\n#endif\n  posProj.xy +\x3d vec2(centerOffset.x, centerOffsetY) * pixelRatio * 2.0 / viewport.zw * posProj.w;\n#endif\n  posProj.z -\x3d groundRelative * polygonOffset * posProj.w;\n  return posProj;\n}\nuniform float uRenderTransparentlyOccludedHUD;\nbool testVisibilityHUD(vec4 posProj) {\n  vec4 posProjCenter \x3d alignToPixelCenter(posProj, viewport.zw);\n  vec4 occlusionPixel \x3d texture2D(hudVisibilityTexture, .5 + .5 * posProjCenter.xy / posProjCenter.w);\n  if (uRenderTransparentlyOccludedHUD \x3e 0.5) {\n    return occlusionPixel.r * occlusionPixel.g \x3e 0.0 \x26\x26 occlusionPixel.g * uRenderTransparentlyOccludedHUD \x3c 1.0;\n  }\n  return occlusionPixel.r * occlusionPixel.g \x3e 0.0 \x26\x26 occlusionPixel.g \x3d\x3d 1.0;\n}",
"quad.vert":"#include \x3cutil/vsPrecision.glsl\x3e\nattribute vec2 position;\nvarying vec2 uv;\nvoid main(void) {\n  gl_Position \x3d vec4(position.x, position.y, .0, 1.0);\n  uv \x3d position * .5 + vec2(.5);\n}","screenSizePerspective.glsl":"float screenSizePerspectiveMinSize(float size, vec4 factor) {\n  float nonZeroSize \x3d 1.0 - step(size, 0.0);\n  return (\n    factor.z * (\n      1.0 +\n      nonZeroSize *\n      2.0 * factor.w / (\n        size + (1.0 - nonZeroSize)\n      )\n    )\n  );\n}\nfloat screenSizePerspectiveViewAngleDependentFactor(float absCosAngle) {\n  return absCosAngle * absCosAngle * absCosAngle;\n}\nvec4 screenSizePerspectiveScaleFactor(float absCosAngle, float distanceToCamera, vec4 params) {\n  return vec4(min(params.x / (distanceToCamera - params.y), 1.0), screenSizePerspectiveViewAngleDependentFactor(absCosAngle), params.z, params.w);\n}\nfloat applyScreenSizePerspectiveScaleFactorFloat(float size, vec4 factor) {\n  return max(mix(size * factor.x, size, factor.y), screenSizePerspectiveMinSize(size, factor));\n}\nfloat screenSizePerspectiveScaleFloat(float size, float absCosAngle, float distanceToCamera, vec4 params) {\n  return applyScreenSizePerspectiveScaleFactorFloat(size, screenSizePerspectiveScaleFactor(absCosAngle, distanceToCamera, params));\n}\nvec2 applyScreenSizePerspectiveScaleFactorVec2(vec2 size, vec4 factor) {\n  return mix(size * clamp(factor.x, screenSizePerspectiveMinSize(size.y, factor) / size.y, 1.0), size, factor.y);\n}\nvec2 screenSizePerspectiveScaleVec2(vec2 size, float absCosAngle, float distanceToCamera, vec4 params) {\n  return applyScreenSizePerspectiveScaleFactorVec2(size, screenSizePerspectiveScaleFactor(absCosAngle, distanceToCamera, params));\n}",
"slice.glsl":"#ifdef SLICE\nuniform vec3 slicePlaneOrigin;\nuniform vec3 slicePlaneBasis1;\nuniform vec3 slicePlaneBasis2;\nstruct SliceFactors {\n  float front;\n  float side0;\n  float side1;\n  float side2;\n  float side3;\n};\nSliceFactors calculateSliceFactors(vec3 pos) {\n  vec3 rel \x3d pos - slicePlaneOrigin;\n  vec3 slicePlaneNormal \x3d -cross(slicePlaneBasis1, slicePlaneBasis2);\n  float slicePlaneW \x3d -dot(slicePlaneNormal, slicePlaneOrigin);\n  float basis1Len2 \x3d dot(slicePlaneBasis1, slicePlaneBasis1);\n  float basis2Len2 \x3d dot(slicePlaneBasis2, slicePlaneBasis2);\n  float basis1Dot \x3d dot(slicePlaneBasis1, rel);\n  float basis2Dot \x3d dot(slicePlaneBasis2, rel);\n  return SliceFactors(\n    dot(slicePlaneNormal, pos) + slicePlaneW,\n    -basis1Dot - basis1Len2,\n    basis1Dot - basis1Len2,\n    -basis2Dot - basis2Len2,\n    basis2Dot - basis2Len2\n  );\n}\nbool sliceByFactors(SliceFactors factors) {\n  return factors.front \x3c 0.0\n    \x26\x26 factors.side0 \x3c 0.0\n    \x26\x26 factors.side1 \x3c 0.0\n    \x26\x26 factors.side2 \x3c 0.0\n    \x26\x26 factors.side3 \x3c 0.0;\n}\nbool sliceByPlane(vec3 pos) {\n  return sliceByFactors(calculateSliceFactors(pos));\n}\n#ifdef EXTENSIONS_ENABLED\nvec4 applySliceHighlight(vec4 color, vec3 pos) {\n  SliceFactors factors \x3d calculateSliceFactors(pos);\n  if (sliceByFactors(factors)) {\n    return color;\n  }\n  const float HIGHLIGHT_WIDTH \x3d 1.0;\n  const vec4 HIGHLIGHT_COLOR \x3d vec4(0.0, 0.0, 0.0, 0.3);\n  factors.front /\x3d (2.0 * HIGHLIGHT_WIDTH) * fwidth(factors.front);\n  factors.side0 /\x3d (2.0 * HIGHLIGHT_WIDTH) * fwidth(factors.side0);\n  factors.side1 /\x3d (2.0 * HIGHLIGHT_WIDTH) * fwidth(factors.side1);\n  factors.side2 /\x3d (2.0 * HIGHLIGHT_WIDTH) * fwidth(factors.side2);\n  factors.side3 /\x3d (2.0 * HIGHLIGHT_WIDTH) * fwidth(factors.side3);\n  float highlightFactor \x3d (1.0 - step(0.5, factors.front))\n    * (1.0 - step(0.5, factors.side0))\n    * (1.0 - step(0.5, factors.side1))\n    * (1.0 - step(0.5, factors.side2))\n    * (1.0 - step(0.5, factors.side3));\n  return mix(color, vec4(HIGHLIGHT_COLOR.rgb, color.a), highlightFactor * HIGHLIGHT_COLOR.a);\n}\n#else\n#endif\n#define rejectBySlice(_pos_) sliceByPlane(_pos_)\n#define discardBySlice(_pos_) { if (sliceByPlane(_pos_)) discard; }\n#ifdef SLICE_HIGHLIGHT_DISABLED\n#define highlightSlice(_color_, _pos_) (_color_)\n#else\n#define highlightSlice(_color_, _pos_) applySliceHighlight(_color_, _pos_)\n#endif\n#else\n#define rejectBySlice(_pos_) false\n#define discardBySlice(_pos_) {}\n#define highlightSlice(_color_, _pos_) (_color_)\n#endif",
"transform.glsl":"vec4 transformPosition(mat4 proj, mat4 view, vec3 pos) {\n  return proj * (view * vec4(pos, 1.0));\n}\nvec4 transformPositionWithDepth(mat4 proj, mat4 view, vec3 pos, vec2 nearFar, out float depth) {\n  vec4 eye \x3d view * vec4(pos, 1.0);\n  depth \x3d (-eye.z - nearFar[0]) / (nearFar[1] - nearFar[0]) ;\n  return proj * eye;\n}","visualVariables.glsl":"#ifdef VV_COLOR\n  #define VV_COLOR_N 8\n  uniform float vvColorValues[VV_COLOR_N];\n  uniform vec4 vvColorColors[VV_COLOR_N];\n#endif\n#ifdef VV_SIZE\n  uniform vec3 vvSizeMinSize;\n  uniform vec3 vvSizeMaxSize;\n  uniform vec3 vvSizeOffset;\n  uniform vec3 vvSizeFactor;\n  uniform mat3 vvSymbolRotationMatrix;\n  uniform vec3 vvSymbolAnchor;\n  vec3 vvGetScale(vec4 featureAttribute) {\n    return clamp(vvSizeOffset + featureAttribute.x * vvSizeFactor, vvSizeMinSize, vvSizeMaxSize);\n  }\n  vec4 vvTransformPosition(vec3 position, vec4 featureAttribute) {\n    return vec4(vvSymbolRotationMatrix * (vvGetScale(featureAttribute) * (position + vvSymbolAnchor)), 1.0);\n  }\n  vec4 vvTransformNormal(vec3 normal, vec4 featureAttribute) {\n    return vec4(vvSymbolRotationMatrix * normal / vvGetScale(featureAttribute), 1.0);\n  }\n#endif\n#ifdef VV_COLOR\n  vec4 vvGetColor(vec4 featureAttribute, float values[VV_COLOR_N], vec4 colors[VV_COLOR_N]) {\n    float value \x3d featureAttribute.y;\n    if (value \x3c\x3d values[0]) {\n      return colors[0];\n    }\n    for (int i \x3d 1; i \x3c VV_COLOR_N; ++i) {\n      if (values[i] \x3e\x3d value) {\n        float f \x3d (value - values[i-1]) / (values[i] - values[i-1]);\n        return mix(colors[i-1], colors[i], f);\n      }\n    }\n    return colors[VV_COLOR_N - 1];\n  }\n#endif",
"vsPrecision.glsl":"precision highp float;\nprecision highp sampler2D;"}}});