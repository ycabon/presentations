import { L, f6 as I, p as s, fC as i, fD as U, ck as N, bj as d, bP as K, cd as Q, E as f, aD as d$2, ca as D$1, cc as J, fE as B } from './_virtual:index-98fd932b.js';
import { g, f as f$1 } from './quantizationUtils-fab7ade3.js';
import { h, w, b as b$1 } from './geojson-d59c7538.js';
import { i as i$1, u, s as s$1 } from './clientSideDefaults-859aaa1f.js';
import { h as h$1 } from './FeatureStore-00b02c15.js';
import { b } from './QueryEngine-f25d510e.js';
import { y, d as d$1, c, u as u$1, h as h$2 } from './sourceUtils-d875c0bf.js';
import './json-dc26b8a4.js';
import './quickselect-5613a511.js';
import './aaBoundingBox-52683a99.js';
import './centroid-6105d00e.js';
import './QueryEngineCapabilities-18b4173a.js';
import './WhereClause-a8ff8460.js';
import './timeSupport-043d1cca.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
const D={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class GeoJSONSourceWorker{constructor(){this._queryEngine=null;}destroy(){this._queryEngine&&this._queryEngine&&this._queryEngine.destroy(),this._queryEngine=this._requiredFields=this._fieldsIndex=this._createDefaultAttributes=null;}async load(t){const r=[];await this._checkProjection(t.spatialReference);let u$1=null;if(t.url){u$1=(await L(t.url,{responseType:"json"})).data,await h(u$1);}const p=w(u$1,{geometryType:t.geometryType}),y=t.fields||p.fields||[],c=null!=t.hasZ?t.hasZ:p.hasZ,T=p.geometryType,q=t.objectIdField||("number"===p.objectIdFieldType?p.objectIdFieldName:"OBJECTID")||"OBJECTID",x=t.spatialReference||I;let w$1=t.timeInfo;if(!T)throw new s("geojson-layer:missing-property","geometryType not set and couldn't be inferred from the provided features");if("string"===p.objectIdFieldType&&r.push({name:"geojson-layer:unsupported-id-type",message:"Feature ids are of type string and can't be honored."}),y===p.fields&&p.unknownFields.length>0&&r.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:p.unknownFields}}),q){let e=null;y.some((t=>t.name===q&&(e=t,!0)))?(e.type="esriFieldTypeOID",e.editable=!1,e.nullable=!1):y.unshift({alias:q,name:q,type:"esriFieldTypeOID",editable:!1,nullable:!1});}for(const t of y){if(null==t.name&&(t.name=t.alias),null==t.alias&&(t.alias=t.name),!t.name)throw new s("geojson-layer:invalid-field-name","field name is missing",{field:t});if(t.name===q&&(t.type="esriFieldTypeOID"),-1===i.jsonValues.indexOf(t.type))throw new s("geojson-layer:invalid-field-type",`invalid type for field "${t.name}"`,{field:t})}const R={};this._requiredFields=[];for(const e of y)if("esriFieldTypeOID"!==e.type&&"esriFieldTypeGlobalID"!==e.type){e.editable=null==e.editable||!!e.editable,e.nullable=null==e.nullable||!!e.nullable;const t=U(e);e.nullable||void 0!==t?R[e.name]=t:this._requiredFields.push(e);}if(this._fieldsIndex=new N(y),w$1){if(w$1.startTimeField){const e=this._fieldsIndex.get(w$1.startTimeField);e?(w$1.startTimeField=e.name,e.type="esriFieldTypeDate"):w$1.startTimeField=null;}if(w$1.endTimeField){const e=this._fieldsIndex.get(w$1.endTimeField);e?(w$1.endTimeField=e.name,e.type="esriFieldTypeDate"):w$1.endTimeField=null;}if(w$1.trackIdField){const e=this._fieldsIndex.get(w$1.trackIdField);e?w$1.trackIdField=e.name:(w$1.trackIdField=null,r.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:w$1}}));}w$1.startTimeField||w$1.endTimeField||(r.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:w$1}}),w$1=null);}const O={warnings:r,featureErrors:[],layerDefinition:{...D,drawingInfo:i$1(T),templates:u(R),extent:null,geometryType:T,objectIdField:q,fields:y,hasZ:!!c,timeInfo:w$1}};this._queryEngine=new b({fields:y,geometryType:T,hasM:!1,hasZ:c,objectIdField:q,spatialReference:x,timeInfo:w$1,featureStore:new h$1({geometryType:T,hasM:!1,hasZ:c})}),this._createDefaultAttributes=s$1(R,q),this._nextObjectId=p.maxObjectId+1;const S=b$1(u$1,{geometryType:T,hasZ:c,objectIdFieldName:"number"===p.objectIdFieldType?q:null});if(!d(x,I))for(const e of S)e.geometry&&(e.geometry=K(g(Q(e.geometry,T,c,!1),I,x)));return this._loadInitialFeatures(O,S),O}async applyEdits(e){const{spatialReference:i,geometryType:s}=this._queryEngine;return await f([y(i,s),f$1(e.adds,i),f$1(e.updates,i)]),this._applyEdits(e)}async queryFeatures(e={},t={}){return this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return this._queryEngine.executeQueryForExtent(e,t.signal)}_loadInitialFeatures(e,t){const{featureStore:i,objectIdField:s}=this._queryEngine,r=[];for(const i of t){const t=this._createDefaultAttributes(),n=d$1(this._fieldsIndex,this._requiredFields,t,i.attributes,!0,e.warnings);n?e.featureErrors.push(n):(this._assignObjectId(t,i.attributes,!0),i.attributes=t,i.objectId=t[s],r.push(i));}if(i.addMany(r),e.layerDefinition.extent=this._queryEngine.fullExtent,e.layerDefinition.timeInfo){const{start:t,end:i}=this._queryEngine.timeExtent;e.layerDefinition.timeInfo.timeExtent=[t,i];}return e}_applyEdits(e){const{adds:t,updates:i,deletes:s}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(r,t),i&&i.length&&this._applyUpdateEdits(r,i),s&&s.length){for(const e of s)r.deleteResults.push(c(e));this._queryEngine.featureStore.removeManyById(s);}return {fullExtent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:i}=e,{geometryType:s,hasM:n,hasZ:o,objectIdField:a,spatialReference:l,featureStore:d}=this._queryEngine,p=[];for(const n of t){if(n.geometry&&s!==d$2(n.geometry)){i.push(u$1("Incorrect geometry type."));continue}const t=this._createDefaultAttributes(),o=d$1(this._fieldsIndex,this._requiredFields,t,n.attributes);if(o)i.push(o);else {if(this._assignObjectId(t,n.attributes),n.attributes=t,null!=n.uid){const t=n.attributes[a];e.uidToObjectId[n.uid]=t;}n.geometry&&(n.geometry=g(h$2(n.geometry,l),n.geometry.spatialReference,l)),p.push(n),i.push(c(n.attributes[a]));}}d.addMany(D$1([],p,s,o,n,a));}_applyUpdateEdits({updateResults:e},t){const{geometryType:i,hasM:s,hasZ:n,objectIdField:o,spatialReference:a,featureStore:l}=this._queryEngine;for(const d of t){const{attributes:t,geometry:u}=d,f=t&&t[o];if(null==f){e.push(u$1(`Identifier field ${o} missing`));continue}if(!l.has(f)){e.push(u$1(`Feature with object id ${f} missing`));continue}const c$1=J(l.getFeature(f),i,n,s);if(u){if(i!==d$2(u)){e.push(u$1("Incorrect geometry type."));continue}c$1.geometry=g(h$2(u,a),u.spatialReference,a);}if(t){const i=d$1(this._fieldsIndex,this._requiredFields,c$1.attributes,t);if(i){e.push(i);continue}}l.add(B(c$1,i,n,s,o)),e.push(c(f));}}_assignObjectId(e,t,i=!1){const s=this._queryEngine.objectIdField;i&&isFinite(t[s])?e[s]=t[s]:e[s]=this._nextObjectId++;}async _checkProjection(t){try{await f$1(I,t);}catch{throw new s("geojson-layer","Projection not supported")}}}

export default GeoJSONSourceWorker;
