import { i, d5 as w, ar as p, bK as O, w as f, U, e_ as a, ei as p$1, ej as l, ek as d, el as l$1, a as u, h as s$1, aX as a$1, L, e1 as C, q as e, y, eG as f$1, eQ as p$2, e5 as e$1, r as i$1, eS as b } from './index.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
const o=i.getLogger("esri.views.3d.support.WorkerHandle");class h{constructor(t,r,e,s={}){this._methodName=r,this._promise=w(t,{...s,scheduler:e}).then((t=>{void 0===this._thread?(this._thread=t,this._promise=null,s.hasInitialize&&this.broadcast({},"initialize")):t.close();})),this._promise.catch((r=>o.error(`Failed to initialize ${t} worker: ${r}`)));}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null;}invoke(t,s){if(this._thread){const r=this.getTransferList(t);return this._thread.invoke(this._methodName,t,{transferList:r,signal:s})}return this._promise?this._promise.then((()=>(p(s),this.invoke(t,s)))):O(null)}broadcast(t,r){return this._thread?f(this._thread.broadcast(r,t)).then((()=>{})):this._promise?this._promise.then((()=>this.broadcast(t,r))):O()}get promise(){return this._promise}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
class t extends h{constructor(e){super("LercWorker","_decode",e,{strategy:"dedicated"}),this.scheduler=e;}decode(r,t,n){return r&&0!==r.byteLength?this.invoke({buffer:r,options:t},n):U(null)}getTransferList(e){return [e.buffer]}}const n=new Map;function s(e){let r=n.get(e);return r||(r={instance:new t(e),ref:0},n.set(e,r)),++r.ref,r.instance}function o$1(e){if(null==e)return;const r=e.scheduler,t=n.get(r);t&&--t.ref<=0&&(t.instance.destroy(),n.delete(r));}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
const x=i.getLogger("esri.layers.ElevationLayer");let T=class extends(a(p$1(l(d(l$1(b)))))){constructor(...e){super(...e),this.copyright=null,this.heightModelInfo=null,this.path=null,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=s();}normalizeCtorArgs(e,r){return "string"==typeof e?{url:e,...r}:e}destroy(){o$1(this._lercDecoder),this._lercDecoder=null;}set minScale(e){this.constructed&&x.warn(`${this.declaredClass}.minScale support has been removed (since 4.5)`);}get minScale(){}set maxScale(e){this.constructed&&x.warn(`${this.declaredClass}.maxScale support has been removed (since 4.5)`);}get maxScale(){}readVersion(e,r){let t=r.currentVersion;return t||(t=9.3),t}load(e){const t=u(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{for(let r=0;r<e.typeKeywords.length;r++)if("elevation 3d layer"===e.typeKeywords[r].toLowerCase())return !0;throw new s$1("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).then((()=>this._fetchImageService(t)),(()=>this._fetchImageService(t)))),U(this)}fetchTile(e,t,o,i){const s=u((i=i||{signal:null}).signal)?i.signal:i.signal=a$1().signal,a={responseType:"array-buffer",signal:s},l={noDataValue:i.noDataValue,returnFileInfo:!0};return this.load().then((()=>this._fetchTileAvailability(e,t,o,i))).then((()=>L(this.getTileUrl(e,t,o),a))).then((e=>this._lercDecoder.decode(e.data,l,s))).then((e=>({values:e.pixelData,width:e.width,height:e.height,maxZError:e.fileInfo.maxZError,noDataValue:e.noDataValue,minValue:e.minValue,maxValue:e.maxValue})))}getTileUrl(e,r,t){const o=!this.tilemapCache&&this.supportsBlankTile,i=C({...this.parsedUrl.query,blankTile:!o&&null});return `${this.parsedUrl.path}/tile/${e}/${r}/${t}${i?"?"+i:""}`}async queryElevation(e,r){const{ElevationQuery:t}=await import('./ElevationQuery-665ce97d.js');p(r);return (new t).query(this,e,r)}async createElevationSampler(e,r){const{ElevationQuery:t}=await import('./ElevationQuery-665ce97d.js');p(r);return (new t).createSampler(this,e,r)}_fetchTileAvailability(e,r,t,o){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,r,t,o):U("unknown")}async _fetchImageService(e){if(this.sourceJSON)return this.sourceJSON;const r={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},t=await L(this.parsedUrl.path,r);t.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl});}};e([y({json:{read:{source:"copyrightText"}}})],T.prototype,"copyright",void 0),e([y({readOnly:!0,type:f$1})],T.prototype,"heightModelInfo",void 0),e([y({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],T.prototype,"path",void 0),e([y({type:["show","hide"]})],T.prototype,"listMode",void 0),e([y({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],T.prototype,"minScale",null),e([y({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],T.prototype,"maxScale",null),e([y({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],T.prototype,"opacity",void 0),e([y({type:["ArcGISTiledElevationServiceLayer"]})],T.prototype,"operationalLayerType",void 0),e([y()],T.prototype,"sourceJSON",void 0),e([y({json:{read:!1},value:"elevation",readOnly:!0})],T.prototype,"type",void 0),e([y(p$2)],T.prototype,"url",void 0),e([y()],T.prototype,"version",void 0),e([e$1("version",["currentVersion"])],T.prototype,"readVersion",null),T=e([i$1("esri.layers.ElevationLayer")],T);var I=T;

export default I;
