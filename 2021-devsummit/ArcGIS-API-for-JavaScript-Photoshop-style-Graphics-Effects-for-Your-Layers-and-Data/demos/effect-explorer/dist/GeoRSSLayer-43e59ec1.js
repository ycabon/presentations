import { ef as t, eh as o, ej as l, ek as d, eg as s, el as l$1, eS as b, fb as st, a as u, U, L as L$1, G as s$1, q as e, y, e5 as e$1, eK as c, eQ as p, r as i, gV as n, gW as d$1, gX as n$1, gY as y$1, gZ as u$1 } from './index.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
const R=["atom","xml"],C={base:n,key:"type",typeMap:{"simple-line":d$1},errorContext:"symbol"},L={base:n,key:"type",typeMap:{"picture-marker":n$1,"simple-marker":y$1},errorContext:"symbol"},k={base:n,key:"type",typeMap:{"simple-fill":u$1},errorContext:"symbol"};let O=class extends(t(o(l(d(s(l$1(b))))))){constructor(...e){super(...e),this.description=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.outSpatialReference=null,this.url=null,this.type="geo-rss";}normalizeCtorArgs(e,o){return "string"==typeof e?{url:e,...o}:e}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?st(this.url,R)||"GeoRSS":e||""}set title(e){this._set("title",e);}readFeatureCollections(e,o){return o.featureCollection.layers.forEach((e=>{const o=e.layerDefinition.drawingInfo.renderer.symbol;o&&"esriSFS"===o.type&&o.outline&&-1!==o.outline.style.indexOf("esriSFS")&&(o.outline.style="esriSLSSolid");})),o.featureCollection.layers}load(e){const o=u(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).then((()=>this._fetchService(o)),(()=>this._fetchService(o)))),U(this)}async _fetchService(e){const{data:r}=await L$1(s$1.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:this.outSpatialReference?JSON.stringify(this.outSpatialReference.toJSON()):void 0},signal:e});this.read(r,{origin:"service"});}};e([y()],O.prototype,"description",void 0),e([y({dependsOn:["url"],json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],O.prototype,"title",null),e([y()],O.prototype,"featureCollections",void 0),e([e$1("service","featureCollections",["featureCollection.layers"])],O.prototype,"readFeatureCollections",null),e([y(c)],O.prototype,"legendEnabled",void 0),e([y({types:C,json:{write:!0}})],O.prototype,"lineSymbol",void 0),e([y({type:["show","hide"]})],O.prototype,"listMode",void 0),e([y({types:L,json:{write:!0}})],O.prototype,"pointSymbol",void 0),e([y({types:k,json:{write:!0}})],O.prototype,"polygonSymbol",void 0),e([y({type:["GeoRSS"]})],O.prototype,"operationalLayerType",void 0),e([y()],O.prototype,"outSpatialReference",void 0),e([y(p)],O.prototype,"url",void 0),e([y({readOnly:!0,json:{read:!1},value:"geo-rss"})],O.prototype,"type",void 0),O=e([i("esri.layers.GeoRSSLayer")],O);var F=O;

export default F;
