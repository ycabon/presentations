import { B as h$1, bK as O, h as s, cv as E, cw as P, b7 as s$1, a as u$1, cx as V, cy as n } from './index.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
function o(e){var t,a;return !0===(null==e||null==(t=e.capabilities)||null==(a=t.operations)?void 0:a.supportsEditing)&&e&&(!("editingEnabled"in e)||e.editingEnabled)}async function u(t,r,l,o){let u,m;const y={edits:l,result:h$1(((e,t)=>{u=e,m=t;}))};t.emit("apply-edits",y);try{const{results:s$2,edits:m}=await async function(e,t,r,s$1){if(await e.load(),!function(e){return e&&null!=e.applyEdits}(t))return O(new s(`${e.type}-layer:no-editing-support`,"Layer source does not support applyEdits capability",{layer:e}));if(!e.editingEnabled)throw new s(`${e.type}-layer:editing-disabled`,"Editing is disabled for layer",{layer:e});const l=await function(e,t,r){const s$1=t&&(t.addFeatures||t.updateFeatures||t.deleteFeatures),d=t&&(t.addAttachments||t.updateAttachments||t.deleteAttachments);if(!t||!s$1&&!d)throw new s(`${e.type}-layer:missing-parameters`,"'addFeatures', 'updateFeatures', 'deleteFeatures', 'addAttachments', 'updateAttachments' or 'deleteAttachments' parameter is required");if(!e.capabilities.data.isVersioned&&r&&r.gdbVersion)throw new s(`${e.type}-layer:invalid-parameter`,"'gdbVersion' is applicable only if the layer supports versioned data. See: 'capabilities.data.isVersioned'");if(!e.capabilities.editing.supportsRollbackOnFailure&&r&&r.rollbackOnFailureEnabled)throw new s(`${e.type}-layer:invalid-parameter`,"This layer does not support 'rollbackOnFailureEnabled' parameter. See: 'capabilities.editing.supportsRollbackOnFailure'");if(!e.capabilities.editing.supportsGlobalId&&r&&r.globalIdUsed)throw new s(`${e.type}-layer:invalid-parameter`,"This layer does not support 'globalIdUsed' parameter. See: 'capabilities.editing.supportsGlobalId'");if(!e.capabilities.editing.supportsGlobalId&&d)throw new s(`${e.type}-layer:invalid-parameter`,"'addAttachments', 'updateAttachments' and 'deleteAttachments' are applicable only if the layer supports global ids. See: 'capabilities.editing.supportsGlobalId'");if((!r||!r.globalIdUsed)&&d)throw new s(`${e.type}-layer:invalid-parameter`,"When 'addAttachments', 'updateAttachments' or 'deleteAttachments' is specified, globalIdUsed should be set to true");const l={...t};if(l.addFeatures=t&&E.isCollection(t.addFeatures)?t.addFeatures.toArray():l.addFeatures||[],l.updateFeatures=t&&E.isCollection(t.updateFeatures)?t.updateFeatures.toArray():l.updateFeatures||[],l.deleteFeatures=t&&E.isCollection(t.deleteFeatures)?t.deleteFeatures.toArray():l.deleteFeatures||[],l.addFeatures.length&&!e.capabilities.operations.supportsAdd)throw new s(`${e.type}-layer:unsupported-operation`,"Layer does not support adding features.");if(l.updateFeatures.length&&!e.capabilities.operations.supportsUpdate)throw new s(`${e.type}-layer:unsupported-operation`,"Layer does not support updating features.");if(l.deleteFeatures.length&&!e.capabilities.operations.supportsDelete)throw new s(`${e.type}-layer:unsupported-operation`,"Layer does not support deleting features.");l.addAttachments=l.addAttachments||[],l.updateAttachments=l.updateAttachments||[],l.deleteAttachments=l.deleteAttachments||[],l.addFeatures=l.addFeatures.map(c),l.updateFeatures=l.updateFeatures.map(c);const o=r&&r.globalIdUsed;return l.addFeatures.forEach((t=>p(t,e,o))),l.updateFeatures.forEach((t=>p(t,e,o))),l.deleteFeatures.forEach((t=>p(t,e,o))),l.addAttachments.forEach((t=>h(t,e))),l.updateAttachments.forEach((t=>h(t,e))),async function(e){const t=e.addFeatures,a=e.updateFeatures,r=t.concat(a).map((e=>e.geometry)),s=await P(r),d=t.length,i=a.length;return s.slice(0,d).forEach(((t,a)=>{e.addFeatures[a].geometry=t;})),s.slice(d,d+i).forEach(((t,a)=>{e.updateFeatures[a].geometry=t;})),e}(l)}(e,r,s$1);if(!(l.addFeatures.length||l.updateFeatures.length||l.deleteFeatures.length||l.addAttachments.length||l.updateAttachments.length||l.deleteAttachments.length))return {edits:l,results:{addFeatureResults:[],updateFeatureResults:[],deleteFeatureResults:[],addAttachmentResults:[],updateAttachmentResults:[],deleteAttachmentResults:[]}};return {edits:l,results:await t.applyEdits(l,s$1)}}(t,r,l,o),y=t=>t.filter((e=>!e.error)).map(s$1),f={edits:m,addedFeatures:y(s$2.addFeatureResults),updatedFeatures:y(s$2.updateFeatureResults),deletedFeatures:y(s$2.deleteFeatureResults),addedAttachments:y(s$2.addAttachmentResults),updatedAttachments:y(s$2.updateAttachmentResults),deletedAttachments:y(s$2.deleteAttachmentResults)};return (f.addedFeatures.length||f.updatedFeatures.length||f.deletedFeatures.length||f.addedAttachments.length||f.updatedAttachments.length||f.deletedAttachments.length)&&t.emit("edits",f),u(f),s$2}catch(e){throw m(e),e}}function p(e,r,s$1){if(s$1){if("attributes"in e&&!e.attributes[r.globalIdField])throw new s(`${r.type}-layer:invalid-parameter`,"Feature should have 'globalId' when 'globalIdUsed' is true");if(!("attributes"in e)&&!e.globalId)throw new s(`${r.type}-layer:invalid-parameter`,"'globalId' of the feature should be passed when 'globalIdUsed' is true")}if("geometry"in e&&u$1(e.geometry)){if(e.geometry.hasZ&&!1===r.capabilities.data.supportsZ)throw new s(`${r.type}-layer:z-unsupported`,"Layer does not support z values while feature has z values.");if(e.geometry.hasM&&!1===r.capabilities.data.supportsM)throw new s(`${r.type}-layer:m-unsupported`,"Layer does not support m values while feature has m values.")}}function h(e,t){const{feature:s$1,attachment:d}=e;if(!s$1||"attributes"in s$1&&!s$1.attributes[t.globalIdField])throw new s(`${t.type}-layer:invalid-parameter`,"Attachment should have reference to a feature with 'globalId'");if(!("attributes"in s$1)&&!s$1.globalId)throw new s(`${t.type}-layer:invalid-parameter`,"Attachment should have reference to 'globalId' of the parent feature");if(!d.globalId)throw new s(`${t.type}-layer:invalid-parameter`,"Attachment should have 'globalId'");if(!d.data&&!d.uploadId)throw new s(`${t.type}-layer:invalid-parameter`,"Attachment should have 'data' or 'uploadId'");if(!(d.data instanceof File&&!!d.data.name)&&!d.name)throw new s(`${t.type}-layer:invalid-parameter`,"'name' is required when attachment is specified as Base64 encoded string using 'data'");if(!t.capabilities.editing.supportsUploadWithItemId&&d.uploadId)throw new s(`${t.type}-layer:invalid-parameter`,"This layer does not support 'uploadId' parameter. See: 'capabilities.editing.supportsUploadWithItemId'");if("string"==typeof d.data){const e=V(d.data);if(e&&!e.isBase64)throw new s(`${t.type}-layer:invalid-parameter`,"Attachment 'data' should be a Blob, File or Base64 encoded string")}}function c(e){const t=new n;return e.attributes||(e.attributes={}),t.geometry=e.geometry,t.attributes=e.attributes,t}

export { u as applyEdits, o as isEditableLayer };
