import { fK as t, go as f, fL as s, fM as o, ci as p, cj as l, ck as u, cl as l$1, gU as e, d as a, cp as b, r, gG as t$1, s as s$1, U, w as g, bz as M, dc as d, f_ as n$1, j as e$2, y as y$1, c6 as e$3, bi as o$1, fn as N, co as f$1, k as i } from './_virtual_index-2683c931.js';
import { r as r$1 } from './scaleUtils-aaa8015d.js';
import { h, y, G } from './SublayersOwner-fae79457.js';
import { e as e$1 } from './sublayerUtils-a5b6b99d.js';
import { n } from './ExportImageParameters-796a1826.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
let R=class extends(t(f(s(o(h(y(p(l(u(l$1(e(a(b))))))))))))){constructor(...e){super(...e),this.alwaysRefetch=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null;}normalizeCtorArgs(e,r){return "string"==typeof e?{url:e,...r}:e}load(e){const t=r(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).then((()=>this._fetchService(t)),(()=>this._fetchService(t)))),Promise.resolve(this)}readImageFormat(e,r){const t=r.supportedImageFormatTypes;return t&&t.indexOf("PNG32")>-1?"png32":"png24"}writeSublayers(e,r,t,s){if(!this.loaded||!e)return;const o=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray();let i=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const e=t$1(s.origin);if(3===e){const e=this.createSublayersForOrigin("service").sublayers;i=e$1(o,e,2);}else if(e>3){const e=this.createSublayersForOrigin("portal-item");i=e$1(o,e.sublayers,t$1(e.origin));}}const a=[],p={writeSublayerStructure:i,...s};let n=i;o.forEach((e=>{const r=e.write({},p);a.push(r),n=n||"user"===e.originOf("visible");}));a.some((e=>Object.keys(e).length>1))&&(r.layers=a),n&&(r.visibleLayers=o.filter((e=>e.visible)).map((e=>e.id)));}createExportImageParameters(e,r,t,s){const o=s&&s.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const i=new n({layer:this,scale:r$1({extent:e,width:r})*o}),a=i.toJSON();i.destroy();const p=!s||!s.rotation||this.version<10.3?{}:{rotation:-s.rotation},m=e&&e.spatialReference,n$1=m.wkid||JSON.stringify(m.toJSON());a.dpi*=o;const l={};if(null!=s&&s.timeExtent){const{start:e,end:r}=s.timeExtent.toJSON();l.time=e&&r&&e===r?""+e:`${null==e?"null":e},${null==r?"null":r}`;}else this.timeInfo&&!this.timeInfo.hasLiveData&&(l.time="null,null");return {bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:n$1,imageSR:n$1,size:r+","+t,...a,...p,...l}}async fetchImage(e,r,t,s){const o={responseType:"image"};s&&s.timestamp&&(o.query={...o.query,_ts:s.timestamp}),s&&s.signal&&(o.signal=s.signal),this.customParameters&&Object.keys(this.customParameters).length&&(o.query={...this.customParameters,...o.query});const i=this.parsedUrl.path+"/export",a={...this.parsedUrl.query,...this.createExportImageParameters(e,r,t,s),f:"image",_ts:this.alwaysRefetch?Date.now():null};if(null!=a.dynamicLayers&&!this.capabilities.exportMap.supportsDynamicLayers)return Promise.reject(new s$1("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a}));o.query?o.query={...a,...o.query}:o.query=a;return U(i,o).then((e=>e.data)).catch((e=>{if(g(e))throw e;throw new s$1("mapimagelayer:image-fetch-error",`Unable to load image: ${i}`,{error:e})}))}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json"}},{data:t}=await U(this.url,r),{extent:s,fullExtent:o,timeExtent:i}=t,a=s||o;return {fullExtent:a&&M.fromJSON(a),timeExtent:i&&d.fromJSON({start:i[0],end:i[1]})}}loadAll(){return n$1(this,(e=>{e(this.allSublayers);}))}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:t}=await U(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters},signal:e});t&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl});}};e$2([y$1()],R.prototype,"alwaysRefetch",void 0),e$2([y$1()],R.prototype,"dpi",void 0),e$2([y$1()],R.prototype,"gdbVersion",void 0),e$2([y$1()],R.prototype,"imageFormat",void 0),e$2([e$3("imageFormat",["supportedImageFormatTypes"])],R.prototype,"readImageFormat",null),e$2([y$1({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],R.prototype,"imageMaxHeight",void 0),e$2([y$1({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],R.prototype,"imageMaxWidth",void 0),e$2([y$1()],R.prototype,"imageTransparency",void 0),e$2([y$1({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],R.prototype,"isReference",void 0),e$2([y$1({json:{read:!1,write:!1}})],R.prototype,"labelsVisible",void 0),e$2([y$1({type:["ArcGISMapServiceLayer"]})],R.prototype,"operationalLayerType",void 0),e$2([y$1({json:{read:!1,write:!1}})],R.prototype,"popupEnabled",void 0),e$2([y$1()],R.prototype,"sourceJSON",void 0),e$2([y$1({json:{write:{ignoreOrigin:!0}}})],R.prototype,"sublayers",void 0),e$2([o$1("sublayers",{layers:{type:[G]},visibleLayers:{type:[N]}})],R.prototype,"writeSublayers",null),e$2([y$1({type:["show","hide","hide-children"]})],R.prototype,"listMode",void 0),e$2([y$1({json:{read:!1},readOnly:!0,value:"map-image"})],R.prototype,"type",void 0),e$2([y$1(f$1)],R.prototype,"url",void 0),R=e$2([i("esri.layers.MapImageLayer")],R);var J=R;

export default J;
