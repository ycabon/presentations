import { e as s, ac as e$1, ad as d$3, c_ as M, jS as o$2, jT as p, b3 as k, gY as j, du as f$1, jU as i$1, ae as i$2, jV as g$1, g as t$2, hD as f$2, hK as c$2, h as r$1, jW as Z, aB as S$3, C, jX as T, jY as S$4, jZ as j$1, hF as N$1, j_ as n$2, ib as n$3, d9 as a, s as s$1, j$ as c$3, hI as y$2, bL as e$2, hE as P$1, am as j$3, k0 as p$1, hJ as B, v as v$2, k1 as r$2, k2 as l$1, da as g$2, hH as v$3, hG as s$2, E as E$2, k3 as a$1, k4 as O, p as m$3, k5 as n$4, cv as O$1, k6 as T$2, k7 as M$1, hC as u$2, k8 as r$3, k9 as C$1, ka as P$2, kb as n$5, kc as N$2, kd as D$1, ke as O$2, j5 as i$4, j6 as s$3, dn as y$3, dp as w$2, jE as o$3, jG as a$2, j7 as n$6, dq as l$2, dv as b$2, b4 as b$3, dB as y$4, kf as u$3, jb as a$3, gX as v$4, hz as S$5, hx as r$4, kg as o$4, jx as c$5, iw as B$1, kh as l$3, d6 as o$5 } from './_virtual_index-49b2bc11.js';
import { i as i$3, m as m$1, x as x$1, d as d$5, h as h$1 } from './RawBlockCache-997cd214.js';
import { d as d$4, v as v$1, A as A$2, q, P, G, j as j$2, L, T as T$1, R as R$1 } from './rasterProjectionHelper-11778941.js';
import { e as e$3, f as f$3, m as m$2, c as c$4 } from './utils-e34a53e7.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const S$2=s.getLogger("esri.layers.mixins.ImageryTileMixin"),R=i=>{let R=class extends i{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.fullExtent=null,this.interpolation="nearest",this.multidimensionalDefinition=null,this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.tileInfo=null,this.symbolizer=null;}set url(e){this._set("url",g$1(e,S$2));}set renderer(e){this._set("renderer",e),this.updateRenderer();}async convertVectorFieldData(e,t){if(t$2(e))return null;const r=this._rasterJobHandler.instance,i=this.rasterInfo.dataType;return r?r.convertVectorFieldData({pixelBlock:e,dataType:i},t):f$2(e,i)}async createStreamlinesMesh(e,t){const r=this._rasterJobHandler.instance;return r?r.createStreamlinesMesh(e,t):c$2(e.rendererSettings,e.flowData,r$1(t.signal)?t.signal:(new AbortController).signal)}normalizeRasterFetchOptions(e){const{multidimensionalInfo:t}=this.rasterInfo;if(t$2(t))return e;let r=e.multidimensionalDefinition||this.multidimensionalDefinition;!t$2(r)&&r.length||(r=this._getDefaultSlice());const i=e.timeExtent||this.timeExtent;if(r$1(r)&&r$1(i)&&(r$1(i.start)||r$1(i.end))){var o,a;r=r.map((e=>e.clone()));const l=null==(o=t.variables.find((({name:e})=>e===r[0].variableName)))||null==(a=o.dimensions)?void 0:a.find((({name:e})=>"StdTime"===e)),m=r.find((({dimensionName:e})=>"StdTime"===e));if(!l||!m)return {...e,multidimensionalDefinition:null};const{start:d,end:u}=i,p=t$2(d)?null:d.getTime(),h=t$2(u)?null:u.getTime(),c=null!=p?p:h,f=null!=h?h:p;if(r$1(l.values)){const e=l.values.filter((e=>{if(Array.isArray(e)){if(c===f)return e[0]<=c&&e[1]>=c;const t=e[0]<=c&&e[1]>c||e[0]<f&&e[1]>=f,r=e[0]>=c&&e[1]<=f||e[0]<c&&e[1]>f;return t||r}return c===f?e===c:e>=c&&e<=f}));if(e.length){const t=e.sort(((e,t)=>{var r,i,n,s;if(c===f)return (null!=(n=e[0])?n:e)-(null!=(s=t[0])?s:t);return Math.abs((null!=(r=e[1])?r:e)-f)-Math.abs((null!=(i=t[1])?i:t)-f)}))[0];m.values=[t];}else r=null;}else if(l.hasRegularIntervals&&l.extent){const[e,t]=l.extent;c>t||f<e?r=null:m.values=c===f?[c]:[Math.max(e,c),Math.min(t,f)];}}return {...e,multidimensionalDefinition:r}}async updateRenderer(){if(!this.loaded)return;if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const e=this._rasterJobHandler.instance;e&&(this.symbolizer.rendererJSON=Z(this.renderer.toJSON()),this.symbolizer.bind(),await e.updateSymbolizer(this.symbolizer),this._cachedRendererJson=this.renderer.toJSON());}async applyRenderer(e,t){const r=e&&e.pixelBlock;if(!(r$1(r)&&r.pixels&&r.pixels.length>0))return null;let i;await this.updateRenderer();const n=this._rasterJobHandler.instance,{bandIds:o}=this;return i=n?await n.symbolize({...e,simpleStretchParams:t,bandIds:o}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:o}),i}getTileUrl(e,t,r){return "RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${r}`:""}getCompatibleTileInfo(e,t,r=!1){if(!this.loaded||t$2(t))return null;if(r&&e.equals(this.spatialReference))return this.tileInfo;const i=S$3(e);return j.create({size:256,spatialReference:e,origin:i?{x:i.origin[0],y:i.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,i,o={}){if(o.requestAsImageElement){const n=this.getTileUrl(e,t,i);return C(n,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:o.signal}).then((e=>e.data))}if(r$1(this.rasterInfo.multidimensionalInfo)&&(o=this.normalizeRasterFetchOptions(o),t$2(o.multidimensionalDefinition))){const r=o.tileInfo||this.rasterInfo.storageInfo.tileInfo;return {extent:this.raster.getTileExtentFromTileInfo(e,t,i,r),pixelBlock:null}}return await this._initJobHandler(),"raster-shaded-relief"===this.renderer.type&&(o={...o,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,i,o)}async fetchPixels(e,t,r,i={}){return r$1(this.rasterInfo.multidimensionalInfo)&&(i=this.normalizeRasterFetchOptions(i),t$2(i.multidimensionalDefinition))?{extent:e,pixelBlock:null}:(await this._initJobHandler(),this.raster.fetchPixels(e,t,r,i))}async identify(e,t={}){return r$1(this.rasterInfo.multidimensionalInfo)&&(t=this.normalizeRasterFetchOptions(t),t$2(t.multidimensionalDefinition))?{location:e,value:null}:this.raster.identify(e,t)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++;}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler();}hasStandardTime(){var e;const t=this.rasterInfo.multidimensionalInfo;if(!r$1(t)||"standard-time"!==this.rasterInfo.dataType)return !1;const r=null==(e=this.multidimensionalDefinition[0])?void 0:e.variableName;return t.variables.some((e=>e.name===r&&e.dimensions.some((e=>"StdTime"===e.name))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=this._getDefaultSlice()),this._configDefaultRenderer();}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new n$2;return this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,this.renderer&&this.updateRenderer();})).catch((()=>null)),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this.raster.rasterJobHandler=null;}_configDefaultInterpolation(){if(null==this.interpolation){var e;const t=T(this.rasterInfo,this.raster.tileType,null==(e=this.sourceJSON)?void 0:e.defaultResamplingMethod);this._set("interpolation",t);}}_getDefaultSlice(){const{multidimensionalInfo:e}=this.raster.rasterInfo;if(!r$1(e))return null;const t=e.variables[0];return t.dimensions.map((e=>{var r,i;return new p({variableName:t.name,dimensionName:e.name,values:[null!=(r=null==(i=e.values)?void 0:i[0])?r:e.extent[0]],isSlice:!0})}))}_configDefaultRenderer(){const e=this.raster.rasterInfo;var t;(this.bandIds||(this.bandIds=S$4(e)),this.renderer)||(this.renderer=j$1(e,{bandIds:this.bandIds,variableName:r$1(this.multidimensionalDefinition)?null==(t=this.multidimensionalDefinition[0])?void 0:t.variableName:null}));this.symbolizer?(this.symbolizer.rendererJSON=Z(this.renderer.toJSON()),this.symbolizer.rasterInfo=e):this.symbolizer=new N$1({rendererJSON:this.renderer.toJSON(),rasterInfo:e});const r=this.symbolizer.bind();r.success||S$2.warn("imagery-tile-mixin",r.error||"The given renderer is not supported by the layer.");}};return e$1([d$3()],R.prototype,"_cachedRendererJson",void 0),e$1([d$3()],R.prototype,"_compatibleFullExtent",void 0),e$1([d$3()],R.prototype,"_rasterJobHandler",void 0),e$1([d$3()],R.prototype,"bandIds",void 0),e$1([d$3()],R.prototype,"copyright",void 0),e$1([d$3({type:M}),o$2("rasterInfo.extent")],R.prototype,"fullExtent",void 0),e$1([d$3()],R.prototype,"interpolation",void 0),e$1([d$3()],R.prototype,"ioConfig",void 0),e$1([d$3({type:[p]})],R.prototype,"multidimensionalDefinition",void 0),e$1([d$3()],R.prototype,"raster",void 0),e$1([d$3({readOnly:!0}),o$2("raster.rasterInfo")],R.prototype,"rasterInfo",void 0),e$1([d$3()],R.prototype,"sourceJSON",void 0),e$1([d$3({type:k}),o$2("rasterInfo.spatialReference")],R.prototype,"spatialReference",void 0),e$1([d$3({type:j}),o$2("rasterInfo.storageInfo.tileInfo")],R.prototype,"tileInfo",void 0),e$1([d$3(f$1)],R.prototype,"url",null),e$1([d$3({types:i$1})],R.prototype,"renderer",null),e$1([d$3()],R.prototype,"symbolizer",void 0),R=e$1([i$2("esri.layers.ImageryTileMixin")],R),R};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const A$1=8;let D=class extends(n$3(a)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"};}async init(){const e=d$4();this.addResolvingPromise(e),await this.when();}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:j.create(),...e.ioConfig}}),e}set url(e){this._set("url",g$1(e,s.getLogger(this.declaredClass)));}async open(e){throw new s$1("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,r,o={}){const i=o.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(e,t,r,i);return this.fetchPixels(n,i.size[0],i.size[1],o)}async identify(e,t={}){t=this._getRequestOptionsWithSliceId(t);const{spatialReference:r,extent:o}=this.rasterInfo,{datumTransformation:i}=t;let a=v$1(e,r,i);if(!o.intersects(a))return {location:a,value:null};if(r$1(this.rasterInfo.transform)){const e=this.rasterInfo.transform.inverseTransform(a);if(!this.rasterInfo.nativeExtent.intersects(e))return {location:e,value:null};a=e;}let l=0;if(t.srcResolution){l=A$2(t.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel;}else if(l=await this.computeBestPyramidLevelForLocation(e,t),null==l)return {location:a,value:null};const c=this.identifyPixelLocation(a,l,null);if(null===c)return {location:a,value:null};const{row:u,col:f,rowOffset:m,colOffset:h}=c,d=i$3(this.url,t.sliceId),p=`${l}/${u}/${f}`;let I=m$1(d,null,p);t$2(I)&&(I=this.fetchRawTile(l,u,f,t),x$1(d,null,p,I));const w=await I;if(t$2(w)||!w.pixels||0===w.pixels.length)return {location:a,value:null};const R=m*this.rasterInfo.storageInfo.blockHeight+h,v=!w.mask||w.mask[R]?w.pixels.map((e=>e[R])):null,k=this.rasterInfo.dataType;if(("vector-magdir"===k||"vector-uv"===k)&&(null==v?void 0:v.length)>1){return {location:a,value:v,magdirValue:"vector-magdir"===k?[v[0],v[1]]:c$3([v[0],v[1]]),pyramidLevel:l}}return {location:a,value:v,pyramidLevel:l}}async fetchPixels(e,t,r,o={}){e=q(e);const i=P(e.spatialReference),a=G(e),l=P(this.rasterInfo.spatialReference),c=r$1(l)&&this.rasterInfo.extent.width>=l/2;if(o=this._getRequestOptionsWithSliceId(o),t$2(i)||0===a||1===a&&c)return this._fetchPixels(e,t,r,o);if(a>=3)return {extent:e,pixelBlock:null};const u=[],{xmin:f,xmax:m}=e,h=Math.round(i/(m-f)*t),d=h-Math.round((i/2-f)/(m-f)*t);let p=0;const x=[];for(let n=0;n<=a;n++){const s=new M({xmin:0===n?f:-i/2,xmax:n===a?m-i*n:i/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),l=0===n?h-d:n===a?t-p:h;p+=l,x.push(l);const c=this._fetchPixels(s,l,r,o);u.push(c);}const g=(await Promise.all(u)).map((e=>null==e?void 0:e.pixelBlock));let y=null;const I={width:t,height:r};y=this.rasterJobHandler?await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:g,srcMosaicSize:I,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:x},o):y$2(g,I,{blockWidths:x});return {extent:e,srcExtent:j$2(e,this.rasterInfo.spatialReference,o.datumTransformation),pixelBlock:y}}async fetchRawPixels(e,t,r,o){const{origin:i,blockBoundary:n}=this.rasterInfo.storageInfo,{blockWidth:s,blockHeight:l}=this.getBlockWidthHeight(e);let{x:c,y:u}=t,{width:f,height:m,wrapCount:h}=r;const d=e$2(this._getRasterTileAlignmentInfo(e,0));o.buffer&&(c-=o.buffer.cols,u-=o.buffer.rows,f+=2*o.buffer.cols,m+=2*o.buffer.rows);const p=Math.floor(c/s),x=Math.floor(u/l),g=Math.floor((c+f-1)/s),y=Math.floor((u+m-1)/l),I=n[e];if(!I)return null;const{minRow:w,minCol:R,maxCol:v,maxRow:k}=I;if(0===h&&(y<w||g<R||x>k||p>v))return null;const b=new Array;let T=!1;const C=null==this.ioConfig.allowPartialFill?o.allowPartialFill:this.ioConfig.allowPartialFill;for(let a=x;a<=y;a++)for(let t=p;t<=g;t++){const r=0===h||null==d||t<d.worldColumnCountFromOrigin?t:t%d.worldColumnCountFromOrigin-d.originColumnOffset;if(a>=w&&r>=R&&k>=a&&v>=r){const t=this._fetchRawTile(e,a,r,o);C?b.push(new Promise((e=>{t.then((t=>e(t))).catch((()=>{T=!0,e(null);}));}))):b.push(t);}else b.push(null);}if(0===b.length)return null;const M$1=await Promise.all(b),P={height:(y-x+1)*l,width:(g-p+1)*s},{spatialReference:S}=this.rasterInfo,B=this.getPyramidPixelSize(e),{x:j,y:F}=B;return {extent:new M({xmin:i.x+p*s*j,xmax:i.x+(g+1)*s*j,ymin:i.y-(y+1)*l*F,ymax:i.y-x*l*F,spatialReference:S}),pixelBlocks:M$1,mosaicSize:P,isPartiallyFilled:T}}fetchRawTile(e,t,o,i){throw new s$1("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return j$2(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return !this.rasterJobHandler||t.useCanvas?P$1(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,r,o){var i,n;const{customFetchParameters:s}=this.ioConfig,{range:a,query:l,headers:c}=r;o=null!=(i=null!=(n=o)?n:r.retryCount)?i:this.ioConfig.retryCount;const u=a?{Range:`bytes=${a.from}-${a.to}`}:null;try{return await C(e,{...r,query:{...l,...s},headers:{...c,...u}})}catch(f){if(o>0)return o--,this.request(e,r,o);throw f}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;if(!r$1(t))return null;if(!r$1(e)||0===e.length)return null;let r=0;const o=e[0].variableName;for(let i=0;i<t.variables.length;i++){const n=t.variables[i],s=n.dimensions;if(n.name!==o){r+=s.map((e=>this._getDimensionValuesCount(e))).reduce(((e,t)=>e+t));break}const a=s.map((e=>this._getDimensionValuesCount(e))),l=s.length;for(let t=0;t<l;t++){const o=e.filter((e=>e.dimensionName===s[t].name))[0];if(null==o)return null;const i=Array.isArray(o.values[0])?o.values[0][0]:o.values[0],n=this._getIndexFromDimensions(i,s[t]);if(-1===n)return null;a.shift(),r+=t===l-1?n:n*a.reduce(((e,t)=>e+t));}}return r}getTileExtentFromTileInfo(e,t,r,o){const i=o.lodAt(e);return this.getTileExtent({x:i.resolution,y:i.resolution},t,r,o.origin,o.spatialReference,o.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:r,pixelSize:o}=this.rasterInfo;if(!e.tileInfo){const i=[],n=e.maximumPyramidLevel||0;let s=Math.max(o.x,o.y),a=1/.0254*96*s;for(let e=0;e<=n;e++)i.push({level:n-e,resolution:s,scale:a}),s*=2,a*=2;const l=new j$3({x:r.xmin,y:r.ymax,spatialReference:t});e.tileInfo=new j({origin:l,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:i}),e.isVirtualTileInfo=!0;}}createRemoteDatasetStorageInfo(e,t=512,r=512,o){const{width:i,height:n,nativeExtent:s,pixelSize:a,spatialReference:l}=e,c=new j$3({x:s.xmin,y:s.ymax,spatialReference:l});null==o&&(o=Math.max(0,Math.round(Math.log(Math.max(i,n))/Math.LN2-8)));const u=this.computeBlockBoundary(s,512,512,{x:s.xmin,y:s.ymax},[a],o);e.storageInfo=new p$1({blockWidth:t,blockHeight:r,pyramidBlockWidth:t,pyramidBlockHeight:r,origin:c,firstPyramidLevel:1,maximumPyramidLevel:o,blockBoundary:u});}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,r,o,i,n=0,s=2){if(1===i.length&&n>0){i=[...i];let{x:e,y:t}=i[0];for(let r=0;r<n;r++)e*=s,t*=s,i.push({x:e,y:t});}const a=[],{x:l,y:c}=o;for(let u=0;u<i.length;u++){const{x:o,y:n}=i[u];a.push({minCol:Math.floor((e.xmin-l+.1*o)/t/o),maxCol:Math.floor((e.xmax-l-.1*o)/t/o),minRow:Math.floor((c-e.ymax+.1*n)/r/n),maxRow:Math.floor((c-e.ymin-.1*n)/r/n)});}return a}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:r,pyramidScalingFactor:o}=this.rasterInfo.storageInfo;if(0===e)return t;if(r$1(r)&&r.length)return r[e-1];const i=o**e;return {x:t.x*i,y:t.y*i}}identifyPixelLocation(e,t,r){const{spatialReference:o,nativeExtent:i}=this.rasterInfo,{blockWidth:n,blockHeight:s,maximumPyramidLevel:a,origin:l}=this.rasterInfo.storageInfo,c=v$1(e,o,r);if(!i.intersects(c))return null;if(t<0||t>a)return null;const u=this.getPyramidPixelSize(t),{x:f,y:m}=u,h=(l.y-c.y)/m/s,d=(c.x-l.x)/f/n,p=Math.min(s-1,Math.floor((h-Math.floor(h))*s)),x=Math.min(n-1,Math.floor((d-Math.floor(d))*n));return {pyramidLevel:t,row:Math.floor(h),col:Math.floor(d),rowOffset:p,colOffset:x,srcLocation:c}}getTileExtent(e,t,r,o,i,n){const[s,a]=n,l=o.x+r*s*e.x,c=l+s*e.x,u=o.y-t*a*e.y,f=u-a*e.y;return new M({xmin:l,xmax:c,ymin:f,ymax:u,spatialReference:i})}getBlockWidthHeight(e){return {blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,r){const o=this.rasterInfo.storageInfo.blockBoundary[e];return !o||o.maxRow<t||o.maxCol<r||o.minRow>t||o.minCol>r}async _fetchPixels(e,t,r,o={}){let i=G(e);if(i>=2)return {extent:e,pixelBlock:null};const n=this._getSourceDataInfo(e,t,r,o),{pyramidLevel:s,pyramidResolution:l,srcResolution:c,srcExtent:u,srcWidth:f,srcHeight:m}=n;if(0===f||0===m)return {extent:e,srcExtent:u,pixelBlock:null};const h=e$2(this.rasterInfo.transform);"gcs-shift"===(null==h?void 0:h.type)&&(i=G(n.srcExtent,!0));const d=this.rasterInfo.storageInfo,p={x:Math.floor((u.xmin-d.origin.x)/l.x+.1),y:Math.floor((d.origin.y-u.ymax)/l.y+.1)},x=await this.fetchRawPixels(s,p,{width:f,height:m,wrapCount:i},o);if(!x)return {extent:e,srcExtent:u,pixelBlock:null};const g=s>0?d.pyramidBlockWidth:d.blockWidth,y=s>0?d.pyramidBlockHeight:d.blockHeight,I=g===f&&y===m&&p.x%g==0&&p.y%y==0,w=new j$3({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/r,spatialReference:e.spatialReference}),R=!e.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:b}=o;if(!R&&I&&1===x.pixelBlocks.length&&g===t&&y===r&&c.x===w.x&&c.y===w.y)return {extent:e,srcExtent:u,pixelBlock:x.pixelBlocks[0]};const T=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:x.extent,pixelSize:w.toJSON(),datumTransformation:b,rasterTransform:h,hasWrapAround:i>0,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy},o):L({projectedExtent:e,srcBufferExtent:x.extent,pixelSize:w,datumTransformation:b,rasterTransform:h,hasWrapAround:i>0,isAdaptive:!1});let C;const M=!o.requestRawData,P={rows:T.spacing[0],cols:T.spacing[1]},B$1=e$2(this._getRasterTileAlignmentInfo(s,x.extent.xmin)),{pixelBlocks:F,mosaicSize:W,isPartiallyFilled:H}=x;if(this.rasterJobHandler)C=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:F,srcMosaicSize:W,destDimension:M?{width:t,height:r}:null,coefs:M?T.coefficients:null,sampleSpacing:M?P:null,interpolation:o.interpolation,alignmentInfo:B$1,blockWidths:null},o);else {const e=y$2(F,W,{alignmentInfo:B$1});C=M?B(e,{width:t,height:r},T.coefficients,P,o.interpolation):e;}return o.requestRawData?{srcExtent:u,pixelBlock:C,transformGrid:T,extent:e,isPartiallyFilled:H}:{srcExtent:u,extent:e,pixelBlock:C}}_fetchRawTile(e,t,r,o){const i=this.rasterInfo.storageInfo.blockBoundary[e];if(!i)return Promise.resolve(null);const{minRow:n,minCol:a,maxCol:l,maxRow:u}=i;if(t<n||r<a||t>u||r>l)return Promise.resolve(null);const f=i$3(this.url,o.sliceId),m=`${e}/${t}/${r}`;let h=m$1(f,o.registryId,m);if(t$2(h)){const i=new AbortController;h=this.fetchRawTile(e,t,r,{...o,signal:i.signal}),x$1(f,o.registryId,m,h,i),h.catch((()=>d$5(f,o.registryId,m)));}return o.signal&&v$2(o,(()=>{h$1(f,o.registryId,m);})),h}_getIndexFromDimensions(e,t){const{extent:r,interval:o,unit:i,values:n}=t;if(null!=n&&n.length)return Array.isArray(n[0])?n.findIndex((t=>t[0]<=e&&t[1]>=e)):n.indexOf(e);if(e>r[1])return -1;const s=r[0];let a=-1;if("ISO8601"===i){var l;switch((null==(l=t.intervalUnit)?void 0:l.toLowerCase())||"seconds"){case"seconds":a=Math.round((e-s)/1e3/o);break;case"minutes":a=Math.round((e-s)/6e4/o);break;case"hours":a=Math.round((e-s)/36e5/o);break;case"days":a=Math.round((e-s)/864e5/o);break;case"years":a=Math.round((new Date(e).getUTCFullYear()-new Date(s).getUTCFullYear())/o);break;case"decades":a=Math.round((new Date(e).getUTCFullYear()-new Date(s).getUTCFullYear())/10/o);}return a}return Math.round((e-s)/o)}_getDimensionValuesCount(e){const{extent:t,interval:r,unit:o,values:i}=e;let n=(null==i?void 0:i.length)||0;if(n)return n;const s=t[0];if(0===n&&"ISO8601"===o){var a;switch((null==(a=e.intervalUnit)?void 0:a.toLowerCase())||"seconds"){case"seconds":n=Math.round((t[1]-t[0])/1e3/r);break;case"minutes":n=Math.round((t[1]-t[0])/6e4/r);break;case"hours":n=Math.round((t[1]-t[0])/36e5/r);break;case"days":n=Math.round((t[1]-t[0])/864e5/r);break;case"years":n=Math.round((new Date(t[1]).getUTCFullYear()-new Date(s).getUTCFullYear())/r);break;case"decades":n=Math.round((new Date(t[1]).getUTCFullYear()-new Date(s).getUTCFullYear())/10/r);}return n}return Math.round((t[1]-t[0])/r)}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=T$1(this.rasterInfo)),r$1(this._rasterTileAlighmentInfo.pyramidsInfo)?{startX:t,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}:null}_getSourceDataInfo(e,t,r,o={}){const i={datumTransformation:o.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};o.srcResolution&&(i.srcResolution=o.srcResolution,this._updateSourceDataInfo(e,i));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:s,srcHeight:a,pyramidLevel:l}=i,c=s/t,u=a/r,f=l<n&&c*u>=16;if(f||l===n&&(c>A$1||u>A$1)||(0===s||0===a)){const s=new j$3({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/r,spatialReference:e.spatialReference});let a=R$1(s,this.rasterInfo.spatialReference,e,i.datumTransformation);const m=!a||o.srcResolution&&a.x+a.y<o.srcResolution.x+o.srcResolution.y;if(f&&o.srcResolution&&m){const e=Math.round(Math.log(Math.max(c,u))/Math.LN2)-1;if(n-l+3>=e){const t=2**e;a={x:o.srcResolution.x*t,y:o.srcResolution.y*t};}}a&&(i.srcResolution=a,this._updateSourceDataInfo(e,i));}return (i.srcWidth/t>A$1||i.srcHeight/r>A$1)&&(i.srcWidth=0,i.srcHeight=0),i}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const r=this.rasterInfo.spatialReference,{srcResolution:o,datumTransformation:i}=t,{pyramidLevel:n,pyramidResolution:s,excessiveReading:l}=A$2(o,this.rasterInfo,this.ioConfig.sampling);if(l)return;let c=t.srcExtent||j$2(e,r,i);if(null==c)return;const u=e$2(this.rasterInfo.transform);u&&(c=u.inverseTransform(c)),t.srcExtent=c;const f=Math.ceil((c.xmax-c.xmin)/s.x-.1),m=Math.ceil((c.ymax-c.ymin)/s.y-.1);t.pyramidLevel=n,t.pyramidResolution=s,t.srcWidth=f,t.srcHeight=m;}_getRequestOptionsWithSliceId(e){return r$1(this.rasterInfo.multidimensionalInfo)&&null==e.sliceId&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}};e$1([d$3()],D.prototype,"_rasterTileAlighmentInfo",void 0),e$1([d$3(f$1)],D.prototype,"url",null),e$1([d$3({type:String,json:{write:!0}})],D.prototype,"datasetName",void 0),e$1([d$3({type:String,json:{write:!0}})],D.prototype,"datasetFormat",void 0),e$1([d$3()],D.prototype,"rasterInfo",void 0),e$1([d$3()],D.prototype,"ioConfig",void 0),e$1([d$3()],D.prototype,"sourceJSON",void 0),D=e$1([i$2("esri.layers.support.rasterDatasets.BaseRaster")],D);const E$1=D;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
function t$1(e){const t=e.fields,r=e.records,n=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",i=[{name:n,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),s=i.map((e=>e.name)),a=[];let o=0,l=0;return r.forEach((e=>{const t={};for(t[n]=o++,l=1;l<s.length;l++)t[s[l]]=e[l-1];a.push({attributes:t});})),{displayFieldName:"",fields:i,features:a}}class r{static get supportedVersions(){return [5]}static parse(r){const n=new DataView(r),i=3&n.getUint8(0);if(3!==i)return {header:{version:i},recordSet:null};const s=n.getUint32(4,!0),a=n.getUint16(8,!0),o=n.getUint16(10,!0),l={version:i,recordCount:s,headerByteCount:a,recordByteCount:o};let p=32;const g=[],u=[];let d;if(3===i){for(;13!==n.getUint8(p);)d=String.fromCharCode(n.getUint8(p+11)).trim(),g.push({name:r$2(new Uint8Array(r,p,11)),type:d,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(d)],length:n.getUint8(p+16)}),p+=32;if(p+=1,g.length>0)for(;u.length<s&&r.byteLength-p>o;){const t=[];32===n.getUint8(p)?(p+=1,g.forEach((n=>{if("C"===n.type)t.push(r$2(new Uint8Array(r,p,n.length)).trim());else if("N"===n.type)t.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(r,p,n.length)).trim(),10));else if("F"===n.type)t.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(r,p,n.length)).trim()));else if("D"===n.type){const e=String.fromCharCode.apply(null,new Uint8Array(r,p,n.length)).trim();t.push(new Date(parseInt(e.substring(0,4),10),parseInt(e.substring(4,6),10)-1,parseInt(e.substring(6,8),10)));}p+=n.length;})),u.push(t)):p+=o;}}return {header:l,fields:g,records:u,recordSet:t$1({fields:g,records:u})}}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const g=new Map;g.set("int16","esriFieldTypeSmallInteger"),g.set("int32","esriFieldTypeInteger"),g.set("int64","esriFieldTypeInteger"),g.set("float32","esriFieldTypeSingle"),g.set("float64","esriFieldTypeDouble"),g.set("text","esriFieldTypeString");const y$1=8;let x=class extends E$1{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF";}async open(e){await this.init();const{data:r}=await this.request(this.url+"/conf.json",{signal:null==e?void 0:e.signal});if(!this._validateHeader(r))throw new s$1("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:o,rasterInfo:i}=this._parseHeader(r);if("thematic"===i.dataType){const e=await this._fetchAuxiliaryInformation();i.attributeTable=e;}this._set("storageInfo",o),this._set("rasterInfo",i),this.ioConfig.retryCount=this.ioConfig.retryCount||0;}async fetchRawTile(e,t,r,o={}){const i=this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(i<0)return null;const s=this._buildCacheFilePath(i,t,r,o.multidimensionalDefinition),a=this._getIndexRecordFromBundle(t,r),n=await this.request(s,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:o.signal});if(!n)return null;const l=new Uint8Array(n.data),f=this._getTileEndAndContentType(l,a);if(0===f.recordSize)return null;const m=await this.request(s,{range:{from:f.position,to:f.position+f.recordSize},responseType:"array-buffer",signal:o.signal});return m?this.decodePixelBlock(m.data,{width:this.rasterInfo.storageInfo.tileInfo.size[0],height:this.rasterInfo.storageInfo.tileInfo.size[1],planes:null,pixelType:null}):null}_validateHeader(e){const t=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return e&&"RasterInfo"===e.type&&!t.some((t=>!e[t]))}_parseHeader(e){var t,r;const o=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:i,histograms:l,colormap:f,blockWidth:m,blockHeight:c,firstPyramidLevel:p,maximumPyramidLevel:g}=e,x=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),I=e.extent.spatialReference,S=null==(t=e.geodataXform)?void 0:t.spatialReference,w=new k(null!=I&&I.wkid||null!=I&&I.wkt?I:S);let v=new M({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:w});const b=new j$3({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:w}),T=Math.round((v.xmax-v.xmin)/b.x),j$1=Math.round((v.ymax-v.ymin)/b.y),z=this._parseTransform(e.geodataXform),_=z?v:null;z&&(v=z.forwardTransform(v),b.x=(v.xmax-v.xmin)/T,b.y=(v.ymax-v.ymin)/j$1);const k$1=null!=(r=e.properties)?r:{},C=e.format.toLowerCase().replace("cache/",""),R=new j$3(e.origin.x,e.origin.y,w);let F,P,H,D;if(f&&f.colors)for(F=[],P=0;P<f.colors.length;P++)H=f.colors[P],D=f.values?f.values[P]:P,F.push([D,255&H,H<<16>>>24,H<<8>>>24,H>>>24]);const L=e.LODInfos,M$1=[];for(P=0;P<L.levels.length;P++)M$1.push({level:L.levels[P],resolution:L.resolutions[P],scale:96/.0254*L.resolutions[P]});const B=new j({dpi:96,lods:M$1,format:C,origin:R,size:[m,c],spatialReference:w}),O={recordSize:y$1,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*y$1+64},$=[{maxCol:Math.ceil(T/m)-1,maxRow:Math.ceil(j$1/c)-1,minCol:0,minRow:0}];let q=2;if(g>0)for(P=0;P<g;P++)$.push({maxCol:Math.ceil(T/q/m)-1,maxRow:Math.ceil(j$1/q/c)-1,minCol:0,minRow:0}),q*=2;const A=e.mdInfo;return {storageInfo:O,rasterInfo:new l$1({width:T,height:j$1,pixelType:o,bandCount:i,extent:v,nativeExtent:_,transform:z,spatialReference:w,pixelSize:b,keyProperties:k$1,statistics:x,histograms:l,multidimensionalInfo:A,colormap:F,storageInfo:new p$1({blockWidth:m,blockHeight:c,pyramidBlockWidth:m,pyramidBlockHeight:c,origin:R,tileInfo:B,firstPyramidLevel:p,maximumPyramidLevel:g,blockBoundary:$})})}}_parseTransform(e){var r,o;if(!e$3(e))throw new s$1("cloudraster:open","the data contains unsupported geodata transform types");const i=f$3(e);if("identity"===i.type)return null;if("polynomial"!==i.type||null==(r=i.forwardCoefficients)||!r.length||null==(o=i.inverseCoefficients)||!o.length)throw new s$1("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return i}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),r$1=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),o=await Promise.all([t,r$1]);let i;if(o[0]){let e=o[0].fields;const t=o[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":g.get(e.type),name:e.name,alias:e.alias||e.name})));const r=t.map((e=>({attributes:e})));e&&t&&(i={fields:e,features:r});}}if(!i&&o[1]){i=r.parse(o[1]).recordSet;}return g$2.fromJSON(i)}_buildCacheFilePath(e,t,o,i){const s=this.storageInfo.packetSize,a=Math.floor(t/s)*s,n=Math.floor(o/s)*s,l="R"+this._toHexString4(a)+"C"+this._toHexString4(n);let f="L";f+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:m}=this.rasterInfo,c=null==i?void 0:i[0];if(!r$1(m)||!c)return `${this.url}/_alllayers/${f}/${l}.bundle`;let p=m.variables.filter((e=>e.name===c.variableName))[0].dimensions[0].values.indexOf(c.values[0]).toString(16);const d=4-p.length;for(let r=0;r<d;r++)p="0"+p;return p="S"+p,`${this.url}/_alllayers/${c.variableName}/${p}/${f}/${l}.bundle`}_getIndexRecordFromBundle(e,t){const r=this.storageInfo.packetSize,o=r*(e%r)+t%r;if(o<0)throw "Invalid level / row / col";return 20+o*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const r=e.subarray(t,t+8);let o,i=0;for(o=0;o<5;o++)i|=(255&r[o])<<8*o;const s=0xffffffffff&i;for(i=0,o=5;o<8;o++)i|=(255&r[o])<<8*(o-5);return {position:s,recordSize:0xffffffffff&i}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t;}return t}};e$1([d$3({readOnly:!0})],x.prototype,"storageInfo",void 0),e$1([d$3({type:String,json:{write:!0}})],x.prototype,"datasetFormat",void 0),x=e$1([i$2("esri.layers.support.rasterDatasets.CloudRaster")],x);const I$1=x;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
let h=class extends E$1{constructor(){super(...arguments),this.datasetFormat="MEMORY";}async open(t){var e;await this.init();const{pixelBlock:s,statistics:r,histograms:i,name:o,keyProperties:m,nativeExtent:n,transform:l}=this.data,{width:h,height:d,pixelType:f}=s,u=this.data.extent||new M({xmin:-.5,ymin:.5,xmax:h-.5,ymax:d-.5,spatialReference:new k({wkid:3857})}),y=null!=(e=this.data.isPseudoSpatialReference)?e:!this.data.extent,x={x:u.width/h,y:u.height/d},v=new l$1({width:h,height:d,pixelType:f,extent:u,nativeExtent:n,transform:l,pixelSize:x,spatialReference:u.spatialReference,bandCount:3,keyProperties:m||{},statistics:r,isPseudoSpatialReference:y,histograms:i});this.createRemoteDatasetStorageInfo(v,512,512),this._set("rasterInfo",v),this.updateTileInfo(),await this._buildInMemoryRaster(s,{width:512,height:512},t),this.datasetName=o,this.url="/InMemory/"+o;}fetchRawTile(t,e,s,r={}){const i=this._pixelBlockTiles.get(`${t}/${e}/${s}`);return Promise.resolve(i)}async _buildInMemoryRaster(t,i,o){const a=this.rasterInfo.storageInfo.maximumPyramidLevel,m=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:i,maximumPyramidLevel:a},o):Promise.resolve(v$3(t,i,a)),p=r$1(this.rasterInfo.statistics),c=r$1(this.rasterInfo.histograms),h=p&&c?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},o):Promise.resolve(s$2(t)),d=await E$2([m,h]);if(!d[0].value&&d[1].value)throw new s$1("inmemory-raster:open","failed to build in memory raster");var f,u;(this._pixelBlockTiles=d[0].value,p)||(this.rasterInfo.statistics=null==(f=d[1].value)?void 0:f.statistics);c&&(this.rasterInfo.histograms=null==(u=d[1].value)?void 0:u.histograms);}};e$1([d$3({type:String,json:{write:!0}})],h.prototype,"datasetFormat",void 0),e$1([d$3()],h.prototype,"data",void 0),h=e$1([i$2("esri.layers.support.rasterDatasets.InMemoryRaster")],h);const d$2=h;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
function n$1(e,t){if(!e||!t)return [];let l=t;t.indexOf("/")>-1?(l=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const r=[];if(t){const u=n$1(e,l);for(let e=0;e<u.length;e++){n$1(u[e],t).forEach((n=>r.push(n)));}return r}const u=e.getElementsByTagNameNS("*",l);if(!u||0===u.length)return [];for(let n=0;n<u.length;n++)r.push(u[n]||u.item[n]);return r}function e(t,l){if(!t||!l)return null;let r=l;l.indexOf("/")>-1?(r=l.slice(0,l.indexOf("/")),l=l.slice(l.indexOf("/")+1)):l="";const u=n$1(t,r);return u.length>0?l?e(u[0],l):u[0]:null}function t(n,t=null){const l=t?e(n,t):n;let r;return l?(r=l.textContent||l.nodeValue,r?r.trim():null):null}function l(e,t){const l=n$1(e,t),r=[];let u;for(let n=0;n<l.length;n++)u=l[n].textContent||l[n].nodeValue,u&&(u=u.trim(),""!==u&&r.push(u));return r}function u$1(n,e){return l(n,e).map((n=>Number(n)))}function o$1(n,e){const l=t(n,e);return Number(l)}function i(n,e){var t;const l=null==n||null==(t=n.nodeName)?void 0:t.toLowerCase(),r=e.toLowerCase();return l.slice(l.lastIndexOf(":")+1)===r}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
function o(e,t){if(!e||!t)return null;const n=[];for(let r=0;r<e.length;r++)n.push(e[r]),n.push(t[r]);return n}function u(e$1){var n;const l=e(e$1,"GeodataXform"),u=c$1(o$1(l,"SpatialReference/WKID")||t(l,"SpatialReference/WKT"));if("typens:PolynomialXform"!==l.getAttribute("xsi:type"))return {spatialReference:u,transform:null};const f=null!=(n=o$1(l,"PolynomialOrder"))?n:1,m=u$1(l,"CoeffX/Double"),d=u$1(l,"CoeffY/Double"),p=u$1(l,"InverseCoeffX/Double"),S=u$1(l,"InverseCoeffY/Double"),C=o(m,d),I=o(p,S);return {spatialReference:u,transform:new m$2({spatialReference:u,polynomialOrder:f,forwardCoefficients:C,inverseCoefficients:I})}}function f(e$1){var a;const i=o$1(e$1,"NoDataValue"),l=e(e$1,"Histograms/HistItem"),o=o$1(l,"HistMin"),u=o$1(l,"HistMax"),f=o$1(l,"BucketCount"),c=null==(a=t(l,"HistCounts"))?void 0:a.split("|").map((e=>Number(e)));let m,d,p,S;n$1(e$1,"Metadata/MDI").forEach((e=>{var t;const n=Number(null!=(t=e.textContent)?t:e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":m=n;break;case"STATISTICS_MAXIMUM":d=n;break;case"STATISTICS_MEAN":p=n;break;case"STATISTICS_STDDEV":S=n;}}));const C=o$1(e$1,"Metadata/SourceBandIndex");return {noDataValue:i,histogram:null!=c&&c.length&&null!=m&&null!=d?{min:o,max:u,size:f||c.length,counts:c}:null,sourceBandIndex:C,statistics:null!=m&&null!=d?{min:m,max:d,avg:p,stddev:S}:null}}function c$1(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new k({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const n=e.indexOf("VERTCS"),r=e.indexOf("PROJCS"),s=r>-1?r:e.indexOf("GEOGCS");if(-1===s)return null;const a=e.slice(s,e.lastIndexOf("]",n)+1).trim(),i=e.slice(n,e.lastIndexOf("]")).trim();t=m(a);const o=new k(t?{wkid:t}:{wkt:a}),u=m(i);return u&&(o.vcsWkid=u),o}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=m(e),new k(0!==t?{wkid:t}:{wkt:e})):null}function m(e){var t;const n=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map((e=>e.trim())).filter((e=>""!==e)),r=n[n.length-1].split(","),s=null==(t=r[0])?void 0:t.toLowerCase();if(("epsg"===s||"esri"===s)&&e.endsWith('"]]')){const e=Number(r[1]);if(!isNaN(e)&&0!==e)return e}return 0}function d$1(r){var s;if("pamdataset"!==(null==r||null==(s=r.documentElement.tagName)?void 0:s.toLowerCase()))return {};const a={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};r.documentElement.childNodes.forEach((r=>{if(1===r.nodeType)if(i(r,"SRS")){if(!a.spatialReference){const e=t(r);a.spatialReference=c$1(e);}}else if(i(r,"Metadata"))if("xml:ESRI"===r.getAttribute("domain")){const{spatialReference:e,transform:t}=u(r);a.transform=t,a.spatialReference||(a.spatialReference=e);}else {n$1(r,"MDI").forEach((e=>a.metadata[e.getAttribute("key")]=t(e)));}else if(i(r,"PAMRasterBand")){const e=f(r);null!=e.sourceBandIndex&&null==a.rasterBands[e.sourceBandIndex]?a.rasterBands[e.sourceBandIndex]=e:a.rasterBands.push(e);}}));const i$1=a.rasterBands;if(i$1){const e=!!i$1[0].statistics;a.statistics=e?i$1.map((e=>e.statistics)):null;const t=!!i$1[0].histogram;a.histograms=t?i$1.map((e=>e.histogram)):null;}return a}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
let d=class extends E$1{async open(t){await this.init();const e=await this._fetchData(t);let{spatialReference:r,statistics:s,histograms:a,transform:o}=await this._fetchAuxiliaryData(t);const i=!r;i&&(r=new k({wkid:3857})),null!=a&&a.length&&null==s&&(s=a$1(a));const{width:n,height:m}=e;let p=new M({xmin:-.5,ymin:.5-m,xmax:n-.5,ymax:.5,spatialReference:r});const f=o?o.forwardTransform(p):p;let d=!0;if(o){const t=o.forwardCoefficients;d=t&&0===t[1]&&0===t[2],d&&(o=null,p=f);}const y=new d$2({data:{extent:f,nativeExtent:p,transform:o,pixelBlock:e,statistics:s,histograms:a,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:i}});await y.open(),this._set("rasterInfo",y.rasterInfo),this._inMemoryRaster=y;}fetchRawTile(t,e,r,s={}){return this._inMemoryRaster.fetchRawTile(t,e,r,s)}async _fetchData(t){const{data:r}=await this.request(this.url,{responseType:"array-buffer",signal:null==t?void 0:t.signal}),s=O(r).toUpperCase();if("JPG"!==s&&"PNG"!==s&&"GIF"!==s&&"BMP"!==s)throw new s$1("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);return await this.decodePixelBlock(r,{format:"jpg",width:1,height:1,useCanvas:!0})}async _fetchAuxiliaryData(t){var e,o;const i=e$2(null==t?void 0:t.signal),n=null!=(e=this.ioConfig.skipExtensions)?e:[],l=n.indexOf("aux.xml")>-1?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:i}),p=this.datasetFormat,c="JPG"===p?"jgw":"PNG"===p?"pgw":"BMP"===p?"bpw":null,u=n.indexOf(c)>-1?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+c,{responseType:"text",signal:i}),h=await E$2([l,u]);if(null!=i&&i.aborted)throw m$3();const d=d$1(null==(o=h[0].value)?void 0:o.data);if(!d.transform){const t=h[1].value?h[1].value.data.split("\n").slice(0,6).map((t=>Number(t))):null;d.transform=6===(null==t?void 0:t.length)?new m$2({forwardCoefficients:[t[4],t[5],t[0],-t[1],t[2],-t[3]]}):null;}return d}};e$1([d$3({type:String,json:{write:!0}})],d.prototype,"datasetFormat",void 0),d=e$1([i$2("esri.layers.support.rasterDatasets.ImageAuxRaster")],d);const y=d;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
let S$1=class extends E$1{constructor(){super(...arguments),this._levelOffset=0,this._slices=null,this._tilemapCache=null,this.datasetFormat="RasterTileServer";}async open(e){await this.init();const s=e&&e.signal,a=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:s});a.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const r=a.data;if(this.sourceJSON=r,!r)throw new s$1("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!r.tileInfo)throw new s$1("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const n=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=r.cacheType,null==this.tileType&&(n.indexOf(r.tileInfo.format.toLowerCase())>-1?this.tileType="Map":"lerc"===r.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=r.name.slice(r.name.indexOf("/")+1);const o=await this._fetchRasterInfo({signal:s});if(!r$1(o))throw new s$1("image-server-raster:open","cannot initialize image service");{const e="Map"===this.tileType?n$4(r.tileInfo,r):j.fromJSON(r.tileInfo),{extent:t,pixelSize:i}=o,s=.5/o.width*i.x;let a,l;const n=e.lodAt(Math.max.apply(null,e.lods.map((e=>e.level))));"Map"!==this.tileType&&0!==r.maxScale&&("Raster"===this.tileType?(a=e.lods.filter((e=>e.resolution===i.x))[0],a||(a=e.lods[e.lods.length-1])):(a=e.lods.filter((e=>Math.abs(e.scale-r.maxScale)<s))[0],a||(a=e.lods.filter((e=>e.scale>r.maxScale)).sort(((e,t)=>e.scale>t.scale?1:-1))[0])),i.x=i.y=a.resolution,o.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),o.height=Math.ceil((t.ymax-t.ymin)/i.y-.1)),a||(a=n);const u=e.lodAt(Math.min.apply(null,e.lods.map((e=>e.level))));"Map"===this.tileType?this._levelOffset=e.lods[0].level:0!==r.minScale&&"Elevation"===this.tileType&&(l=e.lods.filter((e=>Math.abs(e.scale-r.minScale)<s))[0],this._levelOffset=l.level-u.level),l||(l=u);const f=Math.max(i.x,i.y);(Math.abs(i.x-i.y)>s||!e.lods.some((e=>Math.abs(e.resolution-f)<s)))&&(i.x=i.y=a.resolution,o.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),o.height=Math.ceil((t.ymax-t.ymin)/i.y-.1));const p=a.level-l.level,[d,y]=e.size,x=[];e.lods.forEach((e=>{e.level>=l.level&&e.level<=a.level&&x.push({x:e.resolution,y:e.resolution});})),x.sort(((e,t)=>e.x-t.x));const g=this.computeBlockBoundary(t,d,y,e.origin,x,p),v=x.length>1?x.slice(1):null;o.storageInfo=new p$1({blockWidth:e.size[0],blockHeight:e.size[1],pyramidBlockWidth:e.size[0],pyramidBlockHeight:e.size[1],pyramidResolutions:v,compression:e.format,origin:e.origin,firstPyramidLevel:1,maximumPyramidLevel:p,tileInfo:e,blockBoundary:g}),this._fixGCSShift(o),this._set("rasterInfo",o);}if(r.capabilities.toLowerCase().indexOf("tilemap")>-1){const e={tileInfo:o.storageInfo.tileInfo,parsedUrl:O$1(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new T$2({layer:e});}}async fetchRawTile(e,t,i,s={}){if(this._slices&&null==s.sliceId)return null;const{storageInfo:a,extent:l}=this.rasterInfo,r=a.maximumPyramidLevel-e+this._levelOffset,n=`${this.url}/tile/${r}/${t}/${i}`,o=this._slices?{sliceId:s.sliceId||0}:null,{data:m}=await this.request(n,{query:o,responseType:"array-buffer",signal:s.signal});if(!m)return null;const c=await this.decodePixelBlock(m,{width:a.tileInfo.size[0],height:a.tileInfo.size[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType}),h=a.blockBoundary[e];if("jpg"!==a.compression||i>h.minCol&&i<h.maxCol&&t>h.minRow&&t<h.maxRow)return c;const{origin:u,blockWidth:f,blockHeight:d}=a,{x:y,y:x}=this.getPyramidPixelSize(e),g=Math.round((l.xmin-u.x)/y)%f,v=Math.round((l.xmax-u.x)/y)%f,S=Math.round((u.y-l.ymax)/x)%d,w=Math.round((u.y-l.ymin)/x)%d,I=i===h.minCol?g:0,b=t===h.minRow?S:0,j=i===h.maxCol?v:f,T=t===h.maxRow?w:d;return M$1(c,{x:I,y:b},{width:j-I,height:T-b}),c}getSliceIndex(e){if(!this._slices||t$2(e)||0===e.length)return null;const t=e;for(let i=0;i<this._slices.length;i++){const e=this._slices[i].multidimensionalDefinition;if(e.length===t.length&&!e.some((e=>{const i=t.filter((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName))[0];if(!i)return !0;return (Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.statistics})),s=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),a=await Promise.all([i,s]);return a[0]&&a[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation;})),{statistics:a[0]||null,histograms:a[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,e$2(t.datumTransformation));if(null===i)return null;let s=0;const{maximumPyramidLevel:l}=this.rasterInfo.storageInfo;let r=l-s+this._levelOffset;const n=i.srcLocation;for(;r>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(r,i.row,i.col,t))break}catch{}if(r--,s++,i=this.identifyPixelLocation(n,s,e$2(t.datumTransformation)),null===i)return null}return -1===r||null==i?null:s}async _fetchRasterInfo(e){const t=this.sourceJSON,i=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),s=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),a=k.fromJSON(t.spatialReference||t.extent.spatialReference);if("Map"===this.tileType)return new l$1({width:i,height:s,bandCount:3,extent:M.fromJSON(t.extent),spatialReference:a,pixelSize:new j$3({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:a}),pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}});const{slice:l,signal:r}=e,n=!!t.hasRasterAttributeTable&&this.request(this.url+"/rasterAttributeTable",{query:{slice:l,f:"json"},signal:r}).then((e=>g$2.fromJSON(e.data))).catch((()=>null)),m=!!t.hasColormap&&this.request(this.url+"/colormap",{query:{slice:l,f:"json"},signal:r}).then((e=>{var t;return null==(t=e.data)?void 0:t.colormap})),c=!!t.hasHistograms&&this.request(this.url+"/histograms",{query:{slice:l,f:"json"},signal:r}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),h=this.request(this.url+"/keyProperties",{query:{f:"json"},signal:r}).then((e=>e.data)).catch((()=>{})),u=!!t.hasMultidimensions&&this._fetchMultidimensionalInfo(),f=!!t.hasMultidimensions&&this.request(this.url+"/slices",{query:{f:"json"},signal:r}).then((e=>e.data&&e.data.slices)).catch((()=>{}));return Promise.all([n,m,c,h,u,f]).then((e=>{let l=null;if(t.minValues&&t.minValues.length===t.bandCount){l=[];for(let e=0;e<t.minValues.length;e++)l.push({min:t.minValues[e],max:t.maxValues[e],avg:t.meanValues[e],stddev:t.stdvValues[e]});}return this._slices=e[5]||null,new l$1({width:i,height:s,bandCount:t.bandCount,extent:M.fromJSON(t.extent),spatialReference:a,pixelSize:new j$3({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:a}),pixelType:t.pixelType.toLowerCase(),statistics:l,attributeTable:e[0]||null,colormap:e[1]||null,histograms:e[2]||null,keyProperties:e[3]||{},multidimensionalInfo:e[4]||null})}))}async _fetchMultidimensionalInfo(e){var t;const i=await this.request(this.url+"/multidimensionalInfo",{query:{f:"json"},signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.multidimensionalInfo}));return null!=(t=i.variables)&&t.length&&i.variables.forEach((e=>{var t;null!=(t=e.statistics)&&t.length&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation;}));})),i}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0);}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;0===t.xmin&&360===t.xmax&&i.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new c$4,e.extent=e.transform.forwardTransform(t));}};e$1([d$3({type:String,json:{write:!0}})],S$1.prototype,"datasetFormat",void 0),e$1([d$3()],S$1.prototype,"tileType",void 0),S$1=e$1([i$2("esri.layers.support.rasterDatasets.ImageServerRaster")],S$1);const w$1=S$1;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const I=new Map;I.set("Int8","s8"),I.set("UInt8","u8"),I.set("Int16","s16"),I.set("UInt16","u16"),I.set("Int32","s32"),I.set("UInt32","u32"),I.set("Float32","f32"),I.set("Float64","f32"),I.set("Double64","f32");const b$1=new Map;b$1.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),b$1.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),b$1.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),b$1.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let w=class extends E$1{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF";}async open(t){var e;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const o=t?e$2(t.signal):null,i=await this.request(this.url,{responseType:"xml",signal:o}),{rasterInfo:a,files:n}=this._parseHeader(i.data);if(-1===(null==(e=this.ioConfig.skipExtensions)?void 0:e.indexOf("aux.xml"))){const e=await this._fetchAuxiliaryData(t);var l;if(null!=e)a.statistics=null!=(l=e.statistics)?l:a.statistics,a.histograms=e.histograms,e.histograms&&!r$1(a.statistics)&&(a.statistics=a$1(e.histograms));}this._set("rasterInfo",a),this._files=n;const f=await this.request(n.index,{responseType:"array-buffer",signal:o});this._storageIndex=this._parseIndex(f.data);const{blockWidth:c,blockHeight:p}=this.rasterInfo.storageInfo,m=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:u}=this.rasterInfo,d=[],y=this._getBandSegmentCount();let x=0,I=-1;for(;x<this._storageIndex.length;){I++;const t=Math.ceil(h/c/m**I)-1,e=Math.ceil(u/p/m**I)-1;x+=1*t*(1*e)*y*4,d.push({maxRow:e,maxCol:t,minCol:0,minRow:0});}this.rasterInfo.storageInfo.blockBoundary=d,I>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=I),this.updateTileInfo();}async fetchRawTile(t,e,r,o={}){const{blockWidth:i,blockHeight:n,blockBoundary:l}=this.rasterInfo.storageInfo,f=l[t];if(!f||f.maxRow<e||f.maxCol<r||f.minRow>e||f.minCol>r)return null;const{bandCount:c,pixelType:p}=this.rasterInfo,{ranges:m,actualTileWidth:h,actualTileHeight:u}=this._getTileLocation(t,e,r);if(!m||0===m.length)return null;if(0===m[0].from&&0===m[0].to){const t=new Uint8Array(i*n);return new u$2({width:i,height:n,pixels:null,mask:t,validPixelCount:0})}const{bandIds:g}=this.ioConfig,d=this._getBandSegmentCount(),y=[];let x=0;for(x=0;x<d;x++)(!g||g.indexOf[x]>-1)&&y.push(this.request(this._files.data,{range:{from:m[x].from,to:m[x].to},responseType:"array-buffer",signal:o.signal}));const I=await Promise.all(y),w=I.map((t=>t.data.byteLength)).reduce(((t,e)=>t+e)),A=new Uint8Array(w);let F=0;for(x=0;x<d;x++)A.set(new Uint8Array(I[x].data),F),F+=I[x].data.byteLength;const _=b$1.get(this.rasterInfo.storageInfo.compression).decoderFormat,M=await this.decodePixelBlock(A.buffer,{width:i,height:n,format:_,planes:(null==g?void 0:g.length)||c,pixelType:p});if(r$1(this.rasterInfo.noDataValue)&&"lerc"!==_&&!M.mask){const t=this.rasterInfo.noDataValue[0];if(null!=t){const e=M.width*M.height,r=new Uint8Array(e);if(Math.abs(t)>1e24)for(x=0;x<e;x++)Math.abs((M.pixels[0][x]-t)/t)>1e-6&&(r[x]=1);else for(x=0;x<e;x++)M.pixels[0][x]!==t&&(r[x]=1);M.mask=r;}}let j=0,R=0;if(h!==i||u!==n){let t=M.mask;if(t)for(x=0;x<n;x++)if(R=x*i,x<u)for(j=h;j<i;j++)t[R+j]=0;else for(j=0;j<i;j++)t[R+j]=0;else for(t=new Uint8Array(i*n),M.mask=t,x=0;x<u;x++)for(R=x*i,j=0;j<h;j++)t[R+j]=1;}return M}_parseIndex(t){if(t.byteLength%16>0)throw "invalid array buffer must be multiples of 16";let e,r,s,o,i,a;if(r$3){for(r=new Uint8Array(t),o=new ArrayBuffer(t.byteLength),s=new Uint8Array(o),i=0;i<t.byteLength/4;i++)for(a=0;a<4;a++)s[4*i+a]=r[4*i+3-a];e=new Uint32Array(o);}else e=new Uint32Array(t);return e}_getBandSegmentCount(){return b$1.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,r){const{blockWidth:s,blockHeight:o,pyramidScalingFactor:i}=this.rasterInfo.storageInfo,{width:a,height:n}=this.rasterInfo,l=this._getBandSegmentCount();let f,c,p,m=0,h=0;for(p=0;p<t;p++)h=i**p,f=Math.ceil(a/s/h),c=Math.ceil(n/o/h),m+=f*c;h=i**t,f=Math.ceil(a/s/h),c=Math.ceil(n/o/h),m+=e*f+r,m*=4*l;const u=this._storageIndex.subarray(m,m+4*l);let g=0,d=0;const y=[];for(let x=0;x<l;x++)g=u[4*x+0]*2**32+u[4*x+1],d=g+u[4*x+2]*2**32+u[4*x+3],y.push({from:g,to:d});return {ranges:y,actualTileWidth:r<f-1?s:Math.ceil(a/h)-s*(f-1),actualTileHeight:e<c-1?o:Math.ceil(n/h)-o*(c-1)}}_parseHeader(t$1){const r=e(t$1,"MRF_META/Raster");if(!r)throw new s$1("mrf:open","not a valid MRF format");const s=e(r,"Size"),o=parseInt(s.getAttribute("x"),10),i=parseInt(s.getAttribute("y"),10),a=parseInt(s.getAttribute("c"),10),f=(t(r,"Compression")||"none").toLowerCase();if(!b$1.has(f))throw new s$1("mrf:open","currently does not support compression "+f);const p=t(r,"DataType")||"UInt8",u=I.get(p);if(null==u)throw new s$1("mrf:open","currently does not support pixel type "+p);const g=e(r,"PageSize"),w=parseInt(g.getAttribute("x"),10),A=parseInt(g.getAttribute("y"),10),F=e(r,"DataValues");let _,M$1;F&&(M$1=F.getAttribute("NoData"),null!=M$1&&(_=M$1.trim().split(" ").map((t=>parseFloat(t)))));if(e(t$1,"MRF_META/CachedSource"))throw new s$1("mrf:open","currently does not support MRF referencing other data files");const j=e(t$1,"MRF_META/GeoTags"),R=e(j,"BoundingBox");if(null==R)throw new s$1("mrf:open","missing node MRF_META/GeoTags/BoundingBox");const T=parseFloat(R.getAttribute("minx")),S=parseFloat(R.getAttribute("miny")),k$1=parseFloat(R.getAttribute("maxx")),C=parseFloat(R.getAttribute("maxy")),B=t(j,"Projection")||"",U=t(t$1,"datafile"),v=t(t$1,"IndexFile");let E;if("LOCAL_CS[]"!==B)if(B.toLowerCase().startsWith("epsg:")){const t=Number(B.slice(5));isNaN(t)||0===t||(E=new k({wkid:t}));}else E=c$1(B);const L=new M(T,S,k$1,C);L.spatialReference=E;const O=e(t$1,"MRF_META/Rsets"),P=parseInt(O&&O.getAttribute("scale")||"2",10),D=new p$1({origin:new j$3({x:L.xmin,y:L.ymax,spatialReference:E}),blockWidth:w,blockHeight:A,pyramidBlockWidth:w,pyramidBlockHeight:A,compression:f,pyramidScalingFactor:P}),H=new j$3({x:(k$1-T)/o,y:(C-S)/i,spatialReference:E});return {rasterInfo:new l$1({width:o,height:i,extent:L,spatialReference:E,bandCount:a,pixelType:u,pixelSize:H,noDataValue:_,storageInfo:D}),files:{mrf:this.url,index:v||this.url.replace(".mrf",".idx"),data:U||this.url.replace(".mrf",b$1.get(f).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==t?void 0:t.signal});return d$1(e)}catch{return null}}};e$1([d$3()],w.prototype,"_files",void 0),e$1([d$3()],w.prototype,"_storageIndex",void 0),e$1([d$3({type:String,json:{write:!0}})],w.prototype,"datasetFormat",void 0),w=e$1([i$2("esri.layers.support.rasterIO.MRFRaster")],w);const A=w;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const b=function(e,t){const i=e.get(t);return i&&i.values},E=function(e,t){const i=e.get(t);return i&&i.values[0]};let S=class extends E$1{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF";}async open(e){var s,a,l;await this.init();const u=e?e$2(e.signal):null,{data:c}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:u});if(!c)throw new s$1("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:h,firstIFD:d,isBigTiff:y}=C$1(c),b=[];await this.readIFDs(b,c,h,d,0,y?8:4,u);const E=P$2(b),{width:S,height:v,tileWidth:F,tileHeight:R,planes:_,pixelType:k$1,compression:j,firstPyramidLevel:B,maximumPyramidLevel:D,pyramidBlockWidth:L,pyramidBlockHeight:z,tileBoundary:O,affine:P,metadata:H}=E,A=(null==(s=E.extent.spatialReference)?void 0:s.wkt)||(null==(a=E.extent.spatialReference)?void 0:a.wkid);let G=c$1(A),q=!1;null==G&&(q=!0,G=new k({wkid:3857}));const C=new M({...E.extent,spatialReference:G}),W=new j$3(C?{x:C.xmin,y:C.ymax,spatialReference:G}:{x:0,y:0}),U=new p$1({blockWidth:F,blockHeight:R,pyramidBlockWidth:L,pyramidBlockHeight:z,compression:j,origin:W,firstPyramidLevel:B,maximumPyramidLevel:D,blockBoundary:O}),Y=new j$3({x:(C.xmax-C.xmin)/S,y:(C.ymax-C.ymin)/v,spatialReference:G}),M$1=H?{BandProperties:H.bandProperties,DataType:H.dataType}:{},N=new l$1({width:S,height:v,bandCount:_,pixelType:k$1,compression:j,pixelSize:Y,storageInfo:U,spatialReference:G,isPseudoSpatialReference:q,keyProperties:M$1,extent:C,statistics:H?H.statistics:null});if(null!=P&&P.length&&(N.nativeExtent=new M({xmin:-.5,ymin:.5-v,xmax:S-.5,ymax:.5,spatialReference:G}),N.transform=new m$2({polynomialOrder:1,forwardCoefficients:[P[2]+P[0]/2,P[5]-P[3]/2,P[0],P[3],-P[1],-P[4]]}),N.extent=N.transform.forwardTransform(N.nativeExtent),N.pixelSize=new j$3({x:(C.xmax-C.xmin)/S,y:(C.ymax-C.ymin)/v,spatialReference:G}),U.origin.x=-.5,U.origin.y=.5),null==(l=this.ioConfig.skipExtensions)||!l.includes("aux.xml")){const t=await this._fetchAuxiliaryData(e);if(null!=t){var K;if(N.statistics=null!=(K=t.statistics)?K:N.statistics,N.histograms=t.histograms,t.histograms&&!r$1(N.statistics)&&(N.statistics=a$1(t.histograms)),t.transform&&!P){N.transform=t.transform,N.nativeExtent=N.extent;const e=N.transform.forwardTransform(N.nativeExtent);N.pixelSize=new j$3({x:(e.xmax-e.xmin)/S,y:(e.ymax-e.ymin)/v,spatialReference:G}),N.extent=e;}N.spatialReference||(N.spatialReference=t.spatialReference);}}if(this._set("rasterInfo",N),this._headerInfo={littleEndian:h,isBigTiff:y,ifds:b,...E},!this._headerInfo.isSupported)throw new s$1("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo();}async fetchRawTile(e,t,i,r={}){var s;if(null==(s=this._headerInfo)||!s.isSupported||this.isBlockOutside(e,t,i))return null;const a=this.getTileLocation(e,t,i);if(!a)return null;const{ranges:n,actualTileWidth:o,actualTileHeight:l,ifd:f}=a,u=n.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:r.signal}))),m=await Promise.all(u),p=m.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),c=1===m.length?m[0].data:new ArrayBuffer(p),h=[0],d=[0];if(m.length>1){const e=new Uint8Array(c);for(let t=0,i=0;t<m.length;t++){const r=m[t].data;e.set(new Uint8Array(r),i),h[t]=i,i+=r.byteLength,d[t]=r.byteLength;}}const{blockWidth:y,blockHeight:g}=this.getBlockWidthHeight(e),x=await this.decodePixelBlock(c,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:f,offsets:h,sizes:d},width:y,height:g,planes:null,pixelType:null});let T,I,w;if(o!==y||l!==g){let e=x.mask;if(e)for(T=0;T<g;T++)if(w=T*y,T<l)for(I=o;I<y;I++)e[w+I]=0;else for(I=0;I<y;I++)e[w+I]=0;else for(e=new Uint8Array(y*g),x.mask=e,T=0;T<l;T++)for(w=T*y,I=0;I<o;I++)e[w+I]=1;}return x}async readIFDs(e,t,i,r,s,a=4,n){if(!r)return null;if(r>=t.byteLength||r<0){t=(await this.request(this.url,{range:{from:r+s,to:r+s+this._bufferSize},responseType:"array-buffer",signal:n})).data,s=r+s,r=0;}const o=await this.readIFD(t,i,r,s,n$5.TIFF_TAGS,a,n);if(e.push(o.ifd),!o.nextIFD)return null;await this.readIFDs(e,t,i,o.nextIFD-s,s,a,n);}async readIFD(e,t,i,r,s=n$5.TIFF_TAGS,a=4,n){if(!e)return null;const o=N$2(e,t,i,r,s,a);if(o.success){const i=[];if(o.ifd.forEach((e=>{e.values||i.push(e);})),i.length>0){const s=i.map((e=>e.offlineOffsetSize)),a=Math.min.apply(null,s.map((e=>e[0])));if(Math.min.apply(null,s.map((e=>e[0]+e[1])))-a<=this._bufferSize){const{data:s}=await this.request(this.url,{range:{from:a,to:a+this._bufferSize},responseType:"array-buffer",signal:n});e=s,r=a,i.forEach((i=>D$1(e,t,i,r)));}}if(o.ifd.has("GEOKEYDIRECTORY")){const i=o.ifd.get("GEOKEYDIRECTORY"),s=i.values;if(s&&s.length>4){const a=s[0]+"."+s[1]+"."+s[2],o=await this.readIFD(e,t,i.valueOffset+6-r,r,n$5.GEO_KEYS,2,n);i.data=o.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[a]});}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==e.byteLength){const i=await this.request(this.url,{range:{from:r,to:r+o.requiredBufferSize+4},responseType:"array-buffer",signal:n});return (e=i.data).byteLength<o.requiredBufferSize?null:this.readIFD(e,t,0,r,n$5.TIFF_TAGS,4,n)}}getTileLocation(e,t,i){const{firstPyramidLevel:r,blockBoundary:s}=this.rasterInfo.storageInfo,a=0===e?0:e-(r-1),n=this._headerInfo.ifds[a];if(!n)return null;const o=O$2(n,this._headerInfo),l=b(n,"TILEOFFSETS");if(void 0===l)return null;const f=b(n,"TILEBYTECOUNTS"),{minRow:u,minCol:m,maxRow:p,maxCol:c}=s[a];if(t>p||i>c||t<u||i<m)return null;const h=E(n,"IMAGEWIDTH"),y=E(n,"IMAGELENGTH"),g=E(n,"TILEWIDTH"),x=E(n,"TILELENGTH"),T=o?this.rasterInfo.bandCount:1,I=T*t*(c+1)+i,w=[{from:l[I],to:l[I+T-1]+f[I+T-1]-1}];if(o){let e=!0;for(let t=0;t<T;t++)if(l[I+t]+f[I+t]!==l[I+t+1]){e=!1;break}if(!e)for(let t=0;t<T;t++)w[t]={from:l[I+t],to:l[I+t]+f[I+t]-1};}const S=l[I],v=f[I];if(null==S||null==v)return null;return {ranges:w,ifd:n,actualTileWidth:i===c?h%g:g,actualTileHeight:t===p?y%x:x}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return d$1(t)}catch{return null}}};e$1([d$3()],S.prototype,"_files",void 0),e$1([d$3()],S.prototype,"_headerInfo",void 0),e$1([d$3()],S.prototype,"_bufferSize",void 0),e$1([d$3({type:String,json:{write:!0}})],S.prototype,"datasetFormat",void 0),S=e$1([i$2("esri.layers.support.rasterDatasets.TIFFRaster")],S);const v=S;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const c=new Map;c.set("CRF",{desc:"Cloud Raster Format",constructor:I$1}),c.set("MRF",{desc:"Meta Raster Format",constructor:A}),c.set("TIFF",{desc:"GeoTIFF",constructor:v}),c.set("RasterTileServer",{desc:"Raster Tile Server",constructor:w$1}),c.set("JPG",{desc:"JPG Raster Format",constructor:y}),c.set("PNG",{desc:"PNG Raster Format",constructor:y}),c.set("GIF",{desc:"GIF Raster Format",constructor:y}),c.set("BMP",{desc:"BMP Raster Format",constructor:y});class n{static get supportedFormats(){const t=new Set;return c.forEach(((r,e)=>t.add(e))),t}static async open(r){const{url:e,ioConfig:s,sourceJSON:o}=r;let a=r.datasetFormat;null==a&&e.lastIndexOf(".")&&(a=e.slice(e.lastIndexOf(".")+1).toUpperCase()),"OVR"===a||"TIF"===a?a="TIFF":"JPG"!==a&&"JPEG"!==a&&"JFIF"!==a||(a="JPG"),e.toLowerCase().indexOf("/imageserver")>-1&&-1===e.toLowerCase().indexOf("/wcsserver")&&(a="RasterTileServer");const n={url:e,sourceJSON:o,datasetFormat:a,ioConfig:s||{bandIds:null,sampling:null}};let i,u;if(this.supportedFormats.has(a))return i=c.get(a).constructor,u=new i(n),await u.open({signal:r.signal}),u;if(a)throw new s$1("rasterfactory:open","not a supported format "+a);const l=Array.from(c.keys());let m=0;const F=function(){return a=l[m++],a?(i=c.get(a).constructor,u=new i(n),u.open({signal:r.signal}).then((()=>u)).catch((()=>F()))):null};return F()}static register(t,r,e){c.has(t.toUpperCase())||c.set(t.toUpperCase(),{desc:r,constructor:e});}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
let N=class extends(i$4(s$3(y$3(w$2(o$3(R(a$2(n$6(l$2(b$2)))))))))){constructor(...e){super(...e),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null;}normalizeCtorArgs(e,r){return "string"==typeof e?{url:e,...r}:e}load(e){const r=r$1(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(b$3).then((()=>this._openRaster(r)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var e,r;let t=[new y$4({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const o=null==(e=this.rasterInfo)||null==(r=e.attributeTable)?void 0:r.fields,i="Raster.";if(o){const e=o.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const r=e.clone();return r.name=i+e.name,r}));t=t.concat(e);}const s=this.rasterInfo.dataType;if(("vector-magdir"===s||"vector-uv"===s)&&r$1(this.rasterInfo.multidimensionalInfo)){var n;const e=null==(n=this.rasterInfo.multidimensionalInfo.variables[0].unit)?void 0:n.trim(),r="Magnitude"+(e?` (${e})`:"");t.push(new y$4({name:"Raster.Magnitude",alias:r,domain:null,editable:!1,type:"double"})),t.push(new y$4({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}));}return t}set renderer(e){this._set("renderer",e),this.updateRenderer();}readRenderer(e,r,o){const i=r&&r.layerDefinition&&r.layerDefinition.drawingInfo&&r.layerDefinition.drawingInfo.renderer,s=u$3(i,o)||void 0;if(null!=s)return s}createPopupTemplate(e){return a$3({fields:this.rasterFields,title:this.title},e)}write(e,r){const{raster:t}=this;if(this.loaded?"RasterTileServer"===t.datasetFormat&&("Raster"===t.tileType||"Map"===t.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,r);if(r&&r.messages){const e=`${r.origin}/${r.layerContainerType||"operational-layers"}`;r.messages.push(new s$1("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}));}return null}async _openRaster(e){this.raster?(this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url):this.raster=await n.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});const{rasterInfo:r}=this.raster;if(!r)throw new s$1("imagery-tile-layer:load","cannot load resources on "+this.url);this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON&&(this._set("version",this.sourceJSON.currentVersion),this._set("copyright",this.sourceJSON.copyrightText),this.sourceJSON.timeInfo&&this._set("timeInfo",v$4.fromJSON(this.sourceJSON.timeInfo))),null==this.title&&(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.watch("customParameters",(e=>this.raster.ioConfig.customFetchParameters=e));}};e$1([d$3({type:[S$5],json:{write:{overridePolicy(){var e;return {enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==(null==(e=this.bandIds)?void 0:e.join(","))}}}}})],N.prototype,"bandIds",void 0),e$1([d$3({json:{write:{overridePolicy(){return {enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),r$4(o$4)],N.prototype,"interpolation",void 0),e$1([d$3({json:{write:!0}})],N.prototype,"multidimensionalDefinition",void 0),e$1([d$3(c$5)],N.prototype,"legendEnabled",void 0),e$1([d$3({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],N.prototype,"isReference",void 0),e$1([d$3({type:["show","hide"]})],N.prototype,"listMode",void 0),e$1([d$3()],N.prototype,"sourceJSON",void 0),e$1([d$3({readOnly:!0})],N.prototype,"version",void 0),e$1([d$3()],N.prototype,"title",void 0),e$1([d$3({readOnly:!0,json:{read:!1}})],N.prototype,"type",void 0),e$1([d$3({type:["ArcGISTiledImageServiceLayer"]})],N.prototype,"operationalLayerType",void 0),e$1([d$3({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,r)=>!r.disablePopup},write:{target:"disablePopup",overridePolicy(){return {enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,r,t){r[t]=!e;}}}})],N.prototype,"popupEnabled",void 0),e$1([d$3({type:B$1,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return {enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],N.prototype,"popupTemplate",void 0),e$1([d$3({readOnly:!0})],N.prototype,"defaultPopupTemplate",null),e$1([d$3({readOnly:!0,type:[y$4]})],N.prototype,"fields",void 0),e$1([d$3({readOnly:!0,type:[y$4]})],N.prototype,"rasterFields",null),e$1([d$3({types:i$1,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){var e;const r="raster-stretch"===(null==(e=this.renderer)?void 0:e.type)&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return {enabled:!this.loaded||"Raster"===this.raster.tileType||!r}}},origins:{"web-scene":{types:l$3,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"animated-flow"!==e.type})}}}}})],N.prototype,"renderer",null),e$1([o$5("renderer")],N.prototype,"readRenderer",null),N=e$1([i$2("esri.layers.ImageryTileLayer")],N);const J=N;

export { J as default };
