import { n as n$2, j as e$1, y as y$1, ct as c$2, k as i$1, c9 as a$1, s as s$1, t, b3 as y$2 } from './_virtual_index-2683c931.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
var n$1;const p$1=n$2.getLogger("esri.layers.support.PixelBlock");let c$1=n$1=class extends a$1{constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.pixels=null,this.statistics=null;}static createEmptyBand(t,e){return new(n$1.getPixelArrayConstructor(t))(e)}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"u32":e=Uint32Array;break;case"f32":e=Float32Array;break;case"f64":e=Float64Array;break;case"c64":case"c128":case"unknown":e=Float32Array;}return e}castPixelType(t){if(!t)return "f32";let e=t.toLowerCase();return ["u1","u2","u4"].indexOf(e)>-1?e="u8":-1===["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].indexOf(e)&&(e="f32"),e}getPlaneCount(){return this.pixels&&this.pixels.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new s$1("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics||{minValue:null,maxValue:null});}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t);}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){this.statistics=this.pixels.map((t=>this._calculateBandStatistics(t,this.mask)));const t=this.mask;let e=0;if(t)for(let s=0;s<t.length;s++)t[s]&&e++;else e=this.width*this.height;this.validPixelCount=e;}clamp(t){if(!t||"f64"===t||"f32"===t)return;let e;switch(t){case"u8":e=[0,255];break;case"u16":e=[0,65535];break;case"u32":e=[0,4294967295];break;case"s8":e=[-128,127];break;case"s16":e=[-32768,32767];break;case"s32":e=[-2147483648,2147483647];break;default:e=[-34e38,34e38];}const[s,i]=e,r=this.pixels,l=this.width*this.height,a=r.length;let o,h,p;const c=[];for(let u=0;u<a;u++){p=n$1.createEmptyBand(t,l),o=r[u];for(let t=0;t<l;t++)h=o[t],p[t]=h>i?i:h<s?s:h;c.push(p);}this.pixels=c,this.pixelType=t;}extractBands(t$1){if(t(t$1)||0===t$1.length||null==this.pixels||0===this.pixels.length)return this;const e=this.pixels.length,i=t$1.some((t=>t>=this.pixels.length)),r=e===t$1.length&&!t$1.some(((t,e)=>t!==e));return i||r?this:new n$1({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t$1.map((t=>this.pixels[t])),statistics:this.statistics&&t$1.map((t=>this.statistics[t]))})}clone(){const t=new n$1({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let s;this.mask&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const i=n$1.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const e=this.pixels[0].slice;for(s=0;s<this.pixels.length;s++)t.pixels[s]=e?this.pixels[s].slice(0,this.pixels[s].length):new i(this.pixels[s]);}if(this.statistics)for(t.statistics=[],s=0;s<this.statistics.length;s++)t.statistics[s]=y$2(this.statistics[s]);return t}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:s,pixels:i}=this;if(!t||!i||!i.length)return void p$1.error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let r,l,a,o;r=l=a=i[0],i.length>=3?(l=i[1],a=i[2]):2===i.length&&(l=i[1]);const h=new Uint32Array(t),n=this.width*this.height;if(r.length===n)if(e&&e.length===n)if(s)for(o=0;o<n;o++)e[o]&&(h[o]=e[o]<<24|a[o]<<16|l[o]<<8|r[o]);else for(o=0;o<n;o++)e[o]&&(h[o]=255<<24|a[o]<<16|l[o]<<8|r[o]);else for(o=0;o<n;o++)h[o]=255<<24|a[o]<<16|l[o]<<8|r[o];else p$1.error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");}_fillFromNon8Bit(t){const{pixels:e,mask:s,statistics:i}=this;if(!t||!e||!e.length)return void p$1.error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const r=this.pixelType;let l=1,a=0,o=1;if(i&&i.length>0)a=i.map((t=>t.minValue)).reduce(((t,e)=>Math.min(t,e))),o=i.map((t=>t.maxValue-t.minValue)).reduce(((t,e)=>Math.max(t,e))),l=255/o;else {let t=255;"s8"===r?(a=-128,t=127):"u16"===r?t=65535:"s16"===r?(a=-32768,t=32767):"u32"===r?t=4294967295:"s32"===r?(a=-2147483648,t=2147483647):"f32"===r?(a=-34e38,t=34e38):"f64"===r&&(a=-Number.MAX_VALUE,t=Number.MAX_VALUE),l=255/(t-a);}const h=new Uint32Array(t),n=this.width*this.height;let c,u,m,x,f;if(c=u=m=e[0],c.length!==n)return p$1.error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(u=e[1],e.length>=3&&(m=e[2]),s&&s.length===n)for(x=0;x<n;x++)s[x]&&(h[x]=255<<24|(m[x]-a)*l<<16|(u[x]-a)*l<<8|(c[x]-a)*l);else for(x=0;x<n;x++)h[x]=255<<24|(m[x]-a)*l<<16|(u[x]-a)*l<<8|(c[x]-a)*l;else if(s&&s.length===n)for(x=0;x<n;x++)f=(c[x]-a)*l,s[x]&&(h[x]=255<<24|f<<16|f<<8|f);else for(x=0;x<n;x++)f=(c[x]-a)*l,h[x]=255<<24|f<<16|f<<8|f;}_fillFrom32Bit(t){const{pixels:e,mask:s}=this;if(!t||!e||!e.length)return p$1.error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let i,r,l,a;i=r=l=e[0],e.length>=3?(r=e[1],l=e[2]):2===e.length&&(r=e[1]);const o=this.width*this.height;if(i.length!==o)return p$1.error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let h=0;if(s&&s.length===o)for(a=0;a<o;a++)t[h++]=i[a],t[h++]=r[a],t[h++]=l[a],t[h++]=1&s[a];else for(a=0;a<o;a++)t[h++]=i[a],t[h++]=r[a],t[h++]=l[a],t[h++]=1;}_calculateBandStatistics(t,e){let s=1/0,i=-1/0;const r=t.length;let l,a=0;if(e)for(l=0;l<r;l++)e[l]&&(a=t[l],s=a<s?a:s,i=a>i?a:i);else for(l=0;l<r;l++)a=t[l],s=a<s?a:s,i=a>i?a:i;return {minValue:s,maxValue:i}}};e$1([y$1({json:{write:!0}})],c$1.prototype,"width",void 0),e$1([y$1({json:{write:!0}})],c$1.prototype,"height",void 0),e$1([y$1({json:{write:!0}})],c$1.prototype,"pixelType",void 0),e$1([c$2("pixelType")],c$1.prototype,"castPixelType",null),e$1([y$1({json:{write:!0}})],c$1.prototype,"validPixelCount",void 0),e$1([y$1({json:{write:!0}})],c$1.prototype,"mask",void 0),e$1([y$1({json:{write:!0}})],c$1.prototype,"maskIsAlpha",void 0),e$1([y$1({json:{write:!0}})],c$1.prototype,"pixels",void 0),e$1([y$1({json:{write:!0}})],c$1.prototype,"statistics",void 0),c$1=n$1=e$1([i$1("esri.layers.support.PixelBlock")],c$1);var u$1=c$1;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
const e=function(t){return t&&"esri.layers.support.PixelBlock"===t.declaredClass&&t.pixels&&t.pixels.length>0};function n(n,i){if(!i||!e(n))return n;const l=n.pixels.length;return i&&i.some((t=>t>=l))||1===l&&1===i.length&&0===i[0]?n:l!==i.length||i.some(((t,e)=>t!==e))?new u$1({pixelType:n.pixelType,width:n.width,height:n.height,mask:n.mask,validPixelCount:n.validPixelCount,maskIsAlpha:n.maskIsAlpha,pixels:i.map((t=>n.pixels[t])),statistics:n.statistics&&i.map((t=>n.statistics[t]))}):n}function i(t){if(!t)return;const e=t.colormap;if(!e||0===e.length)return;const n=e.sort(((t,e)=>t[0]-e[0]));let i=0;n[0][0]<0&&(i=n[0][0]);const l=Math.max(256,n[n.length-1][0]-i+1),r=new Uint8Array(4*l),o=[];let s,a=0,f=0;const h=5===n[0].length;if(l>65536)return n.forEach((t=>{o[t[0]-i]=h?t.slice(1):t.slice(1).concat([255]);})),{indexed2DColormap:o,offset:i,alphaSpecified:h};if(t.fillUnspecified)for(s=n[f],a=s[0]-i;a<l;a++)r[4*a]=s[1],r[4*a+1]=s[2],r[4*a+2]=s[3],r[4*a+3]=h?s[4]:255,a===s[0]-i&&(s=f===n.length-1?s:n[++f]);else for(a=0;a<n.length;a++)s=n[a],f=4*(s[0]-i),r[f]=s[1],r[f+1]=s[2],r[f+2]=s[3],r[f+3]=h?s[4]:255;return {indexedColormap:r,offset:i,alphaSpecified:h}}function l(t,n){if(!e(t))return t;if(!n&&(n.indexedColormap||n.indexed2DColormap))return t;const i=t.clone(),l=i.pixels;let r=i.mask;const o=i.width*i.height;if(1!==l.length)return t;const{indexedColormap:s,indexed2DColormap:a,offset:f,alphaSpecified:h}=n,u=s.length-1;let c=0;const x=l[0],p=new Uint8Array(x.length),m=new Uint8Array(x.length),d=new Uint8Array(x.length);let g,y=0;if(s)if(r)for(c=0;c<o;c++)r[c]&&(y=4*(x[c]-f),y<f||y>u?r[c]=0:(p[c]=s[y],m[c]=s[y+1],d[c]=s[y+2],r[c]=s[y+3]));else {for(r=new Uint8Array(o),c=0;c<o;c++)y=4*(x[c]-f),y<f||y>u?r[c]=0:(p[c]=s[y],m[c]=s[y+1],d[c]=s[y+2],r[c]=s[y+3]);i.mask=r;}else if(r)for(c=0;c<o;c++)r[c]&&(g=a[x[c]],p[c]=g[0],m[c]=g[1],d[c]=g[2],r[c]=g[3]);else {for(r=new Uint8Array(o),c=0;c<o;c++)g=a[x[c]],p[c]=g[0],m[c]=g[1],d[c]=g[2],r[c]=g[3];i.mask=r;}return i.pixels=[p,m,d],i.statistics=null,i.pixelType="u8",i.maskIsAlpha=h,i}function r(t){if(!e(t))return null;t.statistics||t.updateStatistics();const{pixels:n,mask:i,pixelType:l,statistics:r}=t,o=t.width*t.height,s=n.length;let a,f,h,u,c;const x=[],p=[];let m,d,g,y,w,M,k,A,U,C;const T=256;for(u=0;u<s;u++){if(m=new Uint32Array(T),g=n[u],"u8"===l)if(a=-.5,f=255.5,i)for(c=0;c<o;c++)i[c]&&m[g[c]]++;else for(c=0;c<o;c++)m[g[c]]++;else {if(a=r[u].minValue,f=r[u].maxValue,h=(f-a)/T,d=new Uint32Array(T+1),i)for(c=0;c<o;c++)i[c]&&d[Math.floor((g[c]-a)/h)]++;else for(c=0;c<o;c++)d[Math.floor((g[c]-a)/h)]++;for(c=0;c<255;c++)m[c]=d[c];m[255]=d[255]+d[256];}for(x.push({min:a,max:f,size:T,counts:m}),y=0,w=0,A=0,c=0;c<T;c++)y+=m[c],w+=c*m[c];for(U=w/y,c=0;c<T;c++)A+=m[c]*(c-U)**2;C=Math.sqrt(A/(y-1)),h=(f-a)/T,M=(U+.5)*h+a,k=C*h,p.push({min:a,max:f,avg:M,stddev:k});}return {statistics:p,histograms:x}}function o(t){const e=[];for(let n=0;n<t.length;n++){const{min:i,max:l,size:r,counts:o}=t[n];let s=0,a=0;for(let t=0;t<r;t++)s+=o[t],a+=t*o[t];const f=a/s;let h=0;for(let t=0;t<r;t++)h+=o[t]*(t-f)**2;const u=(l-i)/r,c=(f+.5)*u+i,x=Math.sqrt(h/(s-1))*u;e.push({min:i,max:l,avg:c,stddev:x});}return e}function s(t){const{minCutOff:e,maxCutOff:n,gamma:i,pixelType:l}=t,r=t.outMin||0,o=t.outMax||255;if(-1===["u8","u16","s8","s16"].indexOf(l))return null;const s=e.length;let f,h,u=0;"s8"===l?u=-127:"s16"===l&&(u=-32767);let c=256;["u16","s16"].indexOf(l)>-1&&(c=65536);const x=[],p=[],m=o-r;for(f=0;f<s;f++)p[f]=n[f]-e[f],x[f]=m/(n[f]-e[f]);const d=i&&i.length>=s,g=[];if(d)for(f=0;f<s;f++)i[f]>1?i[f]>2?g[f]=6.5+(i[f]-2)**2.5:g[f]=6.5+100*(2-i[f])**4:g[f]=1;let y;const w=[];let M,k,A;if(d)for(f=0;f<s;f++){for(A=[],h=0;h<c;h++)M=h+u,y=(M-e[f])/p[f],k=1,i[f]>1&&(k-=(1/m)**(y*g[f])),M<n[f]&&M>e[f]?A[h]=Math.floor(k*m*y**(1/i[f]))+r:M>=n[f]?A[h]=o:A[h]=r;w[f]=A;}else for(f=0;f<s;f++){for(A=[],h=0;h<c;h++)M=h+u,M<=e[f]?A[h]=r:M>=n[f]?A[h]=o:A[h]=Math.floor((M-e[f])/p[f]*m)+r;w[f]=A;}if(null!=t.contrastOffset){const e=a(t.contrastOffset,t.brightnessOffset);for(f=0;f<s;f++)for(A=w[f],h=0;h<c;h++)A[h]=e[A[h]];}return {lut:w,offset:u}}function a(t,e){const n=Math.min(Math.max(t,-100),100),i=Math.min(Math.max(e,-100),100),l=255,r=128;let o,s;const a=new Uint8Array(256);for(o=0;o<256;o++)n>0&&n<100?s=(200*o-100*l+2*l*i)/(2*(100-n))+r:n<=0&&n>-100?s=(200*o-100*l+2*l*i)*(100+n)/2e4+r:100===n?(s=200*o-100*l+(l+1)*(100-n)+2*l*i,s=s>0?l:0):-100===n&&(s=r),a[o]=s>l?l:s<0?0:s;return a}function f(t,e=256){e=Math.min(e,256);const{size:n,counts:i}=t,l=new Uint8Array(n),r=i.reduce(((t,n)=>t+n/e),0);let o=0,s=0,a=0,f=r;for(let h=0;h<n;h++)if(a+=i[h],!(h<n-1&&a+i[h+1]<f)){for(;o<e-1&&f<a;)o++,f+=r;for(let t=s;t<=h;t++)l[t]=o;s=h+1;}for(let h=s;h<n;h++)l[h]=e-1;return l}function h(t,n){if(!e(t))return null;const i=t.clone(),{pixels:l,mask:r}=i,{minCutOff:o,maxCutOff:s,gamma:a}=n,f=n.outMin||0,h=n.outMax||255,u=i.width*i.height,c=l.length;let x,p,m,d,g;const y=h-f,w=[],M=[];for(x=0;x<c;x++)M[x]=s[x]-o[x],w[x]=y/(s[x]-o[x]);const k=a&&a.length>=c,A=[];if(k)for(x=0;x<c;x++)a[x]>1?a[x]>2?A[x]=6.5+(a[x]-2)**2.5:A[x]=6.5+100*(2-a[x])**4:A[x]=1;if(k)if(null!=r){for(p=0;p<u;p++)if(r[p])for(x=0;x<c;x++)m=l[x][p],g=(m-o[x])/M[x],d=1,a[x]>1&&(d-=(1/y)**(g*A[x])),m<s[x]&&m>o[x]?l[x][p]=Math.floor(d*y*g**(1/a[x]))+f:m>=s[x]?l[x][p]=h:l[x][p]=f;}else for(p=0;p<u;p++)for(x=0;x<c;x++)m=l[x][p],g=(m-o[x])/M[x],d=1,a[x]>1&&(d-=(1/y)**(g*A[x])),m<s[x]&&m>o[x]?l[x][p]=Math.floor(d*y*g**(1/a[x]))+f:m>=s[x]?l[x][p]=h:l[x][p]=f;else if(null!=r){for(p=0;p<u;p++)if(r[p])for(x=0;x<c;x++)m=l[x][p],m<s[x]&&m>o[x]?l[x][p]=Math.floor((m-o[x])/M[x]*y)+f:m>=s[x]?l[x][p]=h:l[x][p]=f;}else for(p=0;p<u;p++)for(x=0;x<c;x++)m=l[x][p],m<s[x]&&m>o[x]?l[x][p]=Math.floor((m-o[x])/M[x]*y)+f:m>=s[x]?l[x][p]=h:l[x][p]=f;return i.pixelType="u8",i.updateStatistics(),i}function u(n,i){if(!e(n))return null;const{pixels:l,mask:r}=n,o=n.width*n.height,s=l.length;let a=i.lut;const{offset:f}=i;let h,u;a&&1===a[0].length&&(a=l.map((()=>a)));const c=[];let x,p,m;if(f)if(null==r)for(h=0;h<s;h++){for(x=l[h],p=a[h],m=new Uint8Array(o),u=0;u<o;u++)m[u]=p[x[u]-f];c.push(m);}else for(h=0;h<s;h++){for(x=l[h],p=a[h],m=new Uint8Array(o),u=0;u<o;u++)r[u]&&(m[u]=p[x[u]-f]);c.push(m);}else if(null==r)for(h=0;h<s;h++){for(x=l[h],p=a[h],m=new Uint8Array(o),u=0;u<o;u++)m[u]=p[x[u]];c.push(m);}else for(h=0;h<s;h++){for(x=l[h],p=a[h],m=new Uint8Array(o),u=0;u<o;u++)r[u]&&(m[u]=p[x[u]]);c.push(m);}const d=new u$1({width:n.width,height:n.height,pixels:c,mask:r,pixelType:"u8"});return d.updateStatistics(),d}function c(t,n){if(!e(t))return null;const i=t.clone(),{pixels:l}=i,r=i.width*i.height,o=n.length,s=Math.floor(o/2),a=n[Math.floor(s)],f=l[0];let h,u,c,x,p,m,d=!1;const g=new Uint8Array(r),y=new Uint8Array(r),w=new Uint8Array(r);let M=i.mask;const k=4===n[0].mappedColor.length;for(M||(M=new Uint8Array(r),M.fill(k?255:1),i.mask=M),p=0;p<r;p++)if(M[p]){for(h=f[p],d=!1,m=s,u=a,c=0,x=o-1;x-c>1;){if(h===u.value){d=!0;break}h>u.value?c=m:x=m,m=Math.floor((c+x)/2),u=n[Math.floor(m)];}d||(h===n[c].value?(u=n[c],d=!0):h===n[x].value?(u=n[x],d=!0):h<n[c].value?(d=!1,u=null):h>n[c].value&&(h<n[x].value?(u=n[c],d=!0):x===o-1?(d=!1,u=null):(u=n[x],d=!0))),d?(g[p]=u.mappedColor[0],y[p]=u.mappedColor[1],w[p]=u.mappedColor[2],M[p]=u.mappedColor[3]):g[p]=y[p]=w[p]=M[p]=0;}return i.pixels=[g,y,w],i.mask=M,i.pixelType="u8",i.maskIsAlpha=k,i}function x(t,e,n,i,l,r,o,s){return {xmin:l<=n*t?0:l<n*t+t?l-n*t:t,ymin:r<=i*e?0:r<i*e+e?r-i*e:e,xmax:l+o<=n*t?0:l+o<n*t+t?l+o-n*t:t,ymax:r+s<=i*e?0:r+s<i*e+e?r+s-i*e:e}}function p(t,e){if(!t||0===t.length)return null;const n=t.filter((t=>t.pixelBlock))[0];if(!n)return null;const i=(n.extent.xmax-n.extent.xmin)/n.pixelBlock.width,l=(n.extent.ymax-n.extent.ymin)/n.pixelBlock.height,r=.01*Math.min(i,l),o=t.sort(((t,e)=>Math.abs(t.extent.ymax-e.extent.ymax)>r?e.extent.ymax-t.extent.ymax:Math.abs(t.extent.xmin-e.extent.xmin)>r?t.extent.xmin-e.extent.xmin:0)),s=Math.min.apply(null,o.map((t=>t.extent.xmin))),a=Math.min.apply(null,o.map((t=>t.extent.ymin))),f=Math.max.apply(null,o.map((t=>t.extent.xmax))),h=Math.max.apply(null,o.map((t=>t.extent.ymax))),u={x:Math.round((e.xmin-s)/i),y:Math.round((h-e.ymax)/l)},c={width:Math.round((f-s)/i),height:Math.round((h-a)/l)},x={width:Math.round((e.xmax-e.xmin)/i),height:Math.round((e.ymax-e.ymin)/l)};if(Math.round(c.width/n.pixelBlock.width)*Math.round(c.height/n.pixelBlock.height)!==o.length||u.x<0||u.y<0||c.width<x.width||c.height<x.height)return null;return {extent:e,pixelBlock:d(o.map((t=>t.pixelBlock)),c,u,x)}}function m(t,e,n,i,l,r){const{width:o,height:s}=n.block,{x:a,y:f}=n.offset,{width:h,height:u}=n.mosaic,c=x(o,s,i,l,a,f,h,u);let p=0,m=0;if(r){const{halfWorldWidth:t}=r,e=o*r.resolutionX,n=r.startX+i*e,l=n+e;n<t&&l>t?m=r.rightPadding:n>=t&&(p=r.leftMargin-r.rightPadding,m=0);}if(c.xmax-=m,"number"!=typeof e)for(let x=c.ymin;x<c.ymax;x++){const n=(l*s+x-f)*h+(i*o-a)+p,r=x*o;for(let i=c.xmin;i<c.xmax;i++)t[n+i]=e[r+i];}else for(let x=c.ymin;x<c.ymax;x++){const n=(l*s+x-f)*h+(i*o-a)+p;for(let i=c.xmin;i<c.xmax;i++)t[n+i]=e;}}function d(n,i,l,r,o){const s=n.filter((t=>e(t)))[0];if(null==s)return null;const a=r?r.width:i.width,f=r?r.height:i.height,h=s.width,u=s.height,c=i.width/h,x=i.height/u,p={offset:l||{x:0,y:0},mosaic:r||i,block:{width:h,height:u}},d=s.pixelType,g=u$1.getPixelArrayConstructor(d),y=s.pixels.length,w=[];let M,k;for(let t=0;t<y;t++){k=new g(a*f);for(let i=0;i<x;i++)for(let l=0;l<c;l++){const r=n[i*c+l];e(r)&&(M=r.pixels[t],m(k,M,p,l,i,o));}w.push(k);}let A;if(n.some((t=>null==t||t.mask&&t.mask.length>0))){A=new Uint8Array(a*f);for(let t=0;t<x;t++)for(let e=0;e<c;e++){const i=n[t*c+e],l=i?i.mask:null;m(A,l||(i?1:0),p,e,t,o);}}const U=new u$1({width:a,height:f,pixels:w,pixelType:d,mask:A});return U.updateStatistics(),U}function g(t,n,i){if(!e(t))return null;const{width:l,height:r}=t,o=n.x,s=n.y,a=i.width+o,f=i.height+s;if(o<0||s<0||a>l||f>r)return t;if(0===o&&0===s&&a===l&&f===r)return t;t.mask||(t.mask=new Uint8Array(l*r));const h=t.mask;for(let e=0;e<r;e++){const t=e*l;for(let n=0;n<l;n++)h[t+n]=e<s||e>=f||n<o||n>=a?0:1;}return t.updateStatistics(),t}function y(t){if(!e(t))return null;const n=t.clone(),{width:i,height:l,pixels:r,mask:o}=t,s=r[0],a=n.pixels[0];for(let e=2;e<l-1;e++){const t=new Map;for(let l=e-2;l<e+2;l++)for(let e=0;e<4;e++){const n=l*i+e;k(t,s[n],o?o[n]:1);}a[e*i]=w(t),a[e*i+1]=a[e*i+2]=a[e*i];let n=3;for(;n<i-1;n++){let l=(e-2)*i+n+1;k(t,s[l],o?o[l]:1),l=(e-1)*i+n+1,k(t,s[l],o?o[l]:1),l=e*i+n+1,k(t,s[l],o?o[l]:1),l=(e+1)*i+n+1,k(t,s[l],o?o[l]:1),l=(e-2)*i+n-3,M(t,s[l],o?o[l]:1),l=(e-1)*i+n-3,M(t,s[l],o?o[l]:1),l=e*i+n-3,M(t,s[l],o?o[l]:1),l=(e+1)*i+n-3,M(t,s[l],o?o[l]:1),a[e*i+n]=w(t);}a[e*i+n+1]=a[e*i+n];}for(let e=0;e<i;e++)a[e]=a[i+e]=a[2*i+e],a[(l-1)*i+e]=a[(l-2)*i+e];return n.updateStatistics(),n}function w(t){if(0===t.size)return 0;let e=0,n=-1,i=0;const l=t.keys();let r=l.next();for(;!r.done;)i=t.get(r.value),i>e&&(n=r.value,e=i),r=l.next();return n}function M(t,e,n){if(0===n)return;const i=t.get(e);1===i?t.delete(e):t.set(e,i-1);}function k(t,e,n){0!==n&&t.set(e,t.has(e)?t.get(e)+1:1);}function A(n,i,l){let{x:r,y:o}=i;const{width:s,height:a}=l;if(0===r&&0===o&&a===n.height&&s===n.width)return n;const{width:f,height:h}=n,u=Math.max(0,o),c=Math.max(0,r),x=Math.min(r+s,f),p=Math.min(o+a,h);if(x<0||p<0||!e(n))return null;r=Math.max(0,-r),o=Math.max(0,-o);const{pixels:m,mask:d}=n,g=s*a,y=m.length,w=[];for(let e=0;e<y;e++){const i=m[e],l=u$1.createEmptyBand(n.pixelType,g);for(let t=u;t<p;t++){const e=t*f;let n=(t+o-u)*s+r;for(let t=c;t<x;t++)l[n++]=i[e+t];}w.push(l);}const M=new Uint8Array(g);for(let t=u;t<p;t++){const e=t*f;let n=(t+o-u)*s+r;for(let t=c;t<x;t++)M[n++]=d?d[e+t]:1;}const k=new u$1({width:l.width,height:l.height,pixelType:n.pixelType,pixels:w,mask:M});return k.updateStatistics(),k}function U(n,i=!0){if(!e(n))return null;const{pixels:l,width:r,height:o,mask:s,pixelType:a}=n,f=[],h=Math.round(r/2),u=Math.round(o/2),c=o-1,x=r-1;for(let e=0;e<l.length;e++){const n=l[e],s=u$1.createEmptyBand(a,h*u);let p=0;for(let t=0;t<o;t+=2)for(let e=0;e<r;e+=2){const l=n[t*r+e];if(i){const i=e===x?l:n[t*r+e+1],o=t===c?l:n[t*r+e+r],a=e===x?o:t===c?i:n[t*r+e+r+1];s[p++]=(l+i+o+a)/4;}else s[p++]=l;}f.push(s);}let p=null;if(s){p=new Uint8Array(h*u);let t=0;for(let e=0;e<o;e+=2)for(let n=0;n<r;n+=2){const l=s[e*r+n];if(i){const i=n===x?l:s[e*r+n+1],o=e===c?l:s[e*r+n+r],a=n===x?o:e===c?i:s[e*r+n+r+1];p[t++]=l*i*o*a?1:0;}else p[t++]=l;}}return new u$1({width:h,height:u,pixelType:a,pixels:f,mask:p})}function C(t,n,i){if(!e(t))return null;const{width:l,height:r}=n;let{width:o,height:s}=t;const a=new Map,f={x:0,y:0},h=null==i?1:1+i;let u=t;for(let e=0;e<h;e++){const t=Math.ceil(o/l),i=Math.ceil(s/r);for(let o=0;o<i;o++){f.y=o*r;for(let i=0;i<t;i++){f.x=i*l;const t=A(u,f,n);a.set(`${e}/${o}/${i}`,t);}}e<h-1&&(u=U(u)),o=Math.round(o/2),s=Math.round(s/2);}return a}function T(n,i,l,r,o="nearest"){if(!e(n))return null;"majority"===o&&(n=y(n));const{pixels:s,mask:a,pixelType:f}=n,h=n.width,u=n.height,c=u$1.getPixelArrayConstructor(f),x=s.length,{width:p,height:m}=i,d=r.cols,g=r.rows,w=Math.ceil(p/d),M=Math.ceil(m/g);let k,A,U,C,T,v,B,S=!1;for(let t=0;t<l.length;t+=3)-1===l[t]&&-1===l[t+1]&&-1===l[t+2]&&(S=!0);const O=new Float32Array(p*m),P=new Float32Array(p*m);let b,z,I=0;const j="majority"===o?0:.5;for(let t=0;t<M;t++)for(let e=0;e<w;e++){k=12*(t*w+e),A=l[k],U=l[k+1],C=l[k+2],T=l[k+3],v=l[k+4],B=l[k+5];for(let n=0;n<g;n++){I=(t*g+n)*p+e*d,z=(n+.5)/g;for(let t=0;t<n;t++)b=(t+.5)/d,O[I+t]=Math.round((A*b+U*z+C)*h-j),P[I+t]=Math.round((T*b+v*z+B)*u-j);}k+=6,A=l[k],U=l[k+1],C=l[k+2],T=l[k+3],v=l[k+4],B=l[k+5];for(let n=0;n<g;n++){I=(t*g+n)*p+e*d,z=(n+.5)/g;for(let t=n;t<d;t++)b=(t+.5)/d,O[I+t]=Math.round((A*b+U*z+C)*h-j),P[I+t]=Math.round((T*b+v*z+B)*u-j);}}const D=(t,e)=>{for(let n=0;n<m;n++){k=n*p;for(let n=0;n<p;n++)O[k]<0||P[k]<0?t[k]=0:t[k]=e[O[k]+P[k]*h],k++;}},E=[];let $;for(let t=0;t<x;t++)$=new c(p*m),D($,s[t]),E.push($);const q=new u$1({width:p,height:m,pixelType:f,pixels:E});if(a)q.mask=new Uint8Array(p*m),D(q.mask,a);else if(S){q.mask=new Uint8Array(p*m);for(let t=0;t<p*m;t++)q.mask[t]=O[t]<0||P[t]<0?0:1;}return q.updateStatistics(),q}

export { C, T, u as a, c, d, f, g, h, i, l, n, o, p, r, s, u$1 as u };
