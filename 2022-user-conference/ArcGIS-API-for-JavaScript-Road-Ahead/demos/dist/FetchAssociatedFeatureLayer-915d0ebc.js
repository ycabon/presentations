import { t, m as r, U, mb as s, c1 as w, a5 as Ze, a7 as x, a8 as j } from './_virtual_index-1ea2035a.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
class l{constructor(t,r,e,a){this._parsedUrl=t,this._portalItem=r,this._apiKey=e,this.signal=a,this._rootDocument=null;const i=this._parsedUrl?.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);i&&(this._urlParts={root:i[1],layerId:parseInt(i[2],10)});}async fetch(){if(!this._urlParts)return null;const t$1=this._portalItem??await this._portalItemFromServiceItemId();if(t(t$1))return this._loadFromUrl();const r=await this._findAndLoadRelatedPortalItem(t$1);return t(r)?null:this._loadFeatureLayerFromPortalItem(r)}async fetchPortalItem(){if(!this._urlParts)return null;const t$1=this._portalItem??await this._portalItemFromServiceItemId();return t(t$1)?null:this._findAndLoadRelatedPortalItem(t$1)}async _fetchRootDocument(){if(r(this._rootDocument))return this._rootDocument;if(t(this._urlParts))return this._rootDocument={},{};const t$1={query:{f:"json",token:this._apiKey},responseType:"json",signal:this.signal},i=`${this._urlParts.root}/SceneServer`;try{const e=await U(i,t$1);this._rootDocument=e.data;}catch{this._rootDocument={};}return this._rootDocument}async _fetchServiceOwningPortalUrl(){const e=this._parsedUrl?.path,a=e?s?.findServerInfo(e):null;if(a?.owningSystemUrl)return a.owningSystemUrl;const s$1=e?e.replace(/(.*\/rest)\/.*/i,"$1")+"/info":null;try{const t=(await U(s$1,{query:{f:"json"},responseType:"json",signal:this.signal})).data.owningSystemUrl;if(t)return t}catch(n){w(n);}return null}async _findAndLoadRelatedPortalItem(t){try{return (await t.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:this.signal})).find((t=>"Feature Service"===t.type))||null}catch(r){return w(r),null}}async _loadFeatureLayerFromPortalItem(t){await t.load({signal:this.signal});const r=await this._findMatchingAssociatedSublayerUrl(t.url??"");return new Ze({url:r,portalItem:t}).load({signal:this.signal})}async _loadFromUrl(){const t=await this._findMatchingAssociatedSublayerUrl(`${this._urlParts?.root}/FeatureServer`);return new Ze({url:t}).load({signal:this.signal})}async _findMatchingAssociatedSublayerUrl(t){const e=t.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i,"$1"),a={query:{f:"json"},responseType:"json",authMode:"no-prompt",signal:this.signal},i=this._urlParts?.layerId,s=this._fetchRootDocument(),n=U(e,a),[o,l]=await Promise.all([n,s]),c=l&&l.layers,u=o.data&&o.data.layers;if(!Array.isArray(u))throw new Error("expected layers array");if(Array.isArray(c))for(let r=0;r<Math.min(c.length,u.length);r++){if(c[r].id===i)return `${e}/${u[r].id}`}else if(null!=i&&i<u.length)return `${e}/${u[i].id}`;throw new Error("could not find matching associated sublayer")}async _portalItemFromServiceItemId(){const t=(await this._fetchRootDocument()).serviceItemId;if(!t)return null;const r$1=new x({id:t,apiKey:this._apiKey}),e=await this._fetchServiceOwningPortalUrl();r(e)&&(r$1.portal=new j({url:e}));try{return r$1.load({signal:this.signal})}catch(s){return w(s),null}}}

export { l };
