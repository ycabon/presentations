import { mu as n, mw as p, my as c, mD as v, mv as t, mz as O, mq as Ut, m as r, c1 as w$1, U, ne as G, aD as s, u as e, y, mH as o, w as w$2, mW as j, nf as c$1, mY as f, z as n$1, ng as a, et as m, nh as n$2, ep as y$1, lY as S, eb as b } from './_virtual_index-1ea2035a.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
const L=["atom","xml"],R={base:a,key:"type",typeMap:{"simple-line":m},errorContext:"symbol"},k={base:a,key:"type",typeMap:{"picture-marker":n$2,"simple-marker":y$1},errorContext:"symbol"},_={base:a,key:"type",typeMap:{"simple-fill":S},errorContext:"symbol"};let w=class extends(n(p(c(v(t(O(b))))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss";}normalizeCtorArgs(e,o){return "string"==typeof e?{url:e,...o}:e}readFeatureCollections(e,o){return o.featureCollection.layers.forEach((e=>{const o=e.layerDefinition.drawingInfo.renderer.symbol;o&&"esriSFS"===o.type&&o.outline?.style.includes("esriSFS")&&(o.outline.style="esriSLSSolid");})),o.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?Ut(this.url,L)||"GeoRSS":e||""}set title(e){this._set("title",e);}load(e){const o=r(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(w$1).then((()=>this._fetchService(o))).then((e=>{this.read(e,{origin:"service"});}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const t=this.spatialReference,{data:s$1}=await U(s.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:G(t)?void 0:t.wkid??JSON.stringify(t)},signal:e});return s$1}_hasGeometry(e){return this.featureCollections?.some((o=>o.featureSet?.geometryType===e&&o.featureSet.features?.length>0))??!1}};e([y()],w.prototype,"description",void 0),e([y()],w.prototype,"featureCollections",void 0),e([o("service","featureCollections",["featureCollection.layers"])],w.prototype,"readFeatureCollections",null),e([y({type:w$2,json:{name:"lookAtExtent"}})],w.prototype,"fullExtent",void 0),e([y(j)],w.prototype,"id",void 0),e([y(c$1)],w.prototype,"legendEnabled",void 0),e([y({types:R,json:{write:!0}})],w.prototype,"lineSymbol",void 0),e([y({type:["show","hide"]})],w.prototype,"listMode",void 0),e([y({types:k,json:{write:!0}})],w.prototype,"pointSymbol",void 0),e([y({types:_,json:{write:!0}})],w.prototype,"polygonSymbol",void 0),e([y({type:["GeoRSS"]})],w.prototype,"operationalLayerType",void 0),e([y(f)],w.prototype,"url",void 0),e([y({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],w.prototype,"title",null),e([y({readOnly:!0,json:{read:!1},value:"geo-rss"})],w.prototype,"type",void 0),w=e([n$1("esri.layers.GeoRSSLayer")],w);const F=w;

export { F as default };
