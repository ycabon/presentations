import { C as s, a as e$1, d as d$2, jZ as f$2, n as n$2, od as S$2, O as t$2, G as r$1, aM as R$2, ji as S$3, L as L$1, iw as m$1, i as l$2, s as s$1, e as e$2, eP as w, aw as b$1, o as v$1, ba as k$3, jg as x$2, cx as E$1, S as has, W as a, m as j, ne as a$1, nf as t$3, jV as c$4, jW as w$1, nJ as o$3, nL as a$2, ng as n$6, jX as O$1, ij as b$3, bb as w$2, ld as y$2, nj as d$5, l as l$4, lv as T$2, jQ as r$5, nF as c$5, jj as J$1, iA as o$5 } from './_virtual_index-64b818a8.js';
import { p, l as l$1, b as i$1, t as te, d as o$2, I as I$3, B, k as k$1, c as n$3, e as m$3, r as r$2, s as s$2, m as m$8, u as u$3, o as o$4, a as i$4 } from './fetchRasterInfo-b1764849.js';
import { d as d$3, f as f$3, m as m$4, a as f$4 } from './dataUtils-7eaa3915.js';
import { T, O, p as p$2, r as r$3, l as l$3, m as m$5, c as c$2, S as S$4, a as r$4, N as N$1, b as b$2, n as n$5, k as k$4, x as x$3, D as D$1 } from './RasterSymbolizer-6f387eb1.js';
import { i as i$2, m as m$2, x as x$1, d as d$4, h as h$1 } from './RawBlockCache-8b40176f.js';
import { p as p$1, T as T$1, C, A as A$1, m as m$7, u as u$2 } from './pixelUtils-d970883c.js';
import { k as k$2, X, _, t as te$1, e as ee, D, F as F$2, V, H, v as v$2 } from './rasterProjectionHelper-b669eeb7.js';
import { f as f$5, i as i$3, m as m$6, c as c$3 } from './utils-8dee73ad.js';
import { n as n$4, z } from './TilemapCache-18a75727.js';
import './colorUtils-d9f4d315.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
const R$1=s.getLogger("esri.layers.mixins.ImageryTileMixin"),v=i=>{let v=class extends i{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalDefinition=null,this.raster=null,this.sourceJSON=null,this.symbolizer=null;}get fullExtent(){return this.rasterInfo?.extent}get rasterInfo(){return this.raster?.rasterInfo}get spatialReference(){return this.rasterInfo?.spatialReference}get tileInfo(){return this.rasterInfo?.storageInfo.tileInfo}set url(e){this._set("url",S$2(e,R$1));}set renderer(e){this._set("renderer",e),this.updateRenderer();}async convertVectorFieldData(e,t){if(t$2(e))return null;const r=this._rasterJobHandler.instance,i=this.rasterInfo.dataType;return r?r.convertVectorFieldData({pixelBlock:e,dataType:i},t):d$3(e,i)}async createFlowMesh(e,t){const r=this._rasterJobHandler.instance;return r?r.createFlowMesh(e,t):f$3(e.meshType,e.simulationSettings,e.flowData,r$1(t.signal)?t.signal:(new AbortController).signal)}normalizeRasterFetchOptions(e){const{multidimensionalInfo:t}=this.rasterInfo;if(t$2(t))return e;let r=e.multidimensionalDefinition||this.multidimensionalDefinition;!t$2(r)&&r.length||(r=i$1(this.raster.rasterInfo));const i=e.timeExtent||this.timeExtent;if(r$1(r)&&r$1(i)&&(r$1(i.start)||r$1(i.end))){r=r.map((e=>e.clone()));const o=t.variables.find((({name:e})=>e===r[0].variableName))?.dimensions?.find((({name:e})=>"StdTime"===e)),a=r.find((({dimensionName:e})=>"StdTime"===e));if(!o||!a)return {...e,multidimensionalDefinition:null};const{start:l,end:m}=i,d=t$2(l)?null:l.getTime(),u=t$2(m)?null:m.getTime(),h=d??u,p=u??d;if(r$1(o.values)){const e=o.values.filter((e=>{if(Array.isArray(e)){if(h===p)return e[0]<=h&&e[1]>=h;const t=e[0]<=h&&e[1]>h||e[0]<p&&e[1]>=p,r=e[0]>=h&&e[1]<=p||e[0]<h&&e[1]>p;return t||r}return h===p?e===h:e>=h&&e<=p}));if(e.length){const t=e.sort(((e,t)=>{if(h===p)return (e[0]??e)-(t[0]??t);return Math.abs((e[1]??e)-p)-Math.abs((t[1]??t)-p)}))[0];a.values=[t];}else r=null;}else if(o.hasRegularIntervals&&o.extent){const[e,t]=o.extent;h>t||p<e?r=null:a.values=h===p?[h]:[Math.max(e,h),Math.min(t,p)];}}return {...e,multidimensionalDefinition:r}}async updateRenderer(){if(!this.loaded)return;if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const e=this._rasterJobHandler.instance;e&&(this.symbolizer.rendererJSON=te(this.renderer.toJSON()),this.symbolizer.bind(),await e.updateSymbolizer(this.symbolizer),this._cachedRendererJson=this.renderer.toJSON());}async applyRenderer(e,t){const r=e&&e.pixelBlock;if(!(r$1(r)&&r.pixels&&r.pixels.length>0))return null;let i;await this.updateRenderer();const s=this._rasterJobHandler.instance,{bandIds:o}=this;return i=s?await s.symbolize({...e,simpleStretchParams:t,bandIds:o}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:o}),i}getTileUrl(e,t,r){return "RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${r}`:""}getCompatibleTileInfo(e,t,r=!1){if(!this.loaded||t$2(t))return null;if(r&&e.equals(this.spatialReference))return this.tileInfo;const i=R$2(e);return S$3.create({size:256,spatialReference:e,origin:i?{x:i.origin[0],y:i.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,i,o={}){if(o.requestAsImageElement){const s=this.getTileUrl(e,t,i);return L$1(s,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:o.signal}).then((e=>e.data))}if(r$1(this.rasterInfo.multidimensionalInfo)&&(o=this.normalizeRasterFetchOptions(o),t$2(o.multidimensionalDefinition))){const r=o.tileInfo||this.rasterInfo.storageInfo.tileInfo;return {extent:this.raster.getTileExtentFromTileInfo(e,t,i,r),pixelBlock:null}}return await this._initJobHandler(),"raster-shaded-relief"===this.renderer.type&&(o={...o,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,i,o)}async fetchPixels(e,t,r,i={}){return r$1(this.rasterInfo.multidimensionalInfo)&&(i=this.normalizeRasterFetchOptions(i),t$2(i.multidimensionalDefinition))?{extent:e,pixelBlock:null}:(await this._initJobHandler(),this.raster.fetchPixels(e,t,r,i))}async identify(e,t={}){if(r$1(this.rasterInfo.multidimensionalInfo)){if(!(this.rasterInfo.hasMultidimensionalTranspose&&!!(o$2(t.multidimensionalDefinition)||t.transposedVariableName||t.timeExtent))&&(t=this.normalizeRasterFetchOptions(t),t$2(t.multidimensionalDefinition)))return {location:e,value:null}}return this.raster.identify(e,t)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++;}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler();}hasStandardTime(){const e=this.rasterInfo.multidimensionalInfo;if(t$2(e)||"standard-time"!==this.rasterInfo.dataType)return !1;const t=this.multidimensionalDefinition[0]?.variableName;return e.variables.some((e=>e.name===t&&e.dimensions.some((e=>"StdTime"===e.name))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=i$1(this.raster.rasterInfo)),this._configDefaultRenderer();}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new n$3;return this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,this.renderer&&this.updateRenderer();})).catch((()=>null)),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this.raster.rasterJobHandler=null,this._cachedRendererJson=null;}_configDefaultInterpolation(){if(null==this.interpolation){const e=I$3(this.rasterInfo,this.raster.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",e);}}_configDefaultRenderer(){const e=this.raster.rasterInfo;if(this.bandIds||(this.bandIds=B(e)),!this.renderer){const t=k$1(e,{bandIds:this.bandIds,variableName:r$1(this.multidimensionalDefinition)?this.multidimensionalDefinition[0]?.variableName:null});"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===t.type&&(e.statistics?.[0].max>1e24||e.statistics?.[0].min<-1e24)&&(t.dynamicRangeAdjustment=!0,t.statistics=null,"none"===t.stretchType&&(t.stretchType="min-max")),this.renderer=t;}this.symbolizer?(this.symbolizer.rendererJSON=te(this.renderer.toJSON()),this.symbolizer.rasterInfo=e):this.symbolizer=new T({rendererJSON:this.renderer.toJSON(),rasterInfo:e});const t=this.symbolizer.bind();t.success||R$1.warn("imagery-tile-mixin",t.error||"The given renderer is not supported by the layer.");}};return e$1([d$2()],v.prototype,"_cachedRendererJson",void 0),e$1([d$2()],v.prototype,"_compatibleFullExtent",void 0),e$1([d$2()],v.prototype,"_rasterJobHandler",void 0),e$1([d$2()],v.prototype,"bandIds",void 0),e$1([d$2({json:{origins:{service:{read:{source:"copyrightText"}}}}})],v.prototype,"copyright",void 0),e$1([d$2({json:{read:!1}})],v.prototype,"fullExtent",null),e$1([d$2()],v.prototype,"interpolation",void 0),e$1([d$2()],v.prototype,"ioConfig",void 0),e$1([d$2({type:[p]})],v.prototype,"multidimensionalDefinition",void 0),e$1([d$2()],v.prototype,"raster",void 0),e$1([d$2()],v.prototype,"rasterInfo",null),e$1([d$2()],v.prototype,"sourceJSON",void 0),e$1([d$2({json:{read:!1}})],v.prototype,"spatialReference",null),e$1([d$2({json:{read:!1}})],v.prototype,"tileInfo",null),e$1([d$2(f$2)],v.prototype,"url",null),e$1([d$2({types:l$1})],v.prototype,"renderer",null),e$1([d$2()],v.prototype,"symbolizer",void 0),v=e$1([n$2("esri.layers.ImageryTileMixin")],v),v};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
const q=8;let G=class extends(m$1(l$2)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"};}async init(){const t=k$2();this.addResolvingPromise(t),await this.when();}normalizeCtorArgs(t){return t&&t.ioConfig&&(t={...t,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:S$3.create(),...t.ioConfig}}),t}get _isGlobalWrappableSource(){const{rasterInfo:t}=this,e=X(t.spatialReference);return r$1(e)&&t.extent.width>=e/2}set url(t){this._set("url",S$2(t,s.getLogger(this.declaredClass)));}async open(t){throw new s$1("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(t,e,i,o={}){const r=o.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(t,e,i,r);return this.fetchPixels(n,r.size[0],r.size[1],o)}async identify(t,e={}){const{multidimensionalDefinition:i,timeExtent:o}=e,{hasMultidimensionalTranspose:r,multidimensionalInfo:l}=this.rasterInfo;let{transposedVariableName:c}=e;const m=r$1(l)&&r&&(null!=o||o$2(i));if(m&&!c){c=r$1(i)&&i.length>0?i[0].variableName:l.variables[0].name,e={...e,transposedVariableName:c};}e=this._getRequestOptionsWithSliceId(e);const{spatialReference:f,extent:h}=this.rasterInfo,{datumTransformation:u}=e;let p=_(t,f,u);if(!h.intersects(p))return {location:p,value:null};if(r$1(this.rasterInfo.transform)){const t=this.rasterInfo.transform.inverseTransform(p);if(!this.rasterInfo.nativeExtent.intersects(t))return {location:t,value:null};p=t;}let d=0;const g=c&&r$1(l)&&this.rasterInfo.hasMultidimensionalTranspose;if(!g)if(e.srcResolution){d=te$1(e.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel;}else if(d=await this.computeBestPyramidLevelForLocation(t,e),null==d)return {location:p,value:null};const y=this.identifyPixelLocation(p,d,null,g);if(null===y)return {location:p,value:null};const{row:I,col:b,rowOffset:v,colOffset:S,blockWidth:T}=y,B=c??e$2(e.sliceId),P=i$2(this.url,B),W=`${d}/${I}/${b}`;let M=m$2(P,null,W);t$2(M)&&(M=this.fetchRawTile(d,I,b,e),x$1(P,null,W,M));const j=await M;if(t$2(j)||!j.pixels?.length)return {location:p,value:null};const H=v*T+S;return this._processIdentifyResult(j,{srcLocation:p,position:H,pyramidLevel:d,useTransposedTile:g,requestSomeSlices:m,identifyOptions:e})}async fetchPixels(t,e,i,o={}){if(t=ee(t),(o=this._getRequestOptionsWithSliceId(o)).requestRawData)return this._fetchPixels(t,e,i,o);const r=X(t.spatialReference),n=D(t);if(t$2(r)||0===n||1===n&&this._isGlobalWrappableSource)return this._fetchPixels(t,e,i,o);if(n>=3)return {extent:t,pixelBlock:null};const s=[],{xmin:l,xmax:c}=t,m=Math.round(r/(c-l)*e),f=m-Math.round((r/2-l)/(c-l)*e);let h=0;const u=[];for(let a=0;a<=n;a++){const p=new w({xmin:0===a?l:-r/2,xmax:a===n?c-r*a:r/2,ymin:t.ymin,ymax:t.ymax,spatialReference:t.spatialReference}),d=0===a?m-f:a===n?e-h:m;h+=d,u.push(d);const x=o.disableWrapAround&&a>0?null:this._fetchPixels(p,d,i,o);s.push(x);}const p=(await Promise.all(s)).map((t=>t?.pixelBlock));let d=null;const x={width:e,height:i};if(this.rasterJobHandler){d=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:p,srcMosaicSize:x,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:u},o)).pixelBlock;}else d=p$1(p,x,{blockWidths:u});return {extent:t,srcExtent:F$2(t,this.rasterInfo.spatialReference,o.datumTransformation),pixelBlock:d}}async fetchRawPixels(t,e,i,o={}){e={x:Math.floor(e.x),y:Math.floor(e.y)};const r=await this._fetchRawTiles(t,e,i,o),{nativeExtent:s,nativePixelSize:a,storageInfo:l}=this.rasterInfo,c=2**t,m=a.x*c,f=a.y*c,h=new w({xmin:s.xmin+m*e.x,xmax:s.xmin+m*(e.x+i.width-1),ymin:s.ymax-f*(e.y+i.height-1),ymax:s.ymax-f*e.y,spatialReference:s.spatialReference});if(!r)return {extent:h,srcExtent:h,pixelBlock:null};const{pixelBlocks:u,mosaicSize:p}=r;if(1===u.length&&r$1(u[0])&&u[0].width===i.width&&u[0].height===i.height)return {extent:h,srcExtent:h,pixelBlock:r.pixelBlocks[0]};const d=t>0?l.pyramidBlockWidth:l.blockWidth,x=t>0?l.pyramidBlockHeight:l.blockHeight,g={x:e.x%d,y:e.y%x};let y;if(this.rasterJobHandler){y=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:u,srcMosaicSize:p,destDimension:i,clipOffset:g,clipSize:i,coefs:null,sampleSpacing:null,interpolation:o.interpolation,alignmentInfo:null,blockWidths:null},o)).pixelBlock;}else y=p$1(u,p,{clipOffset:g,clipSize:i});return {extent:h,srcExtent:h,pixelBlock:y}}fetchRawTile(t,e,o,r){throw new s$1("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(t){return F$2(this.rasterInfo.extent,t)}decodePixelBlock(t,e){return !this.rasterJobHandler||e.useCanvas?O(t,e):this.rasterJobHandler.decode({data:t,options:e})}async request(t,i,o){const{customFetchParameters:r}=this.ioConfig,{range:n,query:s,headers:a}=i;o=o??i.retryCount??this.ioConfig.retryCount;const l=n?{Range:`bytes=${n.from}-${n.to}`}:null;try{return await L$1(t,{...i,query:{...s,...r},headers:{...a,...l}})}catch(c){if(o>0)return o--,this.request(t,i,o);throw c}}getSliceIndex(t){const{multidimensionalInfo:e}=this.rasterInfo;return t$2(e)||t$2(t)||0===t.length?null:m$3(t,e)}getTileExtentFromTileInfo(t,e,i,o){const r=o.lodAt(t);return this.getTileExtent({x:r.resolution,y:r.resolution},e,i,o.origin,o.spatialReference,o.size)}updateTileInfo(){const{storageInfo:t,spatialReference:e,extent:i,pixelSize:o}=this.rasterInfo;if(!t.tileInfo){const r=[],n=t.maximumPyramidLevel||0;let s=Math.max(o.x,o.y),a=1/.0254*96*s;for(let t=0;t<=n;t++)r.push({level:n-t,resolution:s,scale:a}),s*=2,a*=2;const l=new b$1({x:i.xmin,y:i.ymax,spatialReference:e});t.tileInfo=new S$3({origin:l,size:[t.blockWidth,t.blockHeight],spatialReference:e,lods:r}),t.isVirtualTileInfo=!0;}}createRemoteDatasetStorageInfo(t,e=512,i=512,o){const{width:r,height:n,nativeExtent:s,pixelSize:a,spatialReference:l}=t,c=new b$1({x:s.xmin,y:s.ymax,spatialReference:l});null==o&&(o=Math.max(0,Math.round(Math.log(Math.max(r,n))/Math.LN2-8)));const m=this.computeBlockBoundary(s,512,512,{x:s.xmin,y:s.ymax},[a],o);t.storageInfo=new p$2({blockWidth:e,blockHeight:i,pyramidBlockWidth:e,pyramidBlockHeight:i,origin:c,firstPyramidLevel:1,maximumPyramidLevel:o,blockBoundary:m});}async computeBestPyramidLevelForLocation(t,e={}){return 0}computeBlockBoundary(t,e,i,o,r,n=0,s=2){if(1===r.length&&n>0){r=[...r];let{x:t,y:e}=r[0];for(let i=0;i<n;i++)t*=s,e*=s,r.push({x:t,y:e});}const a=[],{x:l,y:c}=o;for(let m=0;m<r.length;m++){const{x:o,y:n}=r[m];a.push({minCol:Math.floor((t.xmin-l+.1*o)/e/o),maxCol:Math.floor((t.xmax-l-.1*o)/e/o),minRow:Math.floor((c-t.ymax+.1*n)/i/n),maxRow:Math.floor((c-t.ymin-.1*n)/i/n)});}return a}getPyramidPixelSize(t){const{nativePixelSize:e}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:o}=this.rasterInfo.storageInfo;if(0===t)return e;if(r$1(i)&&i.length)return i[t-1];const r=o**t;return {x:e.x*r,y:e.y*r}}identifyPixelLocation(t,e,i,o){const{spatialReference:r,nativeExtent:s,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:l,origin:c,transposeInfo:m}=a,f=o&&r$1(m)?m.tileSize[0]:a.blockWidth,h=o&&r$1(m)?m.tileSize[1]:a.blockHeight,u=_(t,r,i);if(!s.intersects(u))return null;if(e<0||e>l)return null;const p=this.getPyramidPixelSize(e),{x:d,y:x}=p,g=(c.y-u.y)/x/h,y=(u.x-c.x)/d/f,I=Math.min(h-1,Math.floor((g-Math.floor(g))*h)),R=Math.min(f-1,Math.floor((y-Math.floor(y))*f));return {pyramidLevel:e,row:Math.floor(g),col:Math.floor(y),rowOffset:I,colOffset:R,blockWidth:f,srcLocation:u}}getTileExtent(t,e,i,o,r,n){const[s,a]=n,l=o.x+i*s*t.x,c=l+s*t.x,m=o.y-e*a*t.y,f=m-a*t.y;return new w({xmin:l,xmax:c,ymin:f,ymax:m,spatialReference:r})}getBlockWidthHeight(t){return {blockWidth:t>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:t>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(t,e,i){const o=this.rasterInfo.storageInfo.blockBoundary[t];return !o||o.maxRow<e||o.maxCol<i||o.minRow>e||o.minCol>i}async _fetchPixels(t,e,i,o={}){let r=D(t);if(r>=2)return {extent:t,pixelBlock:null};const a=this._getSourceDataInfo(t,e,i,o),{pyramidLevel:l,pyramidResolution:c,srcResolution:m,srcExtent:f,srcWidth:h,srcHeight:u}=a;if(0===h||0===u)return {extent:t,srcExtent:f,pixelBlock:null};const p=e$2(this.rasterInfo.transform),d="gcs-shift"===p?.type,x=r$1(X(t.spatialReference));!d&&x||(r=D(a.srcExtent,d));const g=this.rasterInfo.storageInfo,y={x:Math.floor((f.xmin-g.origin.x)/c.x+.1),y:Math.floor((g.origin.y-f.ymax)/c.y+.1)},I=await this._fetchRawTiles(l,y,{width:h,height:u,wrapCount:r},o);if(!I)return {extent:t,srcExtent:f,pixelBlock:null};const R=l>0?g.pyramidBlockWidth:g.blockWidth,w=l>0?g.pyramidBlockHeight:g.blockHeight,k=R===h&&w===u&&y.x%R==0&&y.y%w==0,b=new b$1({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/i,spatialReference:t.spatialReference}),v=!t.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:S}=o;if(!v&&k&&1===I.pixelBlocks.length&&R===e&&w===i&&m.x===b.x&&m.y===b.y)return {extent:t,srcExtent:f,pixelBlock:I.pixelBlocks[0]};const C$1=x&&r$1(X(f.spatialReference)),_=o.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");_&&!this.rasterJobHandler&&await k$2();const j=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:t,srcBufferExtent:I.extent,pixelSize:b.toJSON(),datumTransformation:S,rasterTransform:p,hasWrapAround:r>0||C$1,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:_},o):V({projectedExtent:t,srcBufferExtent:I.extent,pixelSize:b,datumTransformation:S,rasterTransform:p,hasWrapAround:r>0||C$1,isAdaptive:!1,includeGCSGrid:_});let E;const D$1=!o.requestRawData,z={rows:j.spacing[0],cols:j.spacing[1]},F=e$2(this._getRasterTileAlignmentInfo(l,I.extent.xmin)),{pixelBlocks:O,mosaicSize:q,isPartiallyFilled:G}=I;let J=null;if(this.rasterJobHandler){const t=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:O,srcMosaicSize:q,destDimension:D$1?{width:e,height:i}:null,coefs:D$1?j.coefficients:null,sampleSpacing:D$1?z:null,projectDirections:_,gcsGrid:_?j.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:o.interpolation,alignmentInfo:F,blockWidths:null},o);({pixelBlock:E,localNorthDirections:J}=t);}else {const t=p$1(O,q,{alignmentInfo:F});E=D$1?T$1(t,{width:e,height:i},j.coefficients,z,o.interpolation):t,_&&j.gcsGrid&&(J=C({width:e,height:i},j.gcsGrid),E=m$4(E,this.rasterInfo.dataType,J));}return o.requestRawData||_?{srcExtent:f,pixelBlock:E,transformGrid:j,localNorthDirections:J,extent:t,isPartiallyFilled:G}:{srcExtent:f,extent:t,pixelBlock:E}}async _fetchRawTiles(t,e,i,o){const{origin:r,blockBoundary:s}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:l}=this.getBlockWidthHeight(t);let{x:c,y:m}=e,{width:f,height:h,wrapCount:u}=i;const p=this._getRasterTileAlignmentInfo(t,0);o.buffer&&(c-=o.buffer.cols,m-=o.buffer.rows,f+=2*o.buffer.cols,h+=2*o.buffer.rows);let d=0,x=0,g=0;if(u&&r$1(p)){({worldColumnCountFromOrigin:x,originColumnOffset:g,rightPadding:d}=p);x*p.blockWidth-d>=c+f&&(d=0);}const y=Math.floor(c/a),I=Math.floor(m/l),R=Math.floor((c+f+d-1)/a),w$1=Math.floor((m+h+d-1)/l),k=s[t];if(!k)return null;const{minRow:b,minCol:v,maxCol:S,maxRow:T}=k;if(0===u&&(w$1<b||R<v||I>T||y>S))return null;const B=new Array;let P=!1;const W=null==this.ioConfig.allowPartialFill?o.allowPartialFill:this.ioConfig.allowPartialFill;for(let L=I;L<=w$1;L++)for(let e=y;e<=R;e++){let i=e;if(!o.disableWrapAround&&u&&r$1(p)&&x<=e&&(i=e-x-g),L>=b&&i>=v&&T>=L&&S>=i){const e=this._fetchRawTile(t,L,i,o);W?B.push(new Promise((t=>{e.then((e=>t(e))).catch((()=>{P=!0,t(null);}));}))):B.push(e);}else B.push(null);}if(0===B.length)return null;const M=await Promise.all(B),C={height:(w$1-I+1)*l,width:(R-y+1)*a},{spatialReference:_}=this.rasterInfo,j=this.getPyramidPixelSize(t),{x:H,y:E}=j;return {extent:new w({xmin:r.x+y*a*H,xmax:r.x+(R+1)*a*H,ymin:r.y-(w$1+1)*l*E,ymax:r.y-I*l*E,spatialReference:_}),pixelBlocks:M,mosaicSize:C,isPartiallyFilled:P}}_fetchRawTile(t,e,i,o){const r=this.rasterInfo.storageInfo.blockBoundary[t];if(!r)return Promise.resolve(null);const{minRow:n,minCol:s,maxCol:l,maxRow:m}=r;if(e<n||i<s||e>m||i>l)return Promise.resolve(null);const f=i$2(this.url,o.sliceId),h=`${t}/${e}/${i}`;let u=m$2(f,o.registryId,h);if(t$2(u)){const r=new AbortController;u=this.fetchRawTile(t,e,i,{...o,signal:r.signal}),x$1(f,o.registryId,h,u,r),u.catch((()=>d$4(f,o.registryId,h)));}return o.signal&&v$1(o,(()=>{h$1(f,o.registryId,h);})),u}_computeMagDirValues(t){const{bandCount:e,dataType:i}=this.rasterInfo;if(!(2===e&&"vector-magdir"===i||"vector-uv"===i)||2!==t?.length||!t[0]?.length)return null;const o=t[0].length;if("vector-magdir"===i){const e=t[1].map((t=>(t+360)%360));return [t[0],e]}const[r,n]=t,s=[],a=[];for(let l=0;l<o;l++){const[t,e]=f$4([r[l],n[l]]);s.push(t),a.push(e);}return [s,a]}_getRasterTileAlignmentInfo(t,e){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=H(this.rasterInfo)),t$2(this._rasterTileAlighmentInfo.pyramidsInfo)?null:{startX:e,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[t]}}_getSourceDataInfo(t,e,i,o={}){const r={datumTransformation:o.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};o.srcResolution&&(r.srcResolution=o.srcResolution,this._updateSourceDataInfo(t,r));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:s,srcHeight:a,pyramidLevel:l}=r,c=s/e,m=a/i,f=l<n&&c*m>=16;if(f||l===n&&(c>q||m>q)||(0===s||0===a)){const s=new b$1({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/i,spatialReference:t.spatialReference});let a=v$2(s,this.rasterInfo.spatialReference,t,r.datumTransformation);const h=!a||o.srcResolution&&a.x+a.y<o.srcResolution.x+o.srcResolution.y;if(f&&o.srcResolution&&h){const t=Math.round(Math.log(Math.max(c,m))/Math.LN2)-1;if(n-l+3>=t){const e=2**t;a={x:o.srcResolution.x*e,y:o.srcResolution.y*e};}}a&&(r.srcResolution=a,this._updateSourceDataInfo(t,r));}return (r.srcWidth/e>q||r.srcHeight/i>q)&&(r.srcWidth=0,r.srcHeight=0),r}_updateSourceDataInfo(t,e){e.srcWidth=0,e.srcHeight=0;const i=this.rasterInfo.spatialReference,{srcResolution:o,datumTransformation:r}=e,{pyramidLevel:n,pyramidResolution:a,excessiveReading:l}=te$1(o,this.rasterInfo,this.ioConfig.sampling);if(l)return;let c=e.srcExtent||F$2(t,i,r);if(null==c)return;const m=e$2(this.rasterInfo.transform);m&&(c=m.inverseTransform(c)),e.srcExtent=c;const f=Math.ceil((c.xmax-c.xmin)/a.x-.1),h=Math.ceil((c.ymax-c.ymin)/a.y-.1);e.pyramidLevel=n,e.pyramidResolution=a,e.srcWidth=f,e.srcHeight=h;}_getRequestOptionsWithSliceId(t){return r$1(this.rasterInfo.multidimensionalInfo)&&null==t.sliceId&&(t={...t,sliceId:this.getSliceIndex(t.multidimensionalDefinition)}),t}_processIdentifyResult(t,e){const{srcLocation:i,position:o,pyramidLevel:r,useTransposedTile:n}=e,l=t.pixels[0].length/t.width/t.height;if(!(!t.mask||t.mask[o]))return {location:i,value:null};const{multidimensionalInfo:c}=this.rasterInfo;if(t$2(c)||!n){const e=t.pixels.map((t=>t[o])),n={location:i,value:e,pyramidLevel:r},s=this._computeMagDirValues(e.map((t=>[t])));return s?.length&&(n.magdirValue=s.map((t=>t[0]))),n}let m=t.pixels.map((t=>Array.prototype.slice.call(t,o*l,o*l+l))),f=this._computeMagDirValues(m);const{requestSomeSlices:h,identifyOptions:u}=e;let p=r$2(c,u.transposedVariableName);if(h){const t=s$2(p,e$2(u.multidimensionalDefinition),e$2(u.timeExtent));m=m.map((e=>t.map((t=>e[t])))),f=f?.map((e=>t.map((t=>e[t])))),p=t.map((t=>p[t]));}return {location:i,value:null,dataSeries:p.map(((t,e)=>{const i={value:m.map((t=>t[e])),multidimensionalDefinition:t.multidimensionalDefinition,variableName:t.multidimensionalDefinition[0].variableName,dimensionValues:{}};return f?.length&&(i.magdirValue=[f[0][e],f[1][e]]),t.multidimensionalDefinition.forEach((t=>i.dimensionValues[t.dimensionName]=t.values[0])),i})),pyramidLevel:r}}};e$1([d$2()],G.prototype,"_rasterTileAlighmentInfo",void 0),e$1([d$2({readOnly:!0})],G.prototype,"_isGlobalWrappableSource",null),e$1([d$2(f$2)],G.prototype,"url",null),e$1([d$2({type:String,json:{write:!0}})],G.prototype,"datasetName",void 0),e$1([d$2({type:String,json:{write:!0}})],G.prototype,"datasetFormat",void 0),e$1([d$2()],G.prototype,"rasterInfo",void 0),e$1([d$2()],G.prototype,"ioConfig",void 0),e$1([d$2()],G.prototype,"sourceJSON",void 0),G=e$1([n$2("esri.layers.support.rasterDatasets.BaseRaster")],G);const J=G;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
function t$1(e){const t=e.fields,r=e.records,n=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",i=[{name:n,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),s=i.map((e=>e.name)),a=[];let o=0,l=0;return r.forEach((e=>{const t={};for(t[n]=o++,l=1;l<s.length;l++)t[s[l]]=e[l-1];a.push({attributes:t});})),{displayFieldName:"",fields:i,features:a}}class r{static get supportedVersions(){return [5]}static parse(r){const n=new DataView(r),i=3&n.getUint8(0);if(3!==i)return {header:{version:i},recordSet:null};const s=n.getUint32(4,!0),a=n.getUint16(8,!0),o=n.getUint16(10,!0),l={version:i,recordCount:s,headerByteCount:a,recordByteCount:o};let p=32;const g=[],u=[];let d;if(3===i){for(;13!==n.getUint8(p);)d=String.fromCharCode(n.getUint8(p+11)).trim(),g.push({name:r$3(new Uint8Array(r,p,11)),type:d,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(d)],length:n.getUint8(p+16)}),p+=32;if(p+=1,g.length>0)for(;u.length<s&&r.byteLength-p>o;){const t=[];32===n.getUint8(p)?(p+=1,g.forEach((n=>{if("C"===n.type)t.push(r$3(new Uint8Array(r,p,n.length)).trim());else if("N"===n.type)t.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(r,p,n.length)).trim(),10));else if("F"===n.type)t.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(r,p,n.length)).trim()));else if("D"===n.type){const e=String.fromCharCode.apply(null,new Uint8Array(r,p,n.length)).trim();t.push(new Date(parseInt(e.substring(0,4),10),parseInt(e.substring(4,6),10)-1,parseInt(e.substring(6,8),10)));}p+=n.length;})),u.push(t)):p+=o;}}return {header:l,fields:g,records:u,recordSet:t$1({fields:g,records:u})}}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
const y$1=new Map;y$1.set("int16","esriFieldTypeSmallInteger"),y$1.set("int32","esriFieldTypeInteger"),y$1.set("int64","esriFieldTypeInteger"),y$1.set("float32","esriFieldTypeSingle"),y$1.set("float64","esriFieldTypeDouble"),y$1.set("text","esriFieldTypeString");const x=8;let S$1=class extends J{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF";}async open(e){await this.init();const{data:r}=await this.request(this.url+"/conf.json",{signal:e?.signal});if(!this._validateHeader(r))throw new s$1("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:o}=this._parseHeader(r);if("thematic"===o.dataType){const e=await this._fetchAuxiliaryInformation();o.attributeTable=e;}this._set("storageInfo",i),this._set("rasterInfo",o),this.ioConfig.retryCount=this.ioConfig.retryCount||0;}async fetchRawTile(e,t,r,i={}){const{transposeInfo:o}=this.rasterInfo.storageInfo,{transposedVariableName:s}=i,a=!(!o||!s),n=a?0:this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(n<0)return null;const l=this._buildCacheFilePath(n,t,r,i.multidimensionalDefinition,s),f=this._getIndexRecordFromBundle(t,r,a),m=await this.request(l,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:i.signal});if(!m)return null;const c=new Uint8Array(m.data),p=this._getTileEndAndContentType(c,f);if(0===p.recordSize)return null;const d=await this.request(l,{range:{from:p.position,to:p.position+p.recordSize},responseType:"array-buffer",signal:i.signal});if(!d)return null;const[u,h]=this._getTileSize(a);return this.decodePixelBlock(d.data,{width:u,height:h,planes:null,pixelType:null,returnPixelInterleavedDims:a})}_validateHeader(e){const t=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return e&&"RasterInfo"===e.type&&!t.some((t=>!e[t]))}_parseHeader(e){const t=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:r,histograms:i,colormap:o,blockWidth:s,blockHeight:f,firstPyramidLevel:m,maximumPyramidLevel:c}=e,p=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),d=e.extent.spatialReference,y=e.geodataXform?.spatialReference,S=new k$3(d?.wkid||d?.wkt?d:y);let I=new w({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:S});const w$1=new b$1({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:S}),_=Math.round((I.xmax-I.xmin)/w$1.x),v=Math.round((I.ymax-I.ymin)/w$1.y),b=this._parseTransform(e.geodataXform),z=b?I:null;b&&(I=b.forwardTransform(I),w$1.x=(I.xmax-I.xmin)/_,w$1.y=(I.ymax-I.ymin)/v);const T=e.properties??{},k=e.format.toLowerCase().replace("cache/",""),j=new b$1(e.origin.x,e.origin.y,S);let C,R,F,P;if(o&&o.colors)for(C=[],R=0;R<o.colors.length;R++)F=o.colors[R],P=o.values?o.values[R]:R,C.push([P,255&F,F<<16>>>24,F<<8>>>24,F>>>24]);const H=e.LODInfos,D=[];for(R=0;R<H.levels.length;R++)D.push({level:H.levels[R],resolution:H.resolutions[R],scale:96/.0254*H.resolutions[R]});const L=new S$3({dpi:96,lods:D,format:k,origin:j,size:[s,f],spatialReference:S}),M={recordSize:x,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*x+64},B=[{maxCol:Math.ceil(_/s)-1,maxRow:Math.ceil(v/f)-1,minCol:0,minRow:0}];let O=2;if(c>0)for(R=0;R<c;R++)B.push({maxCol:Math.ceil(_/O/s)-1,maxRow:Math.ceil(v/O/f)-1,minCol:0,minRow:0}),O*=2;const $=e.mdInfo;let N=null;if($&&T._yxs){const e=T._yxs;N={packetSize:e.PacketSize,tileSize:[e.TileXSize,e.TileYSize]};}return {storageInfo:M,rasterInfo:new l$3({width:_,height:v,pixelType:t,bandCount:r,extent:I,nativeExtent:z,transform:b,spatialReference:S,pixelSize:w$1,keyProperties:T,statistics:p,histograms:i,multidimensionalInfo:$,colormap:C,storageInfo:new p$2({blockWidth:s,blockHeight:f,pyramidBlockWidth:s,pyramidBlockHeight:f,origin:j,tileInfo:L,transposeInfo:N,firstPyramidLevel:m,maximumPyramidLevel:c,blockBoundary:B})})}}_parseTransform(e){if(!f$5(e))throw new s$1("cloudraster:open","the data contains unsupported geodata transform types");const r=i$3(e);if("identity"===r.type)return null;if("polynomial"!==r.type||!r.forwardCoefficients?.length||!r.inverseCoefficients?.length)throw new s$1("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return r}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),r$1=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),i=await Promise.all([t,r$1]);let o;if(i[0]){let e=i[0].fields;const t=i[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":y$1.get(e.type),name:e.name,alias:e.alias||e.name})));const r=t.map((e=>({attributes:e})));e&&t&&(o={fields:e,features:r});}}if(!o&&i[1]){o=r.parse(i[1]).recordSet;}return x$2.fromJSON(o)}_buildCacheFilePath(e,t,i,o,s){const a=this._getPackageSize(!!s),n=Math.floor(t/a)*a,l=Math.floor(i/a)*a,f="R"+this._toHexString4(n)+"C"+this._toHexString4(l);let m="L";m+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:c}=this.rasterInfo,p=o?.[0];if(t$2(c)||!p)return `${this.url}/_alllayers/${m}/${f}.bundle`;let d="_yxs";if(!s){d=c.variables.find((e=>e.name===p.variableName)).dimensions[0].values.indexOf(p.values[0]).toString(16);const e=4-d.length;for(let t=0;t<e;t++)d="0"+d;d="S"+d;}const u=this._getVariableFolderName(s||p.variableName);return `${this.url}/_alllayers/${u}/${d}/${m}/${f}.bundle`}_getPackageSize(e=!1){const{transposeInfo:t}=this.rasterInfo.storageInfo;return e&&r$1(t)?t.packetSize:this.storageInfo.packetSize}_getTileSize(e=!1){const{storageInfo:t}=this.rasterInfo,{transposeInfo:r}=t;return e&&r$1(r)?r.tileSize:t.tileInfo.size}_getVariableFolderName(e){return ""===(e=e.trim())?"_v":e.replace(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(e,t,r=!1){const i=this._getPackageSize(r),o=i*(e%i)+t%i;if(o<0)throw "Invalid level / row / col";return 20+o*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const r=e.subarray(t,t+8);let i,o=0;for(i=0;i<5;i++)o|=(255&r[i])<<8*i;const s=0xffffffffff&o;for(o=0,i=5;i<8;i++)o|=(255&r[i])<<8*(i-5);return {position:s,recordSize:0xffffffffff&o}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t;}return t}};e$1([d$2({readOnly:!0})],S$1.prototype,"storageInfo",void 0),e$1([d$2({type:String,json:{write:!0}})],S$1.prototype,"datasetFormat",void 0),S$1=e$1([n$2("esri.layers.support.rasterDatasets.CloudRaster")],S$1);const I$2=S$1;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
let h=class extends J{constructor(){super(...arguments),this.datasetFormat="MEMORY";}async open(t){await this.init();const{pixelBlock:e,statistics:s,histograms:r,name:i,keyProperties:o,nativeExtent:m,transform:n}=this.data,{width:l,height:h,pixelType:f}=e,d=this.data.extent||new w({xmin:-.5,ymin:.5,xmax:l-.5,ymax:h-.5,spatialReference:new k$3({wkid:3857})}),u=this.data.isPseudoSpatialReference??!this.data.extent,y={x:d.width/l,y:d.height/h},x=new l$3({width:l,height:h,pixelType:f,extent:d,nativeExtent:m,transform:n,pixelSize:y,spatialReference:d.spatialReference,bandCount:3,keyProperties:o||{},statistics:s,isPseudoSpatialReference:u,histograms:r});this.createRemoteDatasetStorageInfo(x,512,512),this._set("rasterInfo",x),this.updateTileInfo(),await this._buildInMemoryRaster(e,{width:512,height:512},t),this.datasetName=i,this.url="/InMemory/"+i;}fetchRawTile(t,e,s,r={}){const i=this._pixelBlockTiles.get(`${t}/${e}/${s}`);return Promise.resolve(i)}async _buildInMemoryRaster(t,i,o){const a=this.rasterInfo.storageInfo.maximumPyramidLevel,m=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:i,maximumPyramidLevel:a},o):Promise.resolve(A$1(t,i,a)),p=r$1(this.rasterInfo.statistics),c=r$1(this.rasterInfo.histograms),h=p?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},o):Promise.resolve(m$5(t)),f=await E$1([m,h]);if(!f[0].value&&f[1].value)throw new s$1("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=f[0].value,p||(this.rasterInfo.statistics=f[1].value?.statistics),c||(this.rasterInfo.histograms=f[1].value?.histograms);}};e$1([d$2({type:String,json:{write:!0}})],h.prototype,"datasetFormat",void 0),e$1([d$2()],h.prototype,"data",void 0),h=e$1([n$2("esri.layers.support.rasterDatasets.InMemoryRaster")],h);const f$1=h;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
function n$1(e,t){if(!e||!t)return [];let l=t;t.includes("/")?(l=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const r=[];if(t){const u=n$1(e,l);for(let e=0;e<u.length;e++){n$1(u[e],t).forEach((n=>r.push(n)));}return r}const u=e.getElementsByTagNameNS("*",l);if(!u||0===u.length)return [];for(let n=0;n<u.length;n++)r.push(u[n]||u.item[n]);return r}function e(t,l){if(!t||!l)return null;let r=l;l.includes("/")?(r=l.slice(0,l.indexOf("/")),l=l.slice(l.indexOf("/")+1)):l="";const u=n$1(t,r);return u.length>0?l?e(u[0],l):u[0]:null}function t(n,t=null){const l=t?e(n,t):n;let r;return l?(r=l.textContent||l.nodeValue,r?r.trim():null):null}function l(e,t){const l=n$1(e,t),r=[];let u;for(let n=0;n<l.length;n++)u=l[n].textContent||l[n].nodeValue,u&&(u=u.trim(),""!==u&&r.push(u));return r}function u$1(n,e){return l(n,e).map((n=>Number(n)))}function o$1(n,e){const l=t(n,e);return Number(l)}function i(n,e){const t=n?.nodeName?.toLowerCase(),l=e.toLowerCase();return t.slice(t.lastIndexOf(":")+1)===l}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
function o(e,t){if(!e||!t)return null;const n=[];for(let s=0;s<e.length;s++)n.push(e[s]),n.push(t[s]);return n}function u(e$1){const n=e(e$1,"GeodataXform"),l=c$1(o$1(n,"SpatialReference/WKID")||t(n,"SpatialReference/WKT"));if("typens:PolynomialXform"!==n.getAttribute("xsi:type"))return {spatialReference:l,transform:null};const u=o$1(n,"PolynomialOrder")??1,f=u$1(n,"CoeffX/Double"),m=u$1(n,"CoeffY/Double"),d=u$1(n,"InverseCoeffX/Double"),p=u$1(n,"InverseCoeffY/Double"),S=o(f,m),C=o(d,p);return {spatialReference:l,transform:new m$6({spatialReference:l,polynomialOrder:u,forwardCoefficients:S,inverseCoefficients:C})}}function f(e$1){const a=o$1(e$1,"NoDataValue"),i=e(e$1,"Histograms/HistItem"),l=o$1(i,"HistMin"),o=o$1(i,"HistMax"),u=o$1(i,"BucketCount"),f=t(i,"HistCounts")?.split("|").map((e=>Number(e)));let c,m,d,p;n$1(e$1,"Metadata/MDI").forEach((e=>{const t=Number(e.textContent??e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":c=t;break;case"STATISTICS_MAXIMUM":m=t;break;case"STATISTICS_MEAN":d=t;break;case"STATISTICS_STDDEV":p=t;}}));const S=o$1(e$1,"Metadata/SourceBandIndex");return {noDataValue:a,histogram:f?.length&&null!=c&&null!=m?{min:l,max:o,size:u||f.length,counts:f}:null,sourceBandIndex:S,statistics:null!=c&&null!=m?{min:c,max:m,avg:d,stddev:p}:null}}function c$1(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new k$3({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const n=e.indexOf("VERTCS"),s=e.indexOf("PROJCS"),r=s>-1?s:e.indexOf("GEOGCS");if(-1===r)return null;const a=e.slice(r,e.lastIndexOf("]",n)+1).trim(),i=e.slice(n,e.lastIndexOf("]")).trim();t=m(a);const o=new k$3(t?{wkid:t}:{wkt:a}),u=m(i);return u&&(o.vcsWkid=u),o}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=m(e),new k$3(0!==t?{wkid:t}:{wkt:e})):null}function m(e){const t=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map((e=>e.trim())).filter((e=>""!==e)),n=t[t.length-1].split(","),s=n[0]?.toLowerCase();if(("epsg"===s||"esri"===s)&&e.endsWith('"]]')){const e=Number(n[1]);if(!isNaN(e)&&0!==e)return e}return 0}function d$1(s){if("pamdataset"!==s?.documentElement.tagName?.toLowerCase())return {};const r={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};s.documentElement.childNodes.forEach((s=>{if(1===s.nodeType)if(i(s,"SRS")){if(!r.spatialReference){const e=t(s);r.spatialReference=c$1(e);}}else if(i(s,"Metadata"))if("xml:ESRI"===s.getAttribute("domain")){const{spatialReference:e,transform:t}=u(s);r.transform=t,r.spatialReference||(r.spatialReference=e);}else {n$1(s,"MDI").forEach((e=>r.metadata[e.getAttribute("key")]=t(e)));}else if(i(s,"PAMRasterBand")){const e=f(s);null!=e.sourceBandIndex&&null==r.rasterBands[e.sourceBandIndex]?r.rasterBands[e.sourceBandIndex]=e:r.rasterBands.push(e);}}));const a=r.rasterBands;if(a){const e=!!a[0].statistics;r.statistics=e?a.map((e=>e.statistics)):null;const t=!!a[0].histogram;r.histograms=t?a.map((e=>e.histogram)):null;}return r}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
let d=class extends J{async open(t){await this.init();const s=await this._fetchData(t);let{spatialReference:e,statistics:r,histograms:a,transform:o}=await this._fetchAuxiliaryData(t);const i=!e;i&&(e=new k$3({wkid:3857})),a?.length&&null==r&&(r=c$2(a));const{width:n,height:l}=s;let p=new w({xmin:-.5,ymin:.5-l,xmax:n-.5,ymax:.5,spatialReference:e});const f=o?o.forwardTransform(p):p;let d=!0;if(o){const t=o.forwardCoefficients;d=t&&0===t[1]&&0===t[2],d&&(o=null,p=f);}const y=new f$1({data:{extent:f,nativeExtent:p,transform:o,pixelBlock:s,statistics:r,histograms:a,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:i}});await y.open(),y.data=null,this._set("rasterInfo",y.rasterInfo),this._inMemoryRaster=y;}fetchRawTile(t,s,e,r={}){return this._inMemoryRaster.fetchRawTile(t,s,e,r)}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),r=S$4(e).toUpperCase();if("JPG"!==r&&"PNG"!==r&&"GIF"!==r&&"BMP"!==r)throw new s$1("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",r);const a=r.toLowerCase(),o="gif"===a||"bmp"===a||!has("ios");return await this.decodePixelBlock(e,{format:a,useCanvas:o,hasNoZlibMask:!0})}async _fetchAuxiliaryData(t){const s=e$2(t?.signal),o=this.ioConfig.skipExtensions??[],i=o.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:s}),n=this.datasetFormat,m="JPG"===n?"jgw":"PNG"===n?"pgw":"BMP"===n?"bpw":null,p=o.includes(m)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+m,{responseType:"text",signal:s}),c=await E$1([i,p]);if(s?.aborted)throw a();const u=d$1(c[0].value?.data);if(!u.transform){const t=c[1].value?c[1].value.data.split("\n").slice(0,6).map((t=>Number(t))):null;u.transform=6===t?.length?new m$6({forwardCoefficients:[t[4],t[5],t[0],-t[1],t[2],-t[3]]}):null;}return u}};e$1([d$2({type:String,json:{write:!0}})],d.prototype,"datasetFormat",void 0),d=e$1([n$2("esri.layers.support.rasterDatasets.ImageAuxRaster")],d);const y=d;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
let S=class extends J{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer";}async open(e){await this.init();const s=e&&e.signal,a=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:s});a.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const l=a.data;if(this.sourceJSON=l,!l)throw new s$1("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!l.tileInfo)throw new s$1("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const o=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=l.cacheType,null==this.tileType&&(o.includes(l.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===l.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=l.name.slice(l.name.indexOf("/")+1);const n=await this._fetchRasterInfo({signal:s});if(!r$1(n))throw new s$1("image-server-raster:open","cannot initialize image service");{const e="Map"===this.tileType?n$4(l.tileInfo,l):S$3.fromJSON(l.tileInfo),{extent:t,pixelSize:i}=n,s=.5/n.width*i.x;let a,r;const o=e.lodAt(Math.max.apply(null,e.lods.map((e=>e.level))));"Map"!==this.tileType&&0!==l.maxScale&&("Raster"===this.tileType?(a=e.lods.find((e=>e.resolution===i.x)),a||(a=e.lods[e.lods.length-1])):(a=e.lods.find((e=>Math.abs(e.scale-l.maxScale)<s)),a||(a=e.lods.filter((e=>e.scale>l.maxScale)).sort(((e,t)=>e.scale>t.scale?1:-1))[0])),i.x=i.y=a.resolution,n.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),n.height=Math.ceil((t.ymax-t.ymin)/i.y-.1)),a||(a=o);const p=e.lodAt(Math.min.apply(null,e.lods.map((e=>e.level))));"Map"===this.tileType?this._levelOffset=e.lods[0].level:0!==l.minScale&&"Elevation"===this.tileType&&(r=e.lods.find((e=>Math.abs(e.scale-l.minScale)<s)),this._levelOffset=r.level-p.level),r||(r=p);const f=Math.max(i.x,i.y);(Math.abs(i.x-i.y)>s||!e.lods.some((e=>Math.abs(e.resolution-f)<s)))&&(i.x=i.y=a.resolution,n.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),n.height=Math.ceil((t.ymax-t.ymin)/i.y-.1));const u=a.level-r.level,[y,d]=e.size,x=[];e.lods.forEach((e=>{e.level>=r.level&&e.level<=a.level&&x.push({x:e.resolution,y:e.resolution});})),x.sort(((e,t)=>e.x-t.x));const g=this.computeBlockBoundary(t,y,d,e.origin,x,u),v=x.length>1?x.slice(1):null;let S;l.transposeInfo&&(S={tileSize:[l.transposeInfo.rows,l.transposeInfo.cols],packetSize:n.keyProperties?._yxs.PacketSize??0}),n.storageInfo=new p$2({blockWidth:e.size[0],blockHeight:e.size[1],pyramidBlockWidth:e.size[0],pyramidBlockHeight:e.size[1],pyramidResolutions:v,compression:e.format,origin:e.origin,firstPyramidLevel:1,maximumPyramidLevel:u,tileInfo:e,transposeInfo:S,blockBoundary:g}),this._fixGCSShift(n),this._set("rasterInfo",n);}if(l.capabilities.toLowerCase().includes("tilemap")){const e={tileInfo:n.storageInfo.tileInfo,parsedUrl:j(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new z({layer:e});}}async fetchRawTile(e,t,s,a={}){const{storageInfo:r,extent:l}=this.rasterInfo,{transposeInfo:o}=r,n=r$1(o)&&!!a.transposedVariableName;if(this._slices&&!n&&null==a.sliceId)return null;const c=n?0:r.maximumPyramidLevel-e+this._levelOffset,m=`${this.url}/tile/${c}/${t}/${s}`,h=this._slices?n?{variable:a.transposedVariableName}:{sliceId:a.sliceId||0}:null,{data:p}=await this.request(m,{query:h,responseType:"array-buffer",signal:a.signal});if(!p)return null;const f=n?o.tileSize:r.tileInfo.size,y=await this.decodePixelBlock(p,{width:f[0],height:f[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnPixelInterleavedDims:n}),d=r.blockBoundary[e];if("jpg"!==r.compression||s>d.minCol&&s<d.maxCol&&t>d.minRow&&t<d.maxRow)return y;const{origin:x,blockWidth:g,blockHeight:v}=r,{x:S,y:I}=this.getPyramidPixelSize(e),w=Math.round((l.xmin-x.x)/S)%g,j=Math.round((l.xmax-x.x)/S)%g||g,T=Math.round((x.y-l.ymax)/I)%v,b=Math.round((x.y-l.ymin)/I)%v||v,_=s===d.minCol?w:0,M=t===d.minRow?T:0,R=s===d.maxCol?j:g,P=t===d.maxRow?b:v;return m$7(y,{x:_,y:M},{width:R-_,height:P-M}),y}getSliceIndex(e){if(!this._slices||t$2(e)||0===e.length)return null;const t=e;for(let i=0;i<this._slices.length;i++){const e=this._slices[i].multidimensionalDefinition;if(e.length===t.length&&!e.some((e=>{const i=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));if(!i)return !0;return (Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.statistics)),s=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.histograms)),a=await Promise.all([i,s]);return a[0]&&a[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation;})),{statistics:a[0]||null,histograms:a[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,e$2(t.datumTransformation));if(null===i)return null;let s=0;const{maximumPyramidLevel:r}=this.rasterInfo.storageInfo;let l=r-s+this._levelOffset;const o=i.srcLocation;for(;l>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(l,i.row,i.col,t))break}catch{}if(l--,s++,i=this.identifyPixelLocation(o,s,e$2(t.datumTransformation)),null===i)return null}return -1===l||null==i?null:s}async _fetchRasterInfo(e){const t=this.sourceJSON;if("Map"===this.tileType){const e=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),i=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),s=k$3.fromJSON(t.spatialReference||t.extent.spatialReference),a=new b$1({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:s});return new l$3({width:e,height:i,bandCount:3,extent:w.fromJSON(t.extent),spatialReference:s,pixelSize:a,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:i}=e,s=m$8(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),a=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:i}).then((e=>e.data&&e.data.slices)).catch((()=>null)):null,r=await Promise.all([s,a]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0);}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;0===t.xmin&&360===t.xmax&&i.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new c$3,e.extent=e.transform.forwardTransform(t));}};e$1([d$2({type:String,json:{write:!0}})],S.prototype,"datasetFormat",void 0),e$1([d$2()],S.prototype,"tileType",void 0),S=e$1([n$2("esri.layers.support.rasterDatasets.ImageServerRaster")],S);const I$1=S;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
const I=new Map;I.set("Int8","s8"),I.set("UInt8","u8"),I.set("Int16","s16"),I.set("UInt16","u16"),I.set("Int32","s32"),I.set("UInt32","u32"),I.set("Float32","f32"),I.set("Float64","f32"),I.set("Double64","f32");const b=new Map;b.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),b.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),b.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),b.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let A=class extends J{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF";}async open(t){await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?e$2(t.signal):null,o=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:i,files:a}=this._parseHeader(o.data);if(-1===this.ioConfig.skipExtensions?.indexOf("aux.xml")){const e=await this._fetchAuxiliaryData(t);null!=e&&(i.statistics=e.statistics??i.statistics,i.histograms=e.histograms,e.histograms&&t$2(i.statistics)&&(i.statistics=c$2(e.histograms)));}this._set("rasterInfo",i),this._files=a;const n=await this.request(a.index,{responseType:"array-buffer",signal:e});this._storageIndex=this._parseIndex(n.data);const{blockWidth:l,blockHeight:f}=this.rasterInfo.storageInfo,c=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:m,height:p}=this.rasterInfo,h=[],u=this._getBandSegmentCount();let g=0,y=-1;for(;g<this._storageIndex.length;){y++;const t=Math.ceil(m/l/c**y)-1,e=Math.ceil(p/f/c**y)-1;g+=(t+1)*(e+1)*u*4,h.push({maxRow:e,maxCol:t,minCol:0,minRow:0});}this.rasterInfo.storageInfo.blockBoundary=h,y>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=y),this.updateTileInfo();}async fetchRawTile(t,e,r,s={}){const{blockWidth:i,blockHeight:a,blockBoundary:l}=this.rasterInfo.storageInfo,f=l[t];if(!f||f.maxRow<e||f.maxCol<r||f.minRow>e||f.minCol>r)return null;const{bandCount:c,pixelType:m}=this.rasterInfo,{ranges:p,actualTileWidth:h,actualTileHeight:u}=this._getTileLocation(t,e,r);if(!p||0===p.length)return null;if(0===p[0].from&&0===p[0].to){const t=new Uint8Array(i*a);return new u$2({width:i,height:a,pixels:null,mask:t,validPixelCount:0})}const{bandIds:g}=this.ioConfig,d=this._getBandSegmentCount(),y=[];let x=0;for(x=0;x<d;x++)(!g||g.indexOf[x]>-1)&&y.push(this.request(this._files.data,{range:{from:p[x].from,to:p[x].to},responseType:"array-buffer",signal:s.signal}));const w=await Promise.all(y),I=w.map((t=>t.data.byteLength)).reduce(((t,e)=>t+e)),A=new Uint8Array(I);let F=0;for(x=0;x<d;x++)A.set(new Uint8Array(w[x].data),F),F+=w[x].data.byteLength;const _=b.get(this.rasterInfo.storageInfo.compression).decoderFormat,R=await this.decodePixelBlock(A.buffer,{width:i,height:a,format:_,planes:g?.length||c,pixelType:m});if(r$1(this.rasterInfo.noDataValue)&&"lerc"!==_&&!R.mask){const t=this.rasterInfo.noDataValue[0];if(null!=t){const e=R.width*R.height,r=new Uint8Array(e);if(Math.abs(t)>1e24)for(x=0;x<e;x++)Math.abs((R.pixels[0][x]-t)/t)>1e-6&&(r[x]=1);else for(x=0;x<e;x++)R.pixels[0][x]!==t&&(r[x]=1);R.mask=r;}}let j=0,k=0;if(h!==i||u!==a){let t=R.mask;if(t)for(x=0;x<a;x++)if(k=x*i,x<u)for(j=h;j<i;j++)t[k+j]=0;else for(j=0;j<i;j++)t[k+j]=0;else for(t=new Uint8Array(i*a),R.mask=t,x=0;x<u;x++)for(k=x*i,j=0;j<h;j++)t[k+j]=1;}return R}_parseIndex(t){if(t.byteLength%16>0)throw "invalid array buffer must be multiples of 16";let e,r,s,o,i,a;if(r$4){for(r=new Uint8Array(t),o=new ArrayBuffer(t.byteLength),s=new Uint8Array(o),i=0;i<t.byteLength/4;i++)for(a=0;a<4;a++)s[4*i+a]=r[4*i+3-a];e=new Uint32Array(o);}else e=new Uint32Array(t);return e}_getBandSegmentCount(){return b.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,r){const{blockWidth:s,blockHeight:o,pyramidScalingFactor:i}=this.rasterInfo.storageInfo,{width:a,height:n}=this.rasterInfo,l=this._getBandSegmentCount();let f,c,m,p=0,h=0;for(m=0;m<t;m++)h=i**m,f=Math.ceil(a/s/h),c=Math.ceil(n/o/h),p+=f*c;h=i**t,f=Math.ceil(a/s/h),c=Math.ceil(n/o/h),p+=e*f+r,p*=4*l;const u=this._storageIndex.subarray(p,p+4*l);let g=0,d=0;const y=[];for(let x=0;x<l;x++)g=u[4*x+0]*2**32+u[4*x+1],d=g+u[4*x+2]*2**32+u[4*x+3],y.push({from:g,to:d});return {ranges:y,actualTileWidth:r<f-1?s:Math.ceil(a/h)-s*(f-1),actualTileHeight:e<c-1?o:Math.ceil(n/h)-o*(c-1)}}_parseHeader(t$1){const r=e(t$1,"MRF_META/Raster");if(!r)throw new s$1("mrf:open","not a valid MRF format");const s=e(r,"Size"),o=parseInt(s.getAttribute("x"),10),i=parseInt(s.getAttribute("y"),10),a=parseInt(s.getAttribute("c"),10),n=(t(r,"Compression")||"none").toLowerCase();if(!b.has(n))throw new s$1("mrf:open","currently does not support compression "+n);const c=t(r,"DataType")||"UInt8",p=I.get(c);if(null==p)throw new s$1("mrf:open","currently does not support pixel type "+c);const g=e(r,"PageSize"),d=parseInt(g.getAttribute("x"),10),A=parseInt(g.getAttribute("y"),10),F=e(r,"DataValues");let _,R;F&&(R=F.getAttribute("NoData"),null!=R&&(_=R.trim().split(" ").map((t=>parseFloat(t)))));if(e(t$1,"MRF_META/CachedSource"))throw new s$1("mrf:open","currently does not support MRF referencing other data files");const j=e(t$1,"MRF_META/GeoTags"),k=e(j,"BoundingBox");let M,S=!1;if(null!=k){const t$1=parseFloat(k.getAttribute("minx")),e=parseFloat(k.getAttribute("miny")),r=parseFloat(k.getAttribute("maxx")),s=parseFloat(k.getAttribute("maxy")),o=t(j,"Projection")||"";let i;if("LOCAL_CS[]"!==o)if(o.toLowerCase().startsWith("epsg:")){const t=Number(o.slice(5));isNaN(t)||0===t||(i=new k$3({wkid:t}));}else i=c$1(o);else S=!0,i=new k$3({wkid:3857});M=new w(t$1,e,r,s),M.spatialReference=i;}else S=!0,M=new w({xmin:-.5,ymin:.5-i,xmax:o-.5,ymax:.5,spatialReference:new k$3({wkid:3857})});const T=e(t$1,"MRF_META/Rsets"),C=parseInt(T&&T.getAttribute("scale")||"2",10),U=M.spatialReference,B=new p$2({origin:new b$1({x:M.xmin,y:M.ymax,spatialReference:U}),blockWidth:d,blockHeight:A,pyramidBlockWidth:d,pyramidBlockHeight:A,compression:n,pyramidScalingFactor:C}),L=new b$1({x:M.width/o,y:M.height/i,spatialReference:U}),E=new l$3({width:o,height:i,extent:M,isPseudoSpatialReference:S,spatialReference:U,bandCount:a,pixelType:p,pixelSize:L,noDataValue:_,storageInfo:B}),P=t(t$1,"datafile"),O=t(t$1,"IndexFile");return {rasterInfo:E,files:{mrf:this.url,index:O||this.url.replace(".mrf",".idx"),data:P||this.url.replace(".mrf",b.get(n).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return d$1(e)}catch{return null}}};e$1([d$2()],A.prototype,"_files",void 0),e$1([d$2()],A.prototype,"_storageIndex",void 0),e$1([d$2({type:String,json:{write:!0}})],A.prototype,"datasetFormat",void 0),A=e$1([n$2("esri.layers.support.rasterIO.MRFRaster")],A);const F$1=A;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
const F=(e,t)=>{const r=e.get(t);return r&&r.values},E=(e,t)=>{const r=e.get(t);return r&&r.values[0]};let R=class extends J{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF";}async open(e){await this.init();const s=e?e$2(e.signal):null,{data:a}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:s});if(!a)throw new s$1("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:n,firstIFD:o,isBigTiff:f}=N$1(a),l=[];await this._readIFDs(l,a,n,o,0,f?8:4,s);const{imageInfo:u,rasterInfo:m}=this._parseIFDs(l);if(this._headerInfo={littleEndian:n,isBigTiff:f,ifds:l,...u},this._set("rasterInfo",m),!this._headerInfo.isSupported)throw new s$1("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);if(!this.ioConfig.skipExtensions?.includes("aux.xml")){const t=await this._fetchAuxiliaryMetaData(e);null!=t&&this._processPAMInfo(t,m);}1!==m.bandCount||"u8"!==m.pixelType||this.ioConfig.skipExtensions?.includes("vat.dbf")||(m.attributeTable=await this._fetchAuxiliaryTable(e),r$1(m.attributeTable)&&(m.keyProperties.DataType="thematic")),this.updateTileInfo();}async fetchRawTile(e,t,r,i={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,r))return null;const s=this._getTileLocation(e,t,r);if(!s)return null;const{ranges:a,actualTileWidth:n,actualTileHeight:o,ifd:f}=s,l=a.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:i.signal}))),u=await Promise.all(l),m=u.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),p=1===u.length?u[0].data:new ArrayBuffer(m),c=[0],h=[0];if(u.length>1){const e=new Uint8Array(p);for(let t=0,r=0;t<u.length;t++){const i=u[t].data;e.set(new Uint8Array(i),r),c[t]=r,r+=i.byteLength,h[t]=i.byteLength;}}const{blockWidth:d,blockHeight:y}=this.getBlockWidthHeight(e),g=await this.decodePixelBlock(p,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:f,offsets:c,sizes:h},width:d,height:y,planes:null,pixelType:null});let x,T,I;if(n!==d||o!==y){let e=g.mask;if(e)for(x=0;x<y;x++)if(I=x*d,x<o)for(T=n;T<d;T++)e[I+T]=0;else for(T=0;T<d;T++)e[I+T]=0;else for(e=new Uint8Array(d*y),g.mask=e,x=0;x<o;x++)for(I=x*d,T=0;T<n;T++)e[I+T]=1;}return g}_parseIFDs(e){const t=b$2(e),{width:r,height:i,tileWidth:s,tileHeight:a,planes:n,pixelType:l,compression:u,firstPyramidLevel:p,maximumPyramidLevel:c,pyramidBlockWidth:d,pyramidBlockHeight:y,tileBoundary:g,affine:x,metadata:T}=t,w$1=t.extent.spatialReference?.wkt||t.extent.spatialReference?.wkid;let F=c$1(w$1),E=!1;null==F&&(E=!0,F=new k$3({wkid:3857}));const R=new w({...t.extent,spatialReference:F}),k=new b$1(R?{x:R.xmin,y:R.ymax,spatialReference:F}:{x:0,y:0}),v=new p$2({blockWidth:s,blockHeight:a,pyramidBlockWidth:d,pyramidBlockHeight:y,compression:u,origin:k,firstPyramidLevel:p,maximumPyramidLevel:c,blockBoundary:g}),j=new b$1({x:(R.xmax-R.xmin)/r,y:(R.ymax-R.ymin)/i,spatialReference:F}),D=T?{BandProperties:T.bandProperties,DataType:T.dataType}:{},B=new l$3({width:r,height:i,bandCount:n,pixelType:l,compression:u,pixelSize:j,storageInfo:v,spatialReference:F,isPseudoSpatialReference:E,keyProperties:D,extent:R,statistics:T?T.statistics:null});return x?.length&&(B.nativeExtent=new w({xmin:-.5,ymin:.5-i,xmax:r-.5,ymax:.5,spatialReference:F}),B.transform=new m$6({polynomialOrder:1,forwardCoefficients:[x[2]+x[0]/2,x[5]-x[3]/2,x[0],x[3],-x[1],-x[4]]}),B.extent=B.transform.forwardTransform(B.nativeExtent),B.pixelSize=new b$1({x:(R.xmax-R.xmin)/r,y:(R.ymax-R.ymin)/i,spatialReference:F}),v.origin.x=-.5,v.origin.y=.5),{imageInfo:t,rasterInfo:B}}_processPAMInfo(e,t){if(t.statistics=e.statistics??t.statistics,t.histograms=e.histograms,e.histograms&&t$2(t.statistics)&&(t.statistics=c$2(e.histograms)),e.transform&&t$2(t.transform)){t.transform=e.transform,t.nativeExtent=t.extent;const r=t.transform.forwardTransform(t.nativeExtent);t.pixelSize=new b$1({x:(r.xmax-r.xmin)/t.width,y:(r.ymax-r.ymin)/t.height,spatialReference:t.spatialReference}),t.extent=r;}t.spatialReference||(t.spatialReference=e.spatialReference);}async _readIFDs(e,t,r,i,s,a=4,n){if(!i)return null;if(i>=t.byteLength||i<0){t=(await this.request(this.url,{range:{from:i+s,to:i+s+this._bufferSize},responseType:"array-buffer",signal:n})).data,s=i+s,i=0;}const o=await this._readIFD(t,r,i,s,n$5.TIFF_TAGS,a,n);if(e.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(e,t,r,o.nextIFD-s,s,a,n);}async _readIFD(e,t,r,i,s=n$5.TIFF_TAGS,a=4,n){if(!e)return null;const o=k$4(e,t,r,i,s,a);if(o.success){const r=[];if(o.ifd.forEach((e=>{e.values||r.push(e);})),r.length>0){const s=r.map((e=>e.offlineOffsetSize)),a=Math.min.apply(null,s.map((e=>e[0])));if(Math.min.apply(null,s.map((e=>e[0]+e[1])))-a<=this._bufferSize){const{data:s}=await this.request(this.url,{range:{from:a,to:a+this._bufferSize},responseType:"array-buffer",signal:n});e=s,i=a,r.forEach((r=>x$3(e,t,r,i)));}}if(o.ifd.has("GEOKEYDIRECTORY")){const r=o.ifd.get("GEOKEYDIRECTORY"),s=r.values;if(s&&s.length>4){const a=s[0]+"."+s[1]+"."+s[2],o=await this._readIFD(e,t,r.valueOffset+6-i,i,n$5.GEO_KEYS,2,n);r.data=o.ifd,r.data&&r.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[a]});}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==e.byteLength){const r=await this.request(this.url,{range:{from:i,to:i+o.requiredBufferSize+4},responseType:"array-buffer",signal:n});return (e=r.data).byteLength<o.requiredBufferSize?null:this._readIFD(e,t,0,i,n$5.TIFF_TAGS,4,n)}}_getTileLocation(e,t,r){const{firstPyramidLevel:i,blockBoundary:s}=this.rasterInfo.storageInfo,a=0===e?0:e-(i-1),n=this._headerInfo.ifds[a];if(!n)return null;const o=D$1(n,this._headerInfo),f=F(n,"TILEOFFSETS");if(void 0===f)return null;const l=F(n,"TILEBYTECOUNTS"),{minRow:u,minCol:m,maxRow:p,maxCol:c}=s[a];if(t>p||r>c||t<u||r<m)return null;const h=E(n,"IMAGEWIDTH"),d=E(n,"IMAGELENGTH"),y=E(n,"TILEWIDTH"),x=E(n,"TILELENGTH"),T=o?this.rasterInfo.bandCount:1,I=T*t*(c+1)+r,w=[{from:f[I],to:f[I+T-1]+l[I+T-1]-1}];if(o){let e=!0;for(let t=0;t<T;t++)if(f[I+t]+l[I+t]!==f[I+t+1]){e=!1;break}if(!e)for(let t=0;t<T;t++)w[t]={from:f[I+t],to:f[I+t]+l[I+t]-1};}const b=f[I],_=l[I];if(null==b||null==_)return null;return {ranges:w,ifd:n,actualTileWidth:r===c?h%y:y,actualTileHeight:t===p?d%x:x}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return d$1(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e?.signal}),r$1=r.parse(t);return r$1?.recordSet?x$2.fromJSON(r$1.recordSet):null}catch{return null}}};e$1([d$2()],R.prototype,"_files",void 0),e$1([d$2()],R.prototype,"_headerInfo",void 0),e$1([d$2()],R.prototype,"_bufferSize",void 0),e$1([d$2({type:String,json:{write:!0}})],R.prototype,"datasetFormat",void 0),R=e$1([n$2("esri.layers.support.rasterDatasets.TIFFRaster")],R);const k=R;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
const c=new Map;c.set("CRF",{desc:"Cloud Raster Format",constructor:I$2}),c.set("MRF",{desc:"Meta Raster Format",constructor:F$1}),c.set("TIFF",{desc:"GeoTIFF",constructor:k}),c.set("RasterTileServer",{desc:"Raster Tile Server",constructor:I$1}),c.set("JPG",{desc:"JPG Raster Format",constructor:y}),c.set("PNG",{desc:"PNG Raster Format",constructor:y}),c.set("GIF",{desc:"GIF Raster Format",constructor:y}),c.set("BMP",{desc:"BMP Raster Format",constructor:y});class n{static get supportedFormats(){const t=new Set;return c.forEach(((e,r)=>t.add(r))),t}static async open(e){const{url:r,ioConfig:s,sourceJSON:o}=e;let a=e.datasetFormat;null==a&&r.lastIndexOf(".")&&(a=r.slice(r.lastIndexOf(".")+1).toUpperCase()),"OVR"===a||"TIF"===a?a="TIFF":"JPG"!==a&&"JPEG"!==a&&"JFIF"!==a||(a="JPG"),r.toLowerCase().includes("/imageserver")&&!r.toLowerCase().includes("/wcsserver")&&(a="RasterTileServer");const n={url:r,sourceJSON:o,datasetFormat:a,ioConfig:s||{bandIds:null,sampling:null}};let l,i;if(this.supportedFormats.has(a)){if("CRF"===a&&!s.enableCRF)throw new s$1("rasterfactory:open",`cannot open raster: ${r}`);return l=c.get(a).constructor,i=new l(n),await i.open({signal:e.signal}),i}if(a)throw new s$1("rasterfactory:open","not a supported format "+a);const u=Array.from(c.keys());let F=0;const m=()=>(a=u[F++],a&&("CRF"!==a||s.enableCRF)?(l=c.get(a).constructor,i=new l(n),i.open({signal:e.signal}).then((()=>i)).catch((()=>m()))):null);return m()}static register(t,e,r){c.has(t.toUpperCase())||c.set(t.toUpperCase(),{desc:e,constructor:r});}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
let L=class extends(a$1(t$3(c$4(w$1(o$3(v(a$2(n$6(O$1(b$3)))))))))){constructor(...e){super(...e),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null;}normalizeCtorArgs(e,r){return "string"==typeof e?{url:e,...r}:e}load(e){const r=r$1(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(w$2).then((()=>this._openRaster(r)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){let e=[new y$2({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const{rasterInfo:r}=this,{attributeTable:t}=r,o=r$1(t)?t.fields:null,i="Raster.";if(o){const r=o.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const r=e.clone();return r.name=i+e.name,r}));e=e.concat(r);}const{dataType:s,multidimensionalInfo:n}=r;if(("vector-magdir"===s||"vector-uv"===s)&&r$1(n)){const r=n.variables[0].unit?.trim(),t="Magnitude"+(r?` (${r})`:"");e.push(new y$2({name:"Raster.Magnitude",alias:t,domain:null,editable:!1,type:"double"})),e.push(new y$2({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}));}return e}set renderer(e){this._set("renderer",e),this.updateRenderer();}readRenderer(e,r,o){const i=r&&r.layerDefinition&&r.layerDefinition.drawingInfo&&r.layerDefinition.drawingInfo.renderer,s=u$3(i,o)||void 0;if(null!=s)return s}createPopupTemplate(e){return d$5({fields:this.rasterFields,title:this.title},e)}write(e,r){const{raster:t}=this;if(this.loaded?"RasterTileServer"===t.datasetFormat&&("Raster"===t.tileType||"Map"===t.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,r);if(r&&r.messages){const e=`${r.origin}/${r.layerContainerType||"operational-layers"}`;r.messages.push(new s$1("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}));}return null}async _openRaster(e){this.raster?(this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url):this.raster=await n.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});const{rasterInfo:r}=this.raster;if(!r)throw new s$1("imagery-tile-layer:load","cannot load resources on "+this.url);if(this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"});}null==this.title&&(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(l$4((()=>this.customParameters),(e=>{this.raster.ioConfig.customFetchParameters=e;})));}};e$1([d$2({type:[T$2],json:{write:{overridePolicy(){return {enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],L.prototype,"bandIds",void 0),e$1([d$2({json:{write:{overridePolicy(){return {enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),r$5(o$4)],L.prototype,"interpolation",void 0),e$1([d$2({json:{write:!0}})],L.prototype,"multidimensionalDefinition",void 0),e$1([d$2(c$5)],L.prototype,"legendEnabled",void 0),e$1([d$2({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],L.prototype,"isReference",void 0),e$1([d$2({type:["show","hide"]})],L.prototype,"listMode",void 0),e$1([d$2({json:{read:!0,write:!0}})],L.prototype,"blendMode",void 0),e$1([d$2()],L.prototype,"sourceJSON",void 0),e$1([d$2({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],L.prototype,"version",void 0),e$1([d$2()],L.prototype,"title",void 0),e$1([d$2({readOnly:!0,json:{read:!1}})],L.prototype,"type",void 0),e$1([d$2({type:["ArcGISTiledImageServiceLayer"]})],L.prototype,"operationalLayerType",void 0),e$1([d$2({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,r)=>!r.disablePopup},write:{target:"disablePopup",overridePolicy(){return {enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,r,t){r[t]=!e;}}}})],L.prototype,"popupEnabled",void 0),e$1([d$2({type:J$1,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return {enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],L.prototype,"popupTemplate",void 0),e$1([d$2({readOnly:!0})],L.prototype,"defaultPopupTemplate",null),e$1([d$2({readOnly:!0,type:[y$2]})],L.prototype,"fields",void 0),e$1([d$2({readOnly:!0,type:[y$2]})],L.prototype,"rasterFields",null),e$1([d$2({types:l$1,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const e="raster-stretch"===this.renderer?.type&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return {enabled:!this.loaded||"Raster"===this.raster.tileType||!e}}},origins:{"web-scene":{types:i$4,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],L.prototype,"renderer",null),e$1([o$5("renderer")],L.prototype,"readRenderer",null),L=e$1([n$2("esri.layers.ImageryTileLayer")],L);const N=L;

export { N as default };
