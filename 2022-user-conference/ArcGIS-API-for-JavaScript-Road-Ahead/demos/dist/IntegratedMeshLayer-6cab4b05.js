import { n6 as u, e9 as j, n as j$1, U, lv as q, u as e, y, z as n$1, mC as p, my as c, mD as v, mv as t, mz as O, mE as i, bC as t$1, gD as a$1, hH as U$1, dd as c$1, c1 as w, m as r, t as t$2, E as s, mH as o, mK as d, eb as b$1 } from './_virtual_index-1ea2035a.js';
import { g } from './persistable-2efd2972.js';
import { N, L } from './SceneService-f34bce56.js';
import { s as s$1, l as l$1, u as u$1, m } from './I3SLayerDefinitions-49ecbb72.js';
import { f } from './SceneModification-46125cf8.js';
import './I3SIndexInfo-68240858.js';
import './resourceUtils-c3673d3f.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
var a;let n=a=class extends(u(j.ofType(f))){constructor(r){super(r),this.url=null;}clone(){return new a({url:this.url,items:this.items.map((r=>r.clone()))})}toJSON(r){return this.toArray().map((o=>o.toJSON(r))).filter((r=>!!r.geometry))}static fromJSON(r,o){const t=new a;for(const e of r)t.add(f.fromJSON(e,o));return t}static async fromUrl(r,t,e){const c={url:j$1(r),origin:"service"},p=await U(r,{responseType:"json",signal:q(e,"signal")}),n=t.toJSON(),l=[];for(const o of p.data)l.push(f.fromJSON({...o,geometry:{...o.geometry,spatialReference:n}},c));return new a({url:r,items:l})}};e([y({type:String})],n.prototype,"url",void 0),n=a=e([n$1("esri.layers.support.SceneModifications")],n);const l=n;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
let b=class extends(N(p(c(v(t(O(i(b$1)))))))){constructor(...e){super(...e),this._handles=new t$1,this.geometryType="mesh",this.operationalLayerType="IntegratedMeshLayer",this.type="integrated-mesh",this.nodePages=null,this.materialDefinitions=null,this.textureSetDefinitions=null,this.geometryDefinitions=null,this.serviceUpdateTimeStamp=null,this.profile="mesh-pyramids",this.modifications=null,this._modificationsSource=null,this.elevationInfo=null,this.path=null;}destroy(){this._handles.destroy();}initialize(){this._handles.add(a$1((()=>this.modifications),"after-changes",(()=>this.modifications=this.modifications),U$1));}normalizeCtorArgs(e,t){return "string"==typeof e?{url:e,...t}:e}readModifications(e,t,r){this._modificationsSource={url:c$1(e,r),context:r};}async load(e){return this.addResolvingPromise(this._doLoad(e)),this}async _doLoad(e){const t=q(e,"signal");try{await this.loadFromPortal({supportedTypes:["Scene Service"]},e);}catch(r){w(r);}if(await this._fetchService(t),r(this._modificationsSource)){const t=await l.fromUrl(this._modificationsSource.url,this.spatialReference,e);this.setAtOrigin("modifications",t,this._modificationsSource.context.origin),this._modificationsSource=null;}await this._fetchIndexAndUpdateExtent(this.nodePages,t);}beforeSave(){if(!t$2(this._modificationsSource))return this.load().then((()=>{}),(()=>{}))}async saveAs(e,t){return this._debouncedSaveOperations(L.SAVE_AS,{...t,getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"},e)}async save(){const e={getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"};return this._debouncedSaveOperations(L.SAVE,e)}validateLayer(e){if(e.layerType&&"IntegratedMesh"!==e.layerType)throw new s("integrated-mesh-layer:layer-type-not-supported","IntegratedMeshLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new s("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});if(this.version.major>1)throw new s("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"})}_getTypeKeywords(){return ["IntegratedMeshLayer"]}};e([y({type:String,readOnly:!0})],b.prototype,"geometryType",void 0),e([y({type:["show","hide"]})],b.prototype,"listMode",void 0),e([y({type:["IntegratedMeshLayer"]})],b.prototype,"operationalLayerType",void 0),e([y({json:{read:!1},readOnly:!0})],b.prototype,"type",void 0),e([y({type:s$1,readOnly:!0})],b.prototype,"nodePages",void 0),e([y({type:[l$1],readOnly:!0})],b.prototype,"materialDefinitions",void 0),e([y({type:[u$1],readOnly:!0})],b.prototype,"textureSetDefinitions",void 0),e([y({type:[m],readOnly:!0})],b.prototype,"geometryDefinitions",void 0),e([y({readOnly:!0})],b.prototype,"serviceUpdateTimeStamp",void 0),e([y({type:l}),g({origins:["web-scene","portal-item"],type:"resource",prefix:"modifications"})],b.prototype,"modifications",void 0),e([o(["web-scene","portal-item"],"modifications")],b.prototype,"readModifications",null),e([y(d)],b.prototype,"elevationInfo",void 0),e([y({type:String,json:{origins:{"web-scene":{read:!0,write:!0},"portal-item":{read:!0,write:!0}},read:!1}})],b.prototype,"path",void 0),b=e([n$1("esri.layers.IntegratedMeshLayer")],b);const A=b;

export { A as default };
