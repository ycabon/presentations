import { ep as y, b1 as n, bC as t, e9 as j, eT as p, bl as f, lZ as P, b7 as l, es as s, t as t$1, c7 as g, ev as m, e_ as l$1, eU as h$2, m as r, gh as p$1, gv as r$1, P as g$2, bk as w, lv as q, l_ as f$1, bD as j$1, l$ as e$1, bh as c, $ as s$2, E as s$3, u as e$2, y as y$1, lW as e$3, bg as P$1, eX as w$1, z as n$2 } from './_virtual_index-1ea2035a.js';
import { j as j$2 } from './quantityFormatUtils-d7b5c624.js';
import { g as g$1 } from './SnappingVisualizer2D-d3240c9a.js';
import { s as s$1 } from './drawUtils-716bb6e9.js';
import { h as h$1, D } from './GraphicMover-e499299e.js';
import { h } from './settings-53bbd435.js';
import { V } from './EditGeometryOperations-2f1c7df5.js';
import { e } from './SnappingContext-a1ff8c28.js';
import { h as h$3, c as l$2, b as m$1 } from './automaticLengthMeasurementUtils-ee98e9f2.js';
import { r as r$2, n as n$1 } from './TranslateTooltipInfos-6a2dddcf.js';
import { u } from './automaticAreaMeasurementUtils-4f3d1b01.js';
import './enums-3e26cf0d.js';
import './GraphicManipulator-dab088a1.js';
import './drapedUtils-fff0739e.js';
import './PointSnappingHint-71b3a4f1.js';
import './euclideanLengthMeasurementUtils-93ea014d.js';
import './measurementUtils-d2a749ce.js';
import './geometryEngine-d05be472.js';
import './geometryEngineBase-16bf8893.js';
import './hydrated-40740f3e.js';
import './euclideanAreaMeasurementUtils-01fe08b0.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
class B{constructor(e,t,i){this.graphic=e,this.mover=t,this.selected=i,this.type="reshape-start";}}class J{constructor(e,t,i){this.graphic=e,this.mover=t,this.selected=i,this.type="reshape";}}class Q{constructor(e,t,i){this.graphic=e,this.mover=t,this.selected=i,this.type="reshape-stop";}}class W{constructor(e,t,i){this.mover=e,this.dx=t,this.dy=i,this.type="move-start";}}class X{constructor(e,t,i){this.mover=e,this.dx=t,this.dy=i,this.type="move";}}class Y{constructor(e,t,i){this.mover=e,this.dx=t,this.dy=i,this.type="move-stop";}}class Z{constructor(e){this.added=e,this.type="vertex-select";}}class ${constructor(e){this.removed=e,this.type="vertex-deselect";}}class ee{constructor(e,t,i,s){this.added=e,this.graphic=t,this.oldGraphic=i,this.vertices=s,this.type="vertex-add";}}class te{constructor(e,t,i,s){this.removed=e,this.graphic=t,this.oldGraphic=i,this.vertices=s,this.type="vertex-remove";}}const ie=h.reshapeGraphics,se={vertices:{default:new y({style:"circle",size:ie.vertex.size,color:ie.vertex.color,outline:{color:ie.vertex.outlineColor,width:1}}),hover:new y({style:"circle",size:ie.vertex.hoverSize,color:ie.vertex.hoverColor,outline:{color:ie.vertex.hoverOutlineColor,width:1}}),selected:new y({style:"circle",size:ie.selected.size,color:ie.selected.color,outline:{color:ie.selected.outlineColor,width:1}})},midpoints:{default:new y({style:"circle",size:ie.midpoint.size,color:ie.midpoint.color,outline:{color:ie.midpoint.outlineColor,width:1}}),hover:new y({style:"circle",size:ie.midpoint.size,color:ie.midpoint.color,outline:{color:ie.midpoint.outlineColor,width:1}})}};let oe=class extends n.EventedAccessor{constructor(e){super(e),this._activeOperationInfo=null,this._editGeometryOperations=null,this._handles=new t,this._graphicAttributes={esriSketchTool:"box"},this._mover=null,this._snappingTask=null,this._stagedVertex=null,this._tooltip=null,this._viewHandles=new t,this.callbacks={onReshapeStart(){},onReshape(){},onReshapeStop(){},onMoveStart(){},onMove(){},onMoveStop(){},onGraphicClick(){}},this.enableMidpoints=!0,this.enableMovement=!0,this.enableVertices=!0,this.graphic=null,this.layer=null,this.midpointGraphics=new j,this.midpointSymbol=new y({style:"circle",size:6,color:[200,200,200],outline:{color:[100,100,100],width:1}}),this.selectedVertices=[],this.snappingManager=null,this.tooltipOptions=new p,this.type="reshape",this.vertexGraphics=new j,this.view=null;}initialize(){const e=this.view;this._highlightHelper=new h$1({view:e}),this._setup(),this._handles.add([f((()=>e?.ready),(()=>{const{layer:e,view:t}=this;e$3(t,e),this._viewHandles.add(t.on("key-down",(e=>this._keyDownHandler(e)),P$1.TOOL));}),{once:!0,initial:!0}),P((()=>this.graphic),(()=>this.refresh())),P((()=>this.layer),((e,t)=>{t&&(this._clearSelection(),this._resetGraphics(t)),this.refresh();})),P((()=>this.enableMidpoints),(()=>this.refresh())),l((()=>this.tooltipOptions.enabled),(e=>{this._tooltip=e?new m$1({view:this.view}):s(this._tooltip);}),w$1)]);}destroy(){this._reset(),this._mover?.destroy(),this._mover=null,this._tooltip=s(this._tooltip),this._handles=s(this._handles),this._viewHandles=s(this._viewHandles);}set highlightsEnabled(e){this._highlightHelper?.removeAll(),this._set("highlightsEnabled",e),this._setUpHighlights();}get state(){const e=!!this.get("view.ready"),t=!(!this.get("graphic")||!this.get("layer"));return e&&t?"active":e?"ready":"disabled"}set symbols(e){const{midpoints:t=se.midpoints,vertices:i=se.vertices}=e||{};this._set("symbols",{midpoints:t,vertices:i});}isUIGraphic(e){const t=[];return this.graphic&&t.push(this.graphic),t.concat(this.vertexGraphics.items,this.midpointGraphics.items),t.length&&t.includes(e)}refresh(){this._reset(),this._setup();}reset(){this.graphic=null;}clearSelection(){this._clearSelection();}removeSelectedVertices(){this.selectedVertices.length&&this._removeVertices(this.selectedVertices);}_setup(){const{graphic:e,layer:t}=this;if(!t||!e||t$1(e.geometry))return;const i=e.geometry;"mesh"!==i.type&&"extent"!==i.type?("polygon"===i.type&&g(i),this._setUpHighlights(),this._setupGraphics(),this._setupMover()):this._logGeometryTypeError();}_setUpHighlights(){this.highlightsEnabled&&this.graphic&&this._highlightHelper.add(this.graphic);}_setUpGeometryHelper(){const e=this.graphic.geometry;if(t$1(e)||"mesh"===e.type||"extent"===e.type)return void this._logGeometryTypeError();const t="multipoint"===e.type?new m({paths:e.points,spatialReference:e.spatialReference}):e;this._editGeometryOperations=V.fromGeometry(t,l$1.Local);}_saveSnappingContextForHandle(e$1,t){this._snappingGraphicsLayer=new h$2({listMode:"hide",internal:!0,title:"Reshape snapping layer"}),this.view.map.layers.add(this._snappingGraphicsLayer),this._snappingContext=new e({editGeometryOperations:this._editGeometryOperations,elevationInfo:{mode:"on-the-ground",offset:0},pointer:t.viewEvent?.pointerType||"mouse",excludeFeature:this.graphic,visualizer:new g$1(this._snappingGraphicsLayer),vertexHandle:this._getVertexFromEditGeometry(e$1)});}_reset(){this._clearSelection(),this._highlightHelper.removeAll(),this._updateTooltip(),this._resetGraphics(),this._resetSnappingStateVars(),this._activeOperationInfo=null,this._mover&&this._mover.destroy(),this._mover=null,this.view.cursor="default";}_resetSnappingStateVars(){r(this.snappingManager)&&this.snappingManager.doneSnapping(),r(this._snappingGraphicsLayer)&&(this.view?.map&&this.view.map.layers.remove(this._snappingGraphicsLayer),this._snappingGraphicsLayer.destroy()),this._editGeometryOperations=s(this._editGeometryOperations),this._snappingTask=p$1(this._snappingTask),this._snappingTask=null,this._snappingContext=null,this._stagedVertex=null;}_resetGraphics(e){this._removeMidpointGraphics(e),this._removeVertexGraphics(e),this._set("selectedVertices",[]);}_removeMidpointGraphics(e){const t=e||this.layer;t&&t.removeMany(this.midpointGraphics.items),this.midpointGraphics.items.forEach((e=>e.destroy())),this.midpointGraphics.removeAll();}_removeVertexGraphics(e){const t=e||this.layer;t&&t.removeMany(this.vertexGraphics.items),this.vertexGraphics.items.forEach((e=>e.destroy())),this.vertexGraphics.removeAll();}_getCoordinatesForUI(e){const t=r$1(e.clone());if("polygon"===e.type)for(const i of t){const e=i[i.length-1];i[0][0]===e[0]&&i[0][1]===e[1]&&i.length>2&&i.pop();}return t}_setupGraphics(){const e=this.graphic.geometry;if(r(e)&&("polyline"===e.type||"polygon"===e.type)){const t=this._getCoordinatesForUI(e);this.enableMidpoints&&this._setUpMidpointGraphics(t),this.enableVertices&&this._setUpVertexGraphics(t);}}_setUpMidpointGraphics(e){this._removeMidpointGraphics();const t=this._createMidpointGraphics(e);this.midpointGraphics.addMany(t),this.layer.addMany(t);}_setUpVertexGraphics(e){this._removeVertexGraphics();const t=this._createVertexGraphics(e);this.vertexGraphics.addMany(t),this._storeRelatedVertexIndices(),this.layer.addMany(t);}_createVertexGraphics(e){const{_graphicAttributes:i,symbols:s,view:{spatialReference:o}}=this,r=[];return e?.forEach(((e,n)=>{e.forEach(((e,a)=>{const[h,p]=e;r.push(new g$2({geometry:new w({x:h,y:p,spatialReference:o}),symbol:s?.vertices?.default,attributes:{...i,pathIndex:n,pointIndex:a}}));}));})),r}_createMidpointGraphics(e){const{_graphicAttributes:i,symbols:s,view:{spatialReference:o}}=this,r=[];return e?.forEach(((e,n)=>{e.forEach(((a,h)=>{const[p,c]=a,l=e[h+1]?h+1:0;if("polygon"===q(this.graphic.geometry,"type")||0!==l){const[a,d]=e[l],[m,v]=f$1([p,c],[a,d]);r.push(new g$2({geometry:new w({x:m,y:v,spatialReference:o}),symbol:s.midpoints.default,attributes:{...i,pathIndex:n,pointIndexStart:h,pointIndexEnd:l}}));}}));})),r}_storeRelatedVertexIndices(){const e=this.vertexGraphics.items;if(!e)return;const t=e.map((({geometry:e})=>({x:e.x,y:e.y})));for(let i=0;i<t.length;i++){const s=[];for(let e=0;e<t.length;e++){if(i===e)continue;const o=t[i],r=t[e];o.x===r.x&&o.y===r.y&&s.push(e);}e[i].attributes.relatedGraphicIndices=s;}}_setupMover(){const{enableMovement:e,graphic:t,midpointGraphics:i,vertexGraphics:s,view:o}=this,r=s.concat(i).items;e&&r.push(t),this._mover=new D({enableMoveAllGraphics:!1,highlightsEnabled:!1,indicatorsEnabled:!1,graphics:r,view:o,callbacks:{onGraphicClick:e=>this._onGraphicClickCallback(e),onGraphicMoveStart:e=>this._onGraphicMoveStartCallback(e),onGraphicMove:e=>this._onGraphicMoveCallback(e),onGraphicMoveStop:e=>this._onGraphicMoveStopCallback(e),onGraphicPointerOver:e=>this._onGraphicPointerOverCallback(e),onGraphicPointerOut:e=>this._onGraphicPointerOutCallback(e)}});}_onGraphicClickCallback(e){e.viewEvent.stopPropagation();const t=e.graphic;if(t===this.graphic)this.clearSelection(),this.emit("graphic-click",e),this.callbacks.onGraphicClick&&this.callbacks.onGraphicClick(e);else if(this._isMidpoint(t)){if(2===e.viewEvent.button)return;const i=this.graphic.clone(),s=this._createVertexFromMidpoint(t);this.refresh(),this._emitVertexAddEvent([t],i,s);}else if(this._isVertex(t))if(e.viewEvent.stopPropagation(),2===e.viewEvent.button)this._removeVertices(t);else {e.viewEvent.native.shiftKey||this._clearSelection(),this.selectedVertices.includes(t)?this._removeFromSelection(t,!0):this._addToSelection(t);}}_setUpOperation(e){const{graphic:t,dx:i,dy:s}=e,o=t===this.graphic;this._resetSnappingStateVars(),this._setUpGeometryHelper(),this._saveSnappingContextForHandle(t,e),this._activeOperationInfo={target:this.graphic,mover:t,operationType:o?"move":"reshape",totalDx:i,totalDy:s};}_onGraphicMoveStartCallback(e){const{dx:t,dy:i,graphic:s}=e;if(s===this.graphic){const{geometry:o}=s;return this._setUpOperation(e),this._emitMoveStartEvent(t,i),void(r(o)&&"point"===o.type&&this._onHandleMove(s,t,i,e,(()=>{this._updateTooltip(this.graphic,e.viewEvent),this._emitMoveEvent(t,i);})))}if(!this.selectedVertices.includes(s)){if(this._clearSelection(),this._isMidpoint(s)){const e=this.graphic.clone(),t=this._createVertexFromMidpoint(s);this._emitVertexAddEvent([s],e,t);}this._addToSelection(s);}this._setUpOperation(e),this._emitReshapeStartEvent(s),this._onHandleMove(s,t,i,e,(()=>{this._updateTooltip(s,e.viewEvent),this._emitReshapeEvent(s);}));}_onGraphicMoveCallback(e){const{dx:t,dy:i,graphic:s}=e;this._activeOperationInfo.totalDx+=t,this._activeOperationInfo.totalDy+=i;const{operationType:o}=this._activeOperationInfo,{geometry:r}=s;if(!t$1(r))if("move"!==o)this._onHandleMove(s,t,i,e,(()=>{this._updateTooltip(s,e.viewEvent),this._emitReshapeEvent(s);}));else if("point"===r.type)this._onHandleMove(s,t,i,e,(()=>{this._updateTooltip(this.graphic,e.viewEvent),this._emitMoveEvent(t,i);}));else if("polyline"===r.type||"polygon"===r.type){const s=this._getCoordinatesForUI(r);this._updateVertexGraphicLocations(s),this._updateTooltip(this.graphic,e.viewEvent),this._emitMoveEvent(t,i);}}_onGraphicMoveStopCallback(e){const{dx:t,dy:i,graphic:s}=e,{operationType:o}=this._activeOperationInfo;this._activeOperationInfo.totalDx+=t,this._activeOperationInfo.totalDy+=i,this._onHandleMove(s,t,i,e,(()=>"move"===o?this._emitMoveStopEvent():this._emitReshapeStopEvent(s))),this._isMidpoint(s)?this.refresh():(this._updateTooltip(this._isVertex(s)?s:null),this._resetSnappingStateVars(),this._activeOperationInfo=null);}_updateVertexGraphicLocations(e){const t=this.view.spatialReference;for(const i of this.vertexGraphics){const{pathIndex:s,pointIndex:o}=i.attributes,[r,n]=e[s][o];i.geometry=new w({x:r,y:n,spatialReference:t});}this._updateMidpointGraphicLocations(e);}_updateMidpointGraphicLocations(e){for(const t of this.midpointGraphics){const{pathIndex:i,pointIndexStart:s,pointIndexEnd:o}=t.attributes,[r,n]=e[i][s],[a,h]=e[i][o],[p,c]=f$1([r,n],[a,h]);t.geometry=new w({x:p,y:c,spatialReference:this.view.spatialReference});}}_getIndicesForVertexGraphic({attributes:e}){return [e?.pathIndex||0,e?.pointIndex||0]}_getVertexFromEditGeometry(e){const[t,i]=this._getIndicesForVertexGraphic(e);return this._editGeometryOperations.data.components[t].vertices[i]}_onHandleMove(e,t,s,o,r$1){if(p$1(this._snappingTask),!this._snappingContext)return;const n=e.geometry,a="graphic-move-stop"===o.type;if(r(this.snappingManager)&&this.selectedVertices.length<2&&!a){const o=this.snappingManager;this._stagedVertex=o.update({point:n,context:this._snappingContext}),this._syncGeometryAfterVertexMove(e,new w(this._stagedVertex),t,s,a),r$1(),this._snappingTask=j$1((async i=>{const h=await o.snap({point:n,context:this._snappingContext,signal:i});h.valid&&(this._stagedVertex=h.apply(),this._syncGeometryAfterVertexMove(e,new w(this._stagedVertex),t,s,a),r$1());}));}else {const i=r(this._stagedVertex)?new w(this._stagedVertex):n;this._syncGeometryAfterVertexMove(e,i,t,s,a),r$1();}}async _syncGeometryAfterVertexMove(e,t,i,s,o=!1){const r=this._editGeometryOperations.data.geometry;if("point"===r.type)e.geometry=t;else {const{x:n,y:a}=t,[h,p]=this._getIndicesForVertexGraphic(e);let c=r$1(r);const l=c[h].length-1;c[h][p]=[n,a],"polygon"===r.type&&(0===p?c[h][l]=[n,a]:p===l&&(c[h][0]=[n,a])),this._isVertex(e)&&(c=this._moveRelatedCoordinates(c,e,n,a),c=this._moveSelectedHandleCoordinates(c,e,i,s,"polygon"===r.type),this._updateMidpointGraphicLocations(c)),this.graphic.geometry=r.clone();const d=this._getVertexFromEditGeometry(e),m=n-d.pos[0],v=a-d.pos[1];this._editGeometryOperations.moveVertices([d],m,v,0),o&&(this._mover?this._mover.updateGeometry(this._mover.graphics.indexOf(e),t):e.geometry=t);}}_moveRelatedCoordinates(e,t,i,s){const{relatedGraphicIndices:o}=t.attributes;for(const r of o){const o=this.vertexGraphics.getItemAt(r),{pathIndex:n,pointIndex:a}=o.attributes;e[n][a]=[i,s],o.geometry=t.geometry;}return e}_moveSelectedHandleCoordinates(e,t,i,s,o){for(const r of this.selectedVertices)if(r!==t){const{pathIndex:t,pointIndex:n,relatedGraphicIndices:a}=r.attributes,h=s$1(r.geometry,i,s,this.view),p=e[t].length-1;e[t][n]=[h.x,h.y],r.geometry=h,o&&(0===n?e[t][p]=[h.x,h.y]:n===p&&(e[t][0]=[h.x,h.y]));for(const i of a){const t=this.vertexGraphics.getItemAt(i),{pathIndex:s,pointIndex:o}=t.attributes;e[s][o]=[h.x,h.y],t.geometry=h;}}return e}_onGraphicPointerOverCallback(e){const t=e.graphic,i=this._isVertex(t);i&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.hover),this._updateTooltip(i?t:null),this._updateHoverCursor(t);}_onGraphicPointerOutCallback(e){const t=e.graphic;this._isVertex(t)&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.default),this.view.cursor="default",this._updateTooltip();}_createVertexFromMidpoint(e){const{_graphicAttributes:t,graphic:i}=this,s=i.geometry;if(t$1(s)||"polygon"!==s.type&&"polyline"!==s.type)return [];const o=s.clone(),r=[],{pathIndex:n,pointIndexStart:a,pointIndexEnd:h}=e.attributes,{x:c,y:l}=e.geometry,d=0===h?a+1:h,m=r$1(o);return m[n].splice(d,0,[c,l]),e.attributes={...t,pathIndex:n,pointIndex:d,relatedGraphicIndices:[]},r.push({coordinates:m[n][d],componentIndex:n,vertexIndex:d}),this.graphic.geometry=o,r}_addToSelection(e){e instanceof g$2&&(e=[e]);for(const t of e)t.symbol=this.symbols.vertices.selected;this._set("selectedVertices",this.selectedVertices.concat(e)),this._emitSelectEvent(e);}_removeFromSelection(e,i){const{vertices:s}=this.symbols,o=i?s.hover:s.default;e instanceof g$2&&(e=[e]);for(const t of e)this.selectedVertices.splice(this.selectedVertices.indexOf(t),1),this._set("selectedVertices",this.selectedVertices),t.set("symbol",o);this._emitDeselectEvent(e);}_clearSelection(){if(this.selectedVertices.length){const e=this.selectedVertices;for(const t of this.selectedVertices)t.set("symbol",this.symbols.vertices.default);this._set("selectedVertices",[]),this._emitDeselectEvent(e);}}_keyDownHandler(e){e$1.delete.includes(e.key)&&!e.repeat&&this.selectedVertices.length&&this._removeVertices(this.selectedVertices);}_removeVertices(e){const i=this.graphic.geometry;if(t$1(i)||"polygon"!==i.type&&"polyline"!==i.type)return;if("polygon"===i.type&&this.vertexGraphics.length<4||this.vertexGraphics.length<3)return;e instanceof g$2&&(e=[e]);const s=this.graphic.clone(),o=i.clone();let r=r$1(o);const n=[];e instanceof g$2&&(e=[e]);for(const t of e){const{x:e,y:i}=t.geometry;for(let t=0;t<r.length;t++){const s=r[t];for(let o=0;o<s.length;o++){const[a,h]=s[o];e===a&&i===h&&(n.push({coordinates:r[t][o],componentIndex:t,vertexIndex:o}),r[t].splice(Number(o),1));}}}if("polygon"===o.type)r=r.filter((e=>{if(e.length<2)return !1;const[t,i]=e[0],[s,o]=e[e.length-1];return (2!==e.length||t!==s||i!==o)&&(t===s&&i===o||e.push(e[0]),!0)})),o.rings=r;else {for(const e of r)1===e.length&&r.splice(r.indexOf(e),1);o.paths=r;}this.graphic.geometry=o,this.refresh(),this._emitVertexRemoveEvent(e,s,n);}_isVertex(e){return this.vertexGraphics.includes(e)}_isSelected(e){return this._isVertex(e)&&this.selectedVertices.includes(e)}_isMidpoint(e){return this.midpointGraphics.includes(e)}_updateHoverCursor(e){this.view.cursor=this._isMidpoint(e)?"copy":"move";}_updateTooltip(e,t){t$1(this._tooltip)||(e?e===this.graphic?this._updateMoveGraphicTooltip(t):this._updateMoveVertexTooltip(t):this._tooltip.clear());}_updateMoveGraphicTooltip(e){const{_tooltip:t,tooltipOptions:i,view:s}=this;if(t$1(t))return;const o=new r$2({tooltipOptions:i});if(e){const{x:t,y:i}=e.origin,r$1=s.toMap(e),n=s.toMap(c(t,i)),a=h$3(n,r$1);o.distance=r(a)?a:j$2;}t.info=o;}_updateMoveVertexTooltip(e){const{_tooltip:t,graphic:{geometry:i},tooltipOptions:s,view:o}=this;if(t$1(t))return;const r$1=new n$1({tooltipOptions:s});if(r(i)&&("polygon"===i.type?r$1.area=u(i):"polyline"===i.type&&(r$1.totalLength=l$2(i))),e){const{x:t,y:i}=e.origin,s=o.toMap(e),n=o.toMap(c(t,i)),a=h$3(n,s);r$1.distance=r(a)?a:j$2;}t.info=r$1;}_emitMoveStartEvent(e,t){const i=new W(this.graphic,e,t);this.emit("move-start",i),this.callbacks.onMoveStart&&this.callbacks.onMoveStart(i);}_emitMoveEvent(e,t){const i=new X(this.graphic,e,t);this.emit("move",i),this.callbacks.onMove&&this.callbacks.onMove(i);}_emitMoveStopEvent(){const{totalDx:e,totalDy:t}=this._activeOperationInfo,i=new Y(this.graphic,e,t);this.emit("move-stop",i),this.callbacks.onMoveStop&&this.callbacks.onMoveStop(i);}_emitReshapeStartEvent(e){const t=new B(this.graphic,e,this.selectedVertices);this.emit("reshape-start",t),this.callbacks.onReshapeStart&&this.callbacks.onReshapeStart(t);}_emitReshapeEvent(e){const t=new J(this.graphic,e,this.selectedVertices);this.emit("reshape",t),this.callbacks.onReshape&&this.callbacks.onReshape(t);}_emitReshapeStopEvent(e){const t=new Q(this.graphic,e,this.selectedVertices);this.emit("reshape-stop",t),this.callbacks.onReshapeStop&&this.callbacks.onReshapeStop(t);}_emitSelectEvent(e){const t=new Z(e);this.emit("select",t),this.callbacks.onVertexSelect&&this.callbacks.onVertexSelect(t);}_emitDeselectEvent(e){const t=new $(e);this.emit("deselect",t),this.callbacks.onVertexDeselect&&this.callbacks.onVertexDeselect(t);}_emitVertexAddEvent(e,t,i){const s=new ee(e,this.graphic,t,i);this.emit("vertex-add",s),this.callbacks.onVertexAdd&&this.callbacks.onVertexAdd(s);}_emitVertexRemoveEvent(e,t,i){const s=new te(e,this.graphic,t,i);this.emit("vertex-remove",s),this.callbacks.onVertexRemove&&this.callbacks.onVertexRemove(s);}_logGeometryTypeError(){s$2.getLogger(this.declaredClass).error(new s$3("reshape:invalid-geometry","Reshape operation not supported for the provided graphic. The geometry type is not supported."));}};e$2([y$1()],oe.prototype,"_tooltip",void 0),e$2([y$1()],oe.prototype,"callbacks",void 0),e$2([y$1()],oe.prototype,"enableMidpoints",void 0),e$2([y$1()],oe.prototype,"enableMovement",void 0),e$2([y$1()],oe.prototype,"enableVertices",void 0),e$2([y$1()],oe.prototype,"graphic",void 0),e$2([y$1({value:!0})],oe.prototype,"highlightsEnabled",null),e$2([y$1()],oe.prototype,"layer",void 0),e$2([y$1({readOnly:!0})],oe.prototype,"midpointGraphics",void 0),e$2([y$1()],oe.prototype,"midpointSymbol",void 0),e$2([y$1({readOnly:!0})],oe.prototype,"selectedVertices",void 0),e$2([y$1()],oe.prototype,"snappingManager",void 0),e$2([y$1({readOnly:!0})],oe.prototype,"state",null),e$2([y$1({value:se})],oe.prototype,"symbols",null),e$2([y$1({type:p})],oe.prototype,"tooltipOptions",void 0),e$2([y$1({readOnly:!0})],oe.prototype,"type",void 0),e$2([y$1({readOnly:!0})],oe.prototype,"vertexGraphics",void 0),e$2([y$1()],oe.prototype,"view",void 0),oe=e$2([n$2("esri.views.draw.support.Reshape")],oe);const re=oe;

export { re as default };
