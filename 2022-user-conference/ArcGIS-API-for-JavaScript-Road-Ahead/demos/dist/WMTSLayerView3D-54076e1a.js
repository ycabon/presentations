import { qs as f$1, r, j, Z as s, jX as j$1, t, B as e, C as d$1, D as n$1 } from './_virtual_index-9b831d4a.js';
import { n } from './LayerView3D-b7813df6.js';
import { c } from './TiledLayerView3D-3780d78b.js';
import { u } from './LayerView-e26ca8f9.js';
import { i } from './RefreshableLayerView-18d98912.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
let d=class extends(i(c(n(u)))){constructor(){super(...arguments),this.type="wmts-3d";}get hasMixedImageFormats(){return !0}_getCompatibleTileInfoMatrixSet(e,s$1=!1){const o=f$1(this.layer);if(r(o)){if(j.isCollection(o)){const t=o.find((t=>{const o=e(t);return r(o)&&(s$1?s.getLogger(this.declaredClass).error("The selected tile matrix set is not compatible with the view",o):this.addResolvingPromise(Promise.reject(o))),null==o}));return t}const a=e(o);return r(a)&&(s$1?s.getLogger(this.declaredClass).error("The selected tile matrix set is not compatible with the view",a):this.addResolvingPromise(Promise.reject(a))),o}return null}initialize(){this._getCompatibleTileInfoMatrixSet((e=>this._getTileInfoSupportError(e.tileInfo,e.fullExtent)));const e=j$1((()=>this.view?.basemapTerrain?.tilingSchemeLocked)).then((()=>{const e=this._getCompatibleTileInfoMatrixSet((e=>this._getTileInfoSupportError(e.tileInfo,e.fullExtent)||this._getTileInfoCompatibilityError(e.tileInfo,this.view.basemapTerrain.tilingScheme)));t(e)||(this.layer.activeLayer.tileMatrixSetId!==e.id&&(this.layer.activeLayer.tileMatrixSetId=e.id),this.tileInfo=e.tileInfo,this.layer.fullExtent=e.fullExtent);}));this.addResolvingPromise(e),this.when((()=>this._postInitialize()));}refresh(){this.emit("data-changed");}canResume(){if(!super.canResume())return !1;const e=this.layer.activeLayer.tileMatrixSet;return e&&!this._getTileInfoError(e.tileInfo,e.fullExtent)}async doRefresh(){this.suspended||this.emit("data-changed");}_postInitialize(){this.updatingHandles.add((()=>this.layer?.activeLayer?.styleId),(()=>this.refresh())),this.updatingHandles.add((()=>this.layer?.activeLayer),(e=>{const t=this._getCompatibleTileInfoMatrixSet((e=>this._getTileInfoSupportError(e.tileInfo,e.fullExtent)||this._getTileInfoCompatibilityError(e.tileInfo,this.view.basemapTerrain.tilingScheme)),!0);r(t)&&e.tileMatrixSetId!==t.id&&(this.layer.activeLayer.tileMatrixSetId=t.id),this.notifyChange("suspended"),this.canResume()&&this.refresh();}));}_getTileInfoError(e,t){return this._getTileInfoSupportError(e,t)||this._getTileInfoCompatibilityError(e,this.view.basemapTerrain.tilingScheme)}};e([d$1({readOnly:!0})],d.prototype,"hasMixedImageFormats",null),e([d$1()],d.prototype,"layer",void 0),e([d$1()],d.prototype,"suspended",void 0),d=e([n$1("esri.views.3d.layers.WMTSLayerView3d")],d);const f=d;

export { f as default };
