/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import t from"../core/Accessor.js";import{h as s}from"../core/lang.js";import{IdentifiableMixin as r}from"../core/Identifiable.js";import{b as i}from"./maybe.js";import{throwIfAborted as o}from"../core/promiseUtils.js";import{watch as a}from"../core/reactiveUtils.js";import{property as n}from"../core/accessorSupport/decorators/property.js";import"./Logger.js";import{subclass as h}from"../core/accessorSupport/decorators/subclass.js";import{c,l}from"./aaBoundingRect.js";import{getJsonType as d,isExtent as u,isPolyline as p,isPolygon as m}from"../geometry/support/jsonUtils.js";import y from"../layers/support/FieldsIndex.js";import{H as _,b as f,s as g,C as b}from"./CIMSymbolHelper.js";import{O as w}from"./OverrideHelper.js";import{e as I,f as S,h as v}from"./defaults.js";import{n as x,r as R}from"./definitions.js";import{F as T}from"./WGLContainer.js";import{F as j,C as M,A as G,G as C,R as U,M as z,c as O}from"./AttributeStore.js";import{g as k,c as q,a as P,b as F,d as A,e as E,f as V,n as D,F as H,h as L}from"./FeatureCommandQueue.js";import{U as $,a as W}from"./UpdateTracking2D.js";import{d as B,q as Q}from"./featureConversionUtils.js";import{O as N}from"./OptimizedGeometry.js";import{a as X}from"./screenUtils.js";import{r as Y}from"./Tile.js";import{c as Z}from"./extentUtils.js";import{normalizeMapX as J}from"../geometry/support/normalizeUtils.js";import{j as K}from"./unitUtils.js";import{f as ee}from"./coordsUtils.js";import{a as te}from"./normalizeUtilsSync.js";import{c as se,p as re}from"./projectionSupport.js";import ie from"../geometry/Polygon.js";import"./mathUtils.js";import"../geometry/Extent.js";import"./vec2f32.js";import"./shapingUtils.js";class oe extends j{static from(e,t,s){return new oe(e,t,s)}constructor(e,t,s){super(s),this._items=e,this._tile=t,this._index=-1,this._cachedGeometry=null;const r=t.lod;r.wrap&&(this._wrappingInfo={worldSizeX:r.worldSize[0]})}get _current(){return this._items[this._index]}getItem(){return this._current}getZOrder(){return this._current.zOrder}getMeshWriters(){return this._current.symbolResource?.symbolInfo.meshWriters??[]}field(e){return this.readAttribute(e)}get geometryType(){const e=d(this._current.geometry);return"esriGeometryPoint"===e?"esriGeometryMultipoint":e}getCursor(){return this.copy()}copy(){const e=new oe(this._items,this._tile,this.metadata);return this.copyInto(e),e}copyInto(e){super.copyInto(e),e._cachedGeometry=this._cachedGeometry,e._index=this._index}get fields(){throw new Error("Fields reading not supported to graphics.")}get hasFeatures(){return!!this._items.length}get hasNext(){return this._index+1<this._items.length}get exceededTransferLimit(){throw new Error("InternalError: exceededTransferLimit not implemented for graphics.")}get hasZ(){return!1}get hasM(){return!1}getInTransform(){return this._tile.transform}getSize(){return this._items.length}getAttributeHash(){let e="";for(const t in this._current.attributes)e+=this._current.attributes[t];return e}getObjectId(){return this._items[this._index].objectId}getDisplayId(){return this._current.displayId}setDisplayId(e){throw new Error("InternalError: Setting displayId not supported for graphics.")}setIndex(e){this._index=e}getIndex(){return this._index}next(){for(this._cachedGeometry=null;++this._index<this._items.length&&!this._getExists(););return this._index<this._items.length}readGeometryArea(){throw new Error("InternalError: readGeometryArea not supported for graphics.")}_readGeometry(){if(!this._cachedGeometry){const e=B(this._current.projectedGeometry,this.hasZ,this.hasM);if(this._cachedGeometry=Q(new N,e,this.hasZ,this.hasM,this.geometryType,this._tile.transform),!this._cachedGeometry)return null;this._wrapGeometry(this._cachedGeometry)}return this._cachedGeometry}_wrapGeometry(e){if(!this._wrappingInfo)return;const{worldSizeX:t}=this._wrappingInfo;if(e.isPoint)return 1===t?(e.coords.push(512,0),e.coords.push(-1024,0),void e.lengths.push(3)):void this._wrapVertex(e.coords,0,2,t);if("esriGeometryMultipoint"!==this.geometryType);else{if(1===t){const t=e.coords.slice();t[0]-=512;const s=e.coords.slice();s[0]+=512,e.coords.push(...t,...s);const r=e.lengths[0];return void e.lengths.push(r,r)}this._wrapVertex(e.coords,0,2,t)}}_wrapVertex(e,t,s,r){const i=t*s,o=e[i];o<-x*(r-2)?e[i]=o+x*r:o>x*(r-1)&&(e[i]=o-x*r)}_readX(){const e=this._readGeometry();return null!=e?e.coords[0]:0}_readY(){const e=this._readGeometry();return null!=e?e.coords[1]:0}_readServerCentroid(){return null}_readAttribute(e,t){const s=this._current.attributes[e];if(void 0!==s)return s;const r=e.toLowerCase();for(const e in this._current.attributes)if(e.toLowerCase()===r)return this._current.attributes[e]}_readAttributes(){return this._current.attributes}}function ae(e){if(!e)return 0;switch(e.type){case"point":case"multipoint":return 0;case"polyline":return 1;case"polygon":case"extent":return 2}return 0}function ne(e){if(!e)return null;const{xmin:t,ymin:s,xmax:r,ymax:i,spatialReference:o}=e;return new ie({rings:[[[t,s],[t,i],[r,i],[r,s],[t,s]]],spatialReference:o})}class he{static fromGraphic(e,t,s,r){return new he(e.geometry,t,e.attributes,e.visible,e.uid,s,r)}constructor(e,t,s,r,i,o,a){this.geometry=e,this.symbol=t,this.attributes=s,this.visible=r,this.objectId=i,this.zOrder=o,this.displayId=a,this.bounds=c(),this.prevBounds=c()}get linearCIM(){return this.symbolResource?.symbolInfo.linearCIM}update(e,t,s){return(this.geometry!==e.geometry||this.attributes!==e.attributes||this.symbol!==t||this.zOrder!==s||this.visible!==e.visible)&&(this.prevBounds=this.bounds,this.bounds=c(),this.zOrder=s,this.geometry=e.geometry,this.attributes=e.attributes,this.symbol=t,this.visible=e.visible,this.symbolResource=null,this.projectedGeometry=null,!0)}async projectAndNormalize(e){let t=this.geometry;if(!t||!t.spatialReference||"mesh"===t.type)return;"extent"===t.type&&(t=ne(t)),await se(t.spatialReference,e);const s=te(t);if(!s)return;const r=re(s,t.spatialReference,e);r&&ee(r),this.projectedGeometry=u(r)?ne(r):r}}class ce{constructor(e,t,s){this.added=e,this.updated=t,this.removed=s}}const le=1e-5;function de(e,t){const s=ae(e.geometry),r=ae(t.geometry);return s===r?t.zOrder-e.zOrder:s-r}class ue{constructor(e,t,s,r,i){this._items=new Map,this._outSpatialReference=e,this._cimResourceManager=t,this._hittestDrawHelper=new _(t),this._tileInfoView=s,this._store=i;const o=s.getClosestInfoForScale(r);this._resolution=this._tileInfoView.getTileResolution(o.level)}items(){return this._items.values()}getItem(e){return this._items.get(e)}async update(e,t,s){const r=[],i=[],o=[],a=new Set,n=[];let h=0;this._store.incrementDisplayIdGeneration();for(const o of e.items){h++;const e=o.uid,c=this._items.get(e),l=t(o);if(a.add(e),c){c.update(o,l,h)&&(i.push(c),n.push(this._updateItem(c,s)));continue}const d=this._store.createDisplayIdForObjectId(e),u=he.fromGraphic(o,l,h,d);n.push(this._updateItem(u,s)),this._items.set(u.objectId,u),r.push(u)}for(const[e,t]of this._items.entries())a.has(e)||(this._store.releaseDisplayIdForObjectId(e),this._items.delete(e),o.push(t));return await Promise.all(n),this._index=null,new ce(r,i,o)}updateLevel(e){this._resolution!==e&&(this._index=null,this._resolution=e)}hitTest(e,t,s,r,i){e=J(e,this._tileInfoView.spatialReference);const o=.5*r*window.devicePixelRatio*s,a=c();a[0]=e-o,a[1]=t-o,a[2]=e+o,a[3]=t+o;const n=.5*r*(s+50),h=this._searchIndex(e-n,t-n,e+n,t+n);if(!h||0===h.length)return[];const d=[],u=c(),p=c();for(const e of h){if(!e.visible)continue;const{projectedGeometry:t,symbolResource:s}=e;this._getSymbolBounds(u,s,t,p,i),p[3]=p[2]=p[1]=p[0]=0,l(u,a)&&d.push(e)}if(0===d.length)return[];const m=this._hittestDrawHelper,y=[];for(const e of d){const{projectedGeometry:t,symbolResource:s}=e;if(!s)continue;const{textInfo:o,symbolInfo:n}=s,h=n.cimSymbol;m.hitTest(a,h.symbol,t,o,i,r)&&y.push(e)}return y.sort(de),y.map((e=>e.objectId))}queryItems(e){return 0===this._items.size?[]:this._searchForItems(e)}clear(){this._items.clear(),this._index=null}async _updateItem(e,t){await e.projectAndNormalize(this._outSpatialReference),await t(e),this._getSymbolBounds(e.bounds,e.symbolResource,e.projectedGeometry,e.size,0)}_searchIndex(e,t,s,r){return this._index||(this._index=Y(9,(e=>({minX:e.bounds[0],minY:e.bounds[1],maxX:e.bounds[2],maxY:e.bounds[3]}))),this._index.load(Array.from(this._items.values()))),this._index.search({minX:e,minY:t,maxX:s,maxY:r})}_searchForItems(e){const t=this._tileInfoView.spatialReference,s=e.bounds,r=K(t);if(r&&t.isWrappable){const[t,i]=r.valid,o=Math.abs(s[2]-i)<le,a=Math.abs(s[0]-t)<le;if((!o||!a)&&(o||a)){const r=e.resolution;let a;a=c(o?[t,s[1],t+50*r,s[3]]:[i-50*r,s[1],i,s[3]]);const n=this._searchIndex(s[0],s[1],s[2],s[3]),h=this._searchIndex(a[0],a[1],a[2],a[3]);return[...new Set([...n,...h])]}}return this._searchIndex(s[0],s[1],s[2],s[3])}_getSymbolBounds(e,t,s,r,i){if(!t||!t.symbolInfo.linearCIM||!s)return null;if(e||(e=c()),Z(e,s),!r||0===r[0]&&0===r[1]&&0===r[2]&&0===r[3]){const{textInfo:e,symbolInfo:s}=t,o=s.cimSymbol;r||(r=[0,0,0,0]);const a=f.getSymbolInflateSize(r,o.symbol,this._cimResourceManager,i,e);r[0]=X(a[0]),r[1]=X(a[1]),r[2]=X(a[2]),r[3]=X(a[3])}const o=this._resolution,a=f.safeSize(r);return e[0]-=a*o,e[1]-=a*o,e[2]+=a*o,e[3]+=a*o,e}}class pe{static getOrCreate(e,t,s){let r=t.get(e.id);return r||(r=new pe(e,s),t.set(e.id,r)),r}static fromItems(e,t,s){const r=new pe(e,s);return r.addedOrModified.push(...t),r}constructor(e,t){this.tile=e,this.metadata=t,this.addedOrModified=[],this.removed=[]}get reader(){return this._reader||(this._reader=oe.from(this.addedOrModified,this.tile,this.metadata)),this._reader}}let me=class extends(r(t)){constructor(e){super(e),this._attached=!1,this._tiles=new Map,this._controller=new AbortController,this._hashToSymbolInfo=new Map,this._lastCleanup=performance.now(),this._cleanupRequired=!0,this.lastUpdateId=-1,this.renderer=null,this._updateTracking=new $({debugName:"GraphicsView2D"}),this.updateRequested=!1,this.defaultPointSymbolEnabled=!0,this._commandQueue=new H({process:e=>{switch(e.type){case"processed-edit":throw new Error("InternalError: Unsupported command");case"update":return this._update()}}}),this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}destroy(){this.container.destroy(),this.view=null,this.renderer=null,this._set("graphics",null),this._controller.abort(),this._graphicStore.clear(),this._attributeStore=null,this._hashToSymbolInfo.clear(),this._updateTracking.destroy(),this._commandQueue.destroy()}_initAttributeStore(){this._storage=new M({spatialReference:this.view.spatialReference,fields:new y}),this._attributeStore=new G({type:"local",initialize:e=>Promise.resolve(this.container.attributeView.initialize(e)),update:async e=>{s("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView2D.AttributeStoreView.updateStart`,{message:e});const t=this.container.attributeView.requestUpdate(e);this.container.requestRender(),await t,s("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView2D.AttributeStoreView.updateEnd`,{message:e})},render:()=>this.container.requestRender()});const e=L(null,[]);this._attributeStore.update(e,this._storage),this.container.checkHighlight=()=>this._attributeStore.hasHighlight}initialize(){this._initAttributeStore(),this._metadata=C.create(this.view.spatialReference),this._resourceProxy=new U({fetch:e=>Promise.all(e.map((e=>this.view.stage.textureManager.rasterizeItem(e)))),fetchDictionary:e=>{throw new Error("InternalError: Graphics do not support Dictionary requests")}}),this.addHandles([a((()=>this._effectiveRenderer),(()=>this.requestUpdate())),this.view.graphicsTileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",(()=>{this.addHandles([this.graphics.on("change",(()=>this._commandQueue.push({type:"update"})))]),this._graphicStore=new ue(this.view.spatialReference,this._cimResourceManager,this.view.featuresTilingScheme,this.view.state.scale,this._attributeStore),this._attached=!0,this.requestUpdate(),this._commandQueue.push({type:"update"})}))]),this._updateTracking.addUpdateTracking("CommandQueue",this._commandQueue.updateTracking),this._updateTracking.addUpdateTracking("AttributeStore",this._attributeStore.updateTracking);const e=this.view.graphicsTileStore.tiles;this._onTileUpdate({added:e,removed:[]})}get _effectiveRenderer(){return"function"==typeof this.renderer?this.renderer():this.renderer}get _cimResourceManager(){return this.view.stage.textureManager.resourceManager}get updating(){const e=!this._attached||this._updateTracking.updating;return s("esri-2d-log-updating")&&console.log(`Updating GraphicsView2D: ${e}\n  -> attaching ${!this._attached}\n  -> updateTracking ${this._updateTracking.updating}`),e}hitTest(e){if(!this.view||this.view.suspended)return[];const{resolution:t,rotation:s}=this.view.state,r=new Set(this._graphicStore.hitTest(e.x,e.y,2,t,s));return this.graphics.items.filter((e=>r.has(e.uid)))}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback()),this.notifyChange("updating")}processUpdate(e){this.updateRequested&&(this.updateRequested=!1,this.update(e))}viewChange(){this.requestUpdate()}setHighlight(e){const t=[];for(const{objectId:s,highlightFlags:r}of e){const e=this._graphicStore.getItem(s)?.displayId;t.push({objectId:s,highlightFlags:r,displayId:e})}this._attributeStore.setHighlight(t)}graphicUpdateHandler(e){this._commandQueue.push({type:"update"})}update(e){this.updateRequested=!1,this._attached&&this._graphicStore.updateLevel(e.state.resolution)}async _update(){try{s("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView._update start`);const e=await this._graphicStore.update(this.graphics,(e=>this._getSymbolForGraphic(e)),(e=>this._ensureSymbolResource(e)));e.removed.length&&(this._cleanupRequired=!0),s("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView updateMessage`,e);const t=this._createTileMessages(e);await this._fetchResources(t),this._write(t)}catch(e){}this._cleanupSharedResources()}_createTileMessages(e){const t=new Map;for(const s of e.added){const e=this.view.graphicsTileStore.getIntersectingTiles(s.bounds);for(const r of e)pe.getOrCreate(r,t,this._metadata).addedOrModified.push(s)}for(const s of e.updated){const e=this.view.graphicsTileStore.getIntersectingTiles(s.prevBounds),r=this.view.graphicsTileStore.getIntersectingTiles(s.bounds);for(const r of e)pe.getOrCreate(r,t,this._metadata).removed.push(s.displayId);for(const e of r)pe.getOrCreate(e,t,this._metadata).addedOrModified.push(s)}for(const s of e.removed){const e=this.view.graphicsTileStore.getIntersectingTiles(s.bounds);for(const r of e)pe.getOrCreate(r,t,this._metadata).removed.push(s.displayId)}return Array.from(t.values())}async _fetchResources(e){for(const{tile:t,reader:r}of e){s("esri-2d-update-debug")&&console.debug(`Id[${this.layerId}] Tile[${t.id}] GraphicsView fetchResources`,e);const i=r.getCursor();for(;i.next();)for(const e of i.getMeshWriters())e.enqueueRequest(this._resourceProxy,i,t.arcadeEvaluationOptions)}await this._resourceProxy.fetchEnqueuedResources()}_write(e){for(const t of e){s("esri-2d-update-debug")&&console.debug(`Id[${this.layerId}] Tile[${t.tile.id}] GraphicsView write`,t);const e=this._writeMeshes(t);let r=this._tiles.get(t.tile.key);r||(r=this._createFeatureTile(t.tile.key)),s("esri-2d-update-debug")&&console.debug(`Id[${this.layerId}] Tile[${t.tile.id}] GraphicsView onTileData`,t),this.container.onTileData(r,{type:"update",modify:e,remove:t.removed,end:!1}),this.container.requestRender()}}_writeMeshes(e){const t=new z(e.tile.id),s=e.reader.getCursor();for(;s.next();){t.entityStart(s.getDisplayId(),s.getZOrder());for(const r of s.getMeshWriters())r.write(t,this._resourceProxy,s,e.tile.arcadeEvaluationOptions,e.tile.level);this._setFilterState(s.getItem()),t.entityEnd()}return this._attributeStore.sendUpdates(),{...t.serialize().message,tileId:e.tile.id}}_setFilterState(e){const t=e.displayId,s=this._attributeStore.getHighlightFlags(e.objectId);this._attributeStore.setData(t,0,0,s|(e.visible?R:0))}_getSymbolForGraphic(e){return null!=e.symbol?e.symbol:null!=this._effectiveRenderer?this._effectiveRenderer.getSymbol(e):this._getNullSymbol(e)}async _ensureSymbolResource(e){if(!e.symbol)return;const t=await this._getSymbolInfo(e.symbol);if(!t)return;const s=t.linearCIM.filter((e=>"text"===e.type));if(s.length>0){const r=await this._getTextResources(e,s);e.symbolResource={symbolInfo:t,textInfo:r}}else e.symbolResource={symbolInfo:t}}_getSymbolInfo(e){const t=e.hash();return this._hashToSymbolInfo.has(t)||this._hashToSymbolInfo.set(t,this._createSymbolInfo(t,e).catch((e=>null))),this._hashToSymbolInfo.get(t)}async _createSymbolInfo(e,t){const s=await this._convertToCIMSymbol(t),r=await this._createLinearCIM(s);if("text"===t.type)for(const e of r)"text"===e.type&&(e.lineWidth=t.lineWidth);return{hash:e,cimSymbol:s,linearCIM:r,meshWriters:await this._createMeshWriters(s,r)}}async _convertToCIMSymbol(e){const t=g(e);return"web-style"===t.type?(await t.fetchCIMSymbol()).data:t}async _createLinearCIM(e){return await Promise.all(b.fetchResources(e.symbol,this._cimResourceManager,[])),this.view.stage.cimAnalyzer.analyzeSymbolReference(e,!1)}async _createMeshWriters(e,t){o(this._controller.signal);const s=this.container.instanceStore,r=await async function(e,t,s){const r=[],i={scaleInfo:k(e),scaleExpression:null};for(const e of t)switch(e.type){case"marker":r.push(...V(s.instances.marker,e,D,i));break;case"fill":null==e.spriteRasterizationParam?r.push(...A(s.instances.fill,e,i)):r.push(...E(s.instances.complexFill,e,!1,i));break;case"line":e.spriteRasterizationParam?r.push(...P(s.instances.texturedLine,e,!1,i)):r.push(...F(s.instances.line,e,!1,i));break;case"text":r.push(...q(s.instances.text,e,D,i))}return r}(e,t,s);return Promise.all(r.map((e=>O(this._storage,this._resourceProxy,e.meshWriterName,W(e.id),e.options,{tileInfo:this.view.featuresTilingScheme.tileInfo},e.optionalAttributes))))}_onTileUpdate(e){if(e.added&&e.added.length>0)for(const t of e.added)this._updateTracking.addPromise(this._addTile(t));if(e.removed&&e.removed.length>0)for(const t of e.removed)this._removeTile(t.key)}_createFeatureTile(e){const t=this.view.featuresTilingScheme.getTileBounds(c(),e),s=this.view.featuresTilingScheme.getTileResolution(e.level),r=new T(e,s,t[0],t[3]);return this._tiles.set(e,r),this.container.addChild(r),r}async _addTile(e){if(!this._attached)return;const t=this._graphicStore.queryItems(e);if(!t.length)return;const s=this._createFeatureTile(e.key),r=pe.fromItems(e,t,this._metadata);await this._fetchResources([r]);const i=this._writeMeshes(r);this._attributeStore.sendUpdates(),s.onMessage({type:"append",append:i,clear:!1,end:!0})}_removeTile(e){if(!this._tiles.has(e))return;const t=this._tiles.get(e);this.container.removeChild(t),t.destroy(),this._tiles.delete(e)}_getNullSymbol(e){const t=e.geometry;return p(t)?I:m(t)||u(t)?S:this.defaultPointSymbolEnabled?v:null}async _getTextResources(e,t){const s=new Array,r=new Array;for(let i=0;i<t.length;i++){const o=t[i],{resource:a,overrides:n}=o.textRasterizationParam;if(n?.length>0){const t=w.resolveSymbolOverrides({type:"CIMSymbolReference",primitiveOverrides:n,symbol:{type:"CIMPointSymbol",symbolLayers:[{type:"CIMVectorMarker",enable:!0,size:a.symbol.height,anchorPointUnits:"Relative",frame:{xmin:-5,ymin:-5,xmax:5,ymax:5},markerGraphics:[{type:"CIMMarkerGraphic",geometry:{x:0,y:0},symbol:a.symbol,textString:a.textString}],scaleSymbolsProportionally:!0,respectFrame:!0}]}},e,this.view.spatialReference,null,d(e.projectedGeometry),null,null);t.then((e=>{const t=e.symbolLayers[0],{textString:s}=t.markerGraphics[0];r.push({type:"cim-rasterization-info",resource:{type:"text",textString:s||"",font:a.font}}),o.text=a.textString=s||""})),s.push(t)}else r.push({type:"cim-rasterization-info",resource:a})}s.length>0&&await Promise.all(s);const o=r.map((e=>this.view.stage.textureManager.rasterizeItem(e))),a=await Promise.all(o);i(a);const n=new Map;for(let e=0;e<t.length;e++){const s=t[e];n.set(s.textRasterizationParam.resource.symbol,{text:s.text,glyphMosaicItems:a[e]})}return n}_cleanupSharedResources(){if(!this._cleanupRequired)return;const e=performance.now();if(e-this._lastCleanup<5e3)return;this._cleanupRequired=!1,this._lastCleanup=e;const t=new Set;for(const e of this._graphicStore.items()){const s=e.symbolResource?.symbolInfo.hash;t.add(s)}const s=new Set(this._hashToSymbolInfo.keys());for(const e of s.values())t.has(e)||this._hashToSymbolInfo.delete(e)}};e([n()],me.prototype,"_effectiveRenderer",null),e([n({constructOnly:!0})],me.prototype,"layerId",void 0),e([n({constructOnly:!0})],me.prototype,"requestUpdateCallback",void 0),e([n()],me.prototype,"container",void 0),e([n({constructOnly:!0})],me.prototype,"graphics",void 0),e([n()],me.prototype,"renderer",void 0),e([n()],me.prototype,"_updateTracking",void 0),e([n()],me.prototype,"updating",null),e([n()],me.prototype,"view",void 0),e([n()],me.prototype,"updateRequested",void 0),e([n()],me.prototype,"defaultPointSymbolEnabled",void 0),me=e([h("esri.views.2d.layers.support.GraphicsView2D")],me);const ye=me;export{ye as G};
