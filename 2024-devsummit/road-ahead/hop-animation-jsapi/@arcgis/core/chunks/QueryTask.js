/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import t from"../core/Accessor.js";import r from"../core/Error.js";import{h as o}from"../core/lang.js";import{whenOrAbort as s}from"../core/promiseUtils.js";import{urlToObject as i}from"../core/urlUtils.js";import{property as a}from"../core/accessorSupport/decorators/property.js";import"./Logger.js";import{subclass as u}from"../core/accessorSupport/decorators/subclass.js";import{a as n,b as c}from"./infoFor3D.js";import{D as p}from"./DataLayerSource.js";import{p as l}from"./utils7.js";import{e as m,a as d}from"./executeForIds.js";import{e as f}from"./executeForExtent.js";import{e as y}from"./executeQueryJSON.js";import{e as h}from"./executeQueryPBF.js";import S from"../rest/support/FeatureSet.js";import F from"../rest/support/Query.js";let x=class extends t{constructor(e){super(e),this.dynamicDataSource=null,this.fieldsIndex=null,this.gdbVersion=null,this.infoFor3D=null,this.pbfSupported=!1,this.queryAttachmentsSupported=!1,this.sourceSpatialReference=null,this.url=null}get parsedUrl(){return i(this.url)}async execute(e,t){const r=await this.executeJSON(e,t);return this.featureSetFromJSON(e,r,t)}async executeJSON(e,t){const r=this._normalizeQuery(e),s=null!=e.outStatistics?.[0],i=o("featurelayer-pbf-statistics"),a=!s||i;let u;if(this.pbfSupported&&a)try{u=await h(this.url,r,t)}catch(e){if("query:parsing-pbf"!==e.name)throw e;this.pbfSupported=!1}return this.pbfSupported&&a||(u=await y(this.url,r,t)),this._normalizeFields(u.fields),u}async featureSetFromJSON(e,t,r){if(!this._queryIs3DObjectFormat(e)||null==this.infoFor3D||!t.features)return S.fromJSON(t);const{meshFeatureSetFromJSON:o}=await s(import("./meshFeatureSet.js"),r);return o(e,this.infoFor3D,t)}executeForCount(e,t){return m(this.url,this._normalizeQuery(e),t)}executeForExtent(e,t){return f(this.url,this._normalizeQuery(e),t)}executeForIds(e,t){return d(this.url,this._normalizeQuery(e),t)}async executeRelationshipQuery(e,t){const[{default:r},{executeRelationshipQuery:o}]=await s(Promise.all([import("../rest/support/RelationshipQuery.js"),import("./executeRelationshipQuery.js")]),t);return e=r.from(e),(this.gdbVersion||this.dynamicDataSource)&&((e=e.clone()).gdbVersion=e.gdbVersion||this.gdbVersion,e.dynamicDataSource=e.dynamicDataSource||this.dynamicDataSource),o(this.url,e,t)}async executeRelationshipQueryForCount(e,t){const[{default:r},{executeRelationshipQueryForCount:o}]=await s(Promise.all([import("../rest/support/RelationshipQuery.js"),import("./executeRelationshipQuery.js")]),t);return e=r.from(e),(this.gdbVersion||this.dynamicDataSource)&&((e=e.clone()).gdbVersion=e.gdbVersion||this.gdbVersion,e.dynamicDataSource=e.dynamicDataSource||this.dynamicDataSource),o(this.url,e,t)}async executeAttachmentQuery(e,t){const{executeAttachmentQuery:r,fetchAttachments:o,processAttachmentQueryResult:i}=await s(import("./queryAttachments.js"),t),a=l(this.url);return i(a,await(this.queryAttachmentsSupported?r(a,e,t):o(a,e,t)))}async executeTopFeaturesQuery(e,t){const{executeTopFeaturesQuery:r}=await s(import("./executeTopFeaturesQuery.js"),t);return r(this.parsedUrl,e,this.sourceSpatialReference,t)}async executeForTopIds(e,t){const{executeForTopIds:r}=await s(import("./executeForTopIds.js"),t);return r(this.parsedUrl,e,t)}async executeForTopExtents(e,t){const{executeForTopExtents:r}=await s(import("./executeForTopExtents.js"),t);return r(this.parsedUrl,e,t)}async executeForTopCount(e,t){const{executeForTopCount:r}=await s(import("./executeForTopCount.js"),t);return r(this.parsedUrl,e,t)}_normalizeQuery(e){let t=F.from(e);t.sourceSpatialReference=t.sourceSpatialReference||this.sourceSpatialReference,(this.gdbVersion||this.dynamicDataSource)&&(t=t===e?t.clone():t,t.gdbVersion=e.gdbVersion||this.gdbVersion,t.dynamicDataSource=e.dynamicDataSource?p.from(e.dynamicDataSource):this.dynamicDataSource);const{infoFor3D:o}=this;if(null!=o&&this._queryIs3DObjectFormat(e)){t=t===e?t.clone():t,t.formatOf3DObjects=null;const{supportedFormats:s,queryFormats:i}=o,a=n("model/gltf-binary",s)??c("glb",s),u=n("model/gltf+json",s)??c("gltf",s);for(const e of i){if(e===a){t.formatOf3DObjects=e;break}e!==u||t.formatOf3DObjects||(t.formatOf3DObjects=e)}if(!t.formatOf3DObjects)throw new r("query:unsupported-3d-query-formats","Could not find any supported 3D object query format. Only supported formats are 3D_glb and 3D_gltf");if(null==t.outFields||!t.outFields.includes("*")){t=t===e?t.clone():t,null==t.outFields&&(t.outFields=[]);const{originX:r,originY:s,originZ:i,translationX:a,translationY:u,translationZ:n,scaleX:c,scaleY:p,scaleZ:l,rotationX:m,rotationY:d,rotationZ:f,rotationDeg:y}=o.transformFieldRoles;t.outFields.push(r,s,i,a,u,n,c,p,l,m,d,f,y)}}return t}_normalizeFields(e){if(null!=this.fieldsIndex&&null!=e)for(const t of e){const e=this.fieldsIndex.get(t.name);e&&Object.assign(t,e.toJSON())}}_queryIs3DObjectFormat(e){return null!=this.infoFor3D&&!0===e.returnGeometry&&"xyFootprint"!==e.multipatchOption&&!e.outStatistics}};e([a({type:p})],x.prototype,"dynamicDataSource",void 0),e([a()],x.prototype,"fieldsIndex",void 0),e([a()],x.prototype,"gdbVersion",void 0),e([a()],x.prototype,"infoFor3D",void 0),e([a({readOnly:!0})],x.prototype,"parsedUrl",null),e([a()],x.prototype,"pbfSupported",void 0),e([a()],x.prototype,"queryAttachmentsSupported",void 0),e([a()],x.prototype,"sourceSpatialReference",void 0),e([a({type:String})],x.prototype,"url",void 0),x=e([u("esri.tasks.QueryTask")],x);const j=x;export{j as Q};
