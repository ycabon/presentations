/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import"../geometry.js";import r from"../geometry/support/GeographicTransformation.js";import t from"../layers/support/PixelBlock.js";import{d as s,R as o}from"./RasterSymbolizer.js";import{c as e,s as i,b as m,m as a,d as p,e as l,f as n}from"./vectorFieldUtils.js";import{c}from"./rasterFunctionHelper.js";import{r as j,l as f,g as u}from"./rasterProjectionHelper.js";import{g as y,h as S}from"./stretchUtils.js";import{r as d}from"./utils21.js";import{c as g}from"./dataUtils.js";import h from"../geometry/Extent.js";import x from"../geometry/Point.js";import"./ensureType.js";import"../core/lang.js";import"./Logger.js";import"../config.js";import"../geometry/Geometry.js";import"./tslib.es6.js";import"../core/JSONSupport.js";import"../core/Accessor.js";import"../core/Handles.js";import"./maybe.js";import"../core/accessorSupport/decorators/subclass.js";import"./metadata.js";import"./utils.js";import"./handleUtils.js";import"./tracking.js";import"../core/Error.js";import"../core/accessorSupport/decorators/property.js";import"./ObservableBase.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"./reader.js";import"../geometry/SpatialReference.js";import"./unitUtils.js";import"./jsonMap.js";import"./assets.js";import"../request.js";import"../kernel.js";import"../core/urlUtils.js";import"./writer.js";import"../geometry/Multipoint.js";import"./zmUtils.js";import"../geometry/support/webMercatorUtils.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/Polygon.js";import"./coordsUtils.js";import"./Axis.js";import"./extentUtils.js";import"./aaBoundingRect.js";import"./mathUtils.js";import"./vec3.js";import"./vec3f64.js";import"./common.js";import"../geometry/Polyline.js";import"./typeUtils.js";import"../geometry/support/jsonUtils.js";import"../geometry/support/GeographicTransformationStep.js";import"./pixelRangeUtils.js";import"./_commonjsHelpers.js";import"./colorUtils2.js";import"../Color.js";import"./colorUtils.js";import"./vec4.js";import"./vec4f64.js";import"../layers/support/RasterInfo.js";import"../layers/support/RasterBandInfo.js";import"../layers/support/RasterSensorInfo.js";import"./colorRampUtils.js";import"../layers/support/rasterFunctionConstants.js";import"./enumeration.js";import"./colorRamps.js";import"../rest/support/AlgorithmicColorRamp.js";import"../rest/support/ColorRamp.js";import"../rest/support/MultipartColorRamp.js";import"./focalStatUtils.js";import"../geometry/projection.js";import"./SimpleObservable.js";import"./projectBuffer.js";import"./geodesicConstants.js";import"./zscale.js";import"./stretchRendererUtils.js";class O{convertVectorFieldData(r){const s=t.fromJSON(r.pixelBlock),o=e(s,r.type);return Promise.resolve(null!=o?o.toJSON():null)}computeStatisticsHistograms(r){const s=t.fromJSON(r.pixelBlock),o=y(s);return Promise.resolve(o)}async decode(r){const t=await s(r.data,r.options);return t&&t.toJSON()}symbolize(r){r.pixelBlock=t.fromJSON(r.pixelBlock),r.extent=r.extent?h.fromJSON(r.extent):null;const s=this.symbolizer.symbolize(r);return Promise.resolve(null!=s?s.toJSON():null)}async updateSymbolizer(r){this.symbolizer=o.fromJSON(r.symbolizerJSON),r.histograms&&"rasterStretch"===this.symbolizer?.rendererJSON.type&&(this.symbolizer.rendererJSON.histograms=r.histograms)}async updateRasterFunction(r){this.rasterFunction=c(r.rasterFunctionJSON)}async process(r){const s=this.rasterFunction.process({extent:h.fromJSON(r.extent),primaryPixelBlocks:r.primaryPixelBlocks.map((r=>null!=r?t.fromJSON(r):null)),primaryPixelSizes:r.primaryPixelSizes?.map((r=>null!=r?x.fromJSON(r):null)),primaryRasterIds:r.primaryRasterIds});return null!=s?s.toJSON():null}stretch(r){const s=this.symbolizer.simpleStretch(t.fromJSON(r.srcPixelBlock),r.stretchParams);return Promise.resolve(s?.toJSON())}estimateStatisticsHistograms(r){const s=S(t.fromJSON(r.srcPixelBlock));return Promise.resolve(s)}split(r){const s=i(t.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel??0,!1===r.useBilinear);return s&&s.forEach(((r,t)=>{s.set(t,r?.toJSON())})),Promise.resolve(s)}clipTile(r){const s=t.fromJSON(r.pixelBlock),o=m({...r,pixelBlock:s});return Promise.resolve(o?.toJSON())}async mosaicAndTransform(r){const s=r.srcPixelBlocks.map((r=>r?new t(r):null)),o=a(s,r.srcMosaicSize,{blockWidths:r.blockWidths,alignmentInfo:r.alignmentInfo,clipOffset:r.clipOffset,clipSize:r.clipSize});let e,i=o;return r.coefs&&(i=p(o,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation)),r.projectDirections&&r.gcsGrid&&(e=l(r.destDimension,r.gcsGrid),i=n(i,r.isUV?"vector-uv":"vector-magdir",e)),{pixelBlock:i?.toJSON(),localNorthDirections:e}}async createFlowMesh(r,t){const s={data:new Float32Array(r.flowData.buffer),mask:new Uint8Array(r.flowData.maskBuffer),width:r.flowData.width,height:r.flowData.height},{vertexData:o,indexData:e}=await g(r.meshType,r.simulationSettings,s,t.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:e.buffer},transferList:[o.buffer,e.buffer]}}async getProjectionOffsetGrid(t){const s=h.fromJSON(t.projectedExtent),o=h.fromJSON(t.srcBufferExtent);let e=null;t.datumTransformationSteps&&(e=new r({steps:t.datumTransformationSteps})),(t.includeGCSGrid||j(s.spatialReference,o.spatialReference,e))&&await f();const i=t.rasterTransform?d(t.rasterTransform):null;return u({...t,projectedExtent:s,srcBufferExtent:o,datumTransformation:e,rasterTransform:i})}}export{O as default};
