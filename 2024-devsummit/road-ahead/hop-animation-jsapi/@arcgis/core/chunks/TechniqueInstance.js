/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import t from"../core/Error.js";import{h as e}from"../core/lang.js";import{L as i}from"./Logger.js";import{createResolver as s}from"../core/promiseUtils.js";import{A as r,f as a,b as n,c as h,v as u,d as o,e as d,i as l}from"./definitions.js";import{g as p,a as c}from"./UpdateTracking2D.js";import{g as _,a as g}from"./dataViewUtils.js";import{b as x,T as f}from"./enums.js";import{F as b}from"./FramebufferObject.js";import{a as m,T}from"./Texture.js";import{T as y}from"./TileContainer.js";const w=()=>i.getLogger("esri.views.2d.engine.webgl.AttributeStoreView");class z{constructor(t,e,i,s){this._texture=null,this._lastTexture=null,this._fbos={},this.texelSize=4;const{buffer:r,pixelType:a,textureOnly:n}=t,h=_(a);this.blockIndex=s,this.shared=i,this.pixelType=a,this.size=e,this.textureOnly=n,n||(this.data=new h(r)),this._resetRange()}destroy(){this._texture?.dispose();for(const t in this._fbos){const e=this._fbos[t];e&&("0"===t&&e.detachColorTexture(),e.dispose()),this._fbos[t]=null}this._texture=null}get _textureDesc(){const t=new m;return t.wrapMode=x.CLAMP_TO_EDGE,t.samplingMode=f.NEAREST,t.dataType=this.pixelType,t.width=this.size,t.height=this.size,t}setData(t,e,i){const s=p(t),r=this.data,a=s*this.texelSize+e;!r||a>=r.length||(r[a]=i,this.dirtyStart=Math.min(this.dirtyStart,s),this.dirtyEnd=Math.max(this.dirtyEnd,s))}getData(t,e){if(null==this.data)return null;const i=p(t)*this.texelSize+e;return!this.data||i>=this.data.length?null:this.data[i]}getTexture(t){return this._texture??this._initTexture(t)}getFBO(t,e=0){if(!this._fbos[e]){const i=0===e?this.getTexture(t):this._textureDesc;this._fbos[e]=new b(t,i)}return this._fbos[e]}get hasDirty(){const t=this.dirtyStart;return this.dirtyEnd>=t}updateTexture(i,s){try{const r=this.dirtyStart,a=this.dirtyEnd;if(!this.hasDirty)return;e("esri-2d-update-debug")&&console.debug(`Version[${s}] AttributeStoreView.updateTexture`,{start:r,end:a,firstBytes:new Uint8Array(this.data.buffer.slice(0,16)),block:this}),this._resetRange();const n=this.data.buffer,h=this.getTexture(i),u=4,o=(r-r%this.size)/this.size,d=(a-a%this.size)/this.size,l=o,p=this.size,c=d,g=o*this.size*u,x=(p+c*this.size)*u-g,f=_(this.pixelType),b=new f(n,g*f.BYTES_PER_ELEMENT,x),m=this.size,T=c-l+1;if(T>this.size)return void w().error(new t("mapview-webgl","Out-of-bounds index when updating AttributeData"));h.updateData(0,0,l,m,T,b)}catch(t){}}update(t){const{data:e,start:i,end:s}=t;if(null!=e&&null!=this.data){const s=this.data,r=i*this.texelSize;for(let i=0;i<e.length;i++){const a=1<<i%this.texelSize;t.layout&a&&(s[r+i]=e[i])}}this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,s)}resize(t,e){const i=this.size;if(this.size=e,this.textureOnly)return void(i!==this.size&&(this._lastTexture=this._texture,this._texture=null));const s=_(this.pixelType);this.destroy(),this.data=new s(t.buffer)}_resetRange(){this.dirtyStart=2147483647,this.dirtyEnd=0}_initTexture(t){const e=new T(t,this._textureDesc,this.data??void 0);if(null!=this._lastTexture&&this._fbos[0]){const i=this._lastTexture.descriptor.width,s=this._lastTexture.descriptor.height,r=this._lastTexture.descriptor.dataType,a=this._lastTexture.descriptor.pixelFormat,n=this.getFBO(t),h=g(r),u=new(_(r))(new ArrayBuffer(i*s*h*this.texelSize)),o=t.getBoundFramebufferObject(),{x:d,y:l,width:p,height:c}=t.getViewport();t.bindFramebuffer(n),n.readPixels(0,0,i,s,a,r,u),e.updateData(0,0,0,2*i,s/2,u),t.setViewport(d,l,p,c),t.bindFramebuffer(o)}return this.destroy(),this._texture=e,this._texture}}class D{constructor(){this.size=0,this._initialized=!1,this._locked=!1,this._version=0,this._forceNextUpload=!1}initialize(t){const{blocks:i,shared:s,size:r}=t;if(this.shared=s,this.size=r,e("esri-2d-update-debug")&&console.debug("AttributeStoreView.initialize",{message:t}),null==this._data)this._data=i.map(((t,e)=>null!=t?new z(t,r,s,e):null));else for(let t=0;t<this._data.length;t++){const e=this._data[t],a=i[t];null!=a&&(null==e?this._data[t]=new z(a,r,s,t):e.resize(a,r))}this._initialized=!0}destroy(){for(const t of this._data??[])t?.destroy();this._defaultTexture?.dispose(),this._pendingAttributeUpdate&&this._pendingAttributeUpdate.resolver.reject()}isEmpty(){return null==this._data}getBlock(t){return null==this._data?null:this._data[t]}setLabelMinZoom(t,e){this.setData(t,0,1,e)}getLabelMinZoom(t){return this.getData(t,0,1,255)}getFilterFlags(t){return this.getData(t,0,0,0)}getVVSize(t){return this.getData(t,r.VV,0,0)}getData(t,e,i,s){if(!this._data)return 0;const r=this._data[e];if(null==r)return 0;const a=r.getData(t,i);return null!=a?a:s}setData(t,e,i,s){this._data[e].setData(t,i,s)}lockTextureUpload(){this._locked=!0}unlockTextureUpload(){this._locked=!1,this._forceNextUpload=!0}async requestUpdate(i){if(this._pendingAttributeUpdate)return void w().error(new t("mapview-webgl","Tried to update attribute data with a pending update"));const r=s();return this._version=i.version,this._pendingAttributeUpdate={data:i,resolver:r},e("esri-2d-update-debug")&&console.debug(`Version[${this._version}] AttributeStoreView.requestUpdate`,{message:i}),r.promise}update(){if(this._initialized&&(!this._locked||this._forceNextUpload)&&(this._forceNextUpload=!1,null!=this._pendingAttributeUpdate)){const{data:t}=this._pendingAttributeUpdate,i=this._data;for(let s=0;s<t.blocks.length;s++){const r=t.blocks[s],a=i[s];null!=a&&null!=r&&(e("esri-2d-update-debug")&&console.debug(`Version[${this._version}] CpuBlock[${s}] AttributeStoreView.update`,{block:r}),a.update(r))}this._pendingAttributeUpdate.resolver.resolve(),this._pendingAttributeUpdate=null,e("esri-2d-update-debug")&&console.debug(`Version[${this._version}] AttributeStoreView.update`)}}getUniforms(t){return{filterFlags:{texture:this._getTexture(t,r.FilterFlags),unit:a},animation:{texture:this._getTexture(t,r.Animation),unit:n},gpgpu:{texture:this._getTexture(t,r.GPGPU),unit:h},visualVariableData:{texture:this._getTexture(t,r.VV),unit:u},dataDriven0:{texture:this._getTexture(t,r.DD0),unit:o},dataDriven1:{texture:this._getTexture(t,r.DD1),unit:d},dataDriven2:{texture:this._getTexture(t,r.DD2),unit:l},size:this.size}}_getTexture(t,e){const i=this._data?.[e];return i?(i.updateTexture(t,this._version),i.getTexture(t)):this._getDefaultTexture(t)}_getDefaultTexture(t){if(null==this._defaultTexture){const e=new m;e.wrapMode=x.CLAMP_TO_EDGE,e.samplingMode=f.NEAREST,e.width=1,e.height=1,this._defaultTexture=new T(t,e,new Uint8Array(4))}return this._defaultTexture}}class A extends y{constructor(t){super(t),this._statisticsByLevel=new Map,this.attributeView=new D}destroy(){this.children.forEach((t=>t.destroy())),this.removeAllChildren(),this.attributeView.destroy()}doRender(t){t.context.capabilities.enable("textureFloat"),t.context.capabilities.enable("vao"),super.doRender(t)}createRenderParams(t){const e=super.createRenderParams(t);return e.attributeView=this.attributeView,e.instanceStore=this._instanceStore,e.statisticsByLevel=this._statisticsByLevel,e}}class v{constructor(t,e,i,s,r){this._instanceId=t,this.techniqueRef=e,this._meshWriterName=i,this._input=s,this.optionalAttributes=r}get instanceId(){return c(this._instanceId)}createMeshInfo(t){return{id:this._instanceId,meshWriterName:this._meshWriterName,options:t,optionalAttributes:this.optionalAttributes}}getInput(){return this._input}setInput(t){this._input=t}}export{A,v as T};
