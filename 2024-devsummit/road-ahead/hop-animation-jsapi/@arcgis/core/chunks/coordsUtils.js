/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import{e as n}from"../core/lang.js";import{A as t}from"./Axis.js";import{j as e}from"./unitUtils.js";function r(n){if(!n)return null;if(Array.isArray(n))return n;const t=n.hasZ,e=n.hasM;if("point"===n.type)return e&&t?[n.x,n.y,n.z,n.m]:t?[n.x,n.y,n.z]:e?[n.x,n.y,n.m]:[n.x,n.y];if("polygon"===n.type)return n.rings.slice(0);if("polyline"===n.type)return n.paths.slice(0);if("multipoint"===n.type)return n.points.slice(0);if("extent"===n.type){const t=n.clone().normalize();if(!t)return null;let e=!1,r=!1;return t.forEach((n=>{n.hasZ&&(e=!0),n.hasM&&(r=!0)})),t.map((n=>{const t=[[n.xmin,n.ymin],[n.xmin,n.ymax],[n.xmax,n.ymax],[n.xmax,n.ymin],[n.xmin,n.ymin]];if(e&&n.hasZ){const e=.5*(n.zmax-n.zmin);for(let n=0;n<t.length;n++)t[n].push(e)}if(r&&n.hasM){const e=.5*(n.mmax-n.mmin);for(let n=0;n<t.length;n++)t[n].push(e)}return t}))}return null}function i(n,t){const e=t[0]-n[0],r=t[1]-n[1];if(n.length>2&&t.length>2){const i=n[2]-t[2];return Math.sqrt(e*e+r*r+i*i)}return Math.sqrt(e*e+r*r)}function s(n,t,e){const r=n[0]+e*(t[0]-n[0]),i=n[1]+e*(t[1]-n[1]);return n.length>2&&t.length>2?[r,i,n[2]+e*(t[2]-n[2])]:[r,i]}function o(n,t,e,r){return f(n,t,e[r],e[r+1])}function f(n,t,e,r){const[i,s]=t,[o,f]=e,[l,u]=r,a=l-o,c=u-f,p=a*a+c*c,h=(i-o)*a+(s-f)*c,m=Math.min(1,Math.max(0,h/p));return n[0]=o+a*m,n[1]=f+c*m,n}function l(n,t,e,r,i,s){let o=e,f=r,l=i-o,u=s-f;if(0!==l||0!==u){const e=((n-o)*l+(t-f)*u)/(l*l+u*u);e>1?(o=i,f=s):e>0&&(o+=l*e,f+=u*e)}return l=n-o,u=t-f,l*l+u*u}function u(n,t){return s(n,t,.5)}function a(n){const t=n.length;let e=0;for(let r=0;r<t-1;++r)e+=i(n[r],n[r+1]);return e}function c(n,t){if(t<=0)return n[0];const e=n.length;let r=0;for(let o=0;o<e-1;++o){const e=i(n[o],n[o+1]);if(t-r<e){const i=(t-r)/e;return s(n[o],n[o+1],i)}r+=e}return n[e-1]}function p(n,e=t.X,r=t.Y){let i=0;const s=n.length;let o=n[0];for(let t=0;t<s-1;t++){const s=n[t+1];i+=(s[e]-o[e])*(s[r]+o[r]),o=s}return i>=0}function h(t){const e=t.length;return e>2&&n(t[0],t[e-1])}function m(n){if("rings"in n&&(y(n),n.rings.length>0&&!p(n.rings[0])))for(const t of n.rings)t.reverse()}function y(n){if("rings"in n)for(const t of n.rings)h(t)||t.push(t[0].slice())}function g(n){return"polygon"!==n.type&&"polyline"!==n.type||x("polygon"===n.type?n.rings:n.paths,n.spatialReference),n}function x(n,t){const r=e(t);if(!r)return;const i=r.valid[0],s=r.valid[1],o=s-i;for(const t of n){let n=1/0,e=-1/0;for(const r of t){const t=M(r[0],i,s);n=Math.min(n,t),e=Math.max(e,t),r[0]=t}const r=e-n;o-r<r&&t.forEach((n=>{n[0]<0&&(n[0]+=o)}))}}function M(n,t,e){const r=e-t;return n<t?e-(t-n)%r:n>e?t+(n-t)%r:n}function j(n,t){if(n===t)return!0;if(n.type!==t.type)return!1;if("point"===n.type||"mesh"===n.type||"extent"===n.type)return!0;if("multipoint"===n.type)return n.points.length===t.points.length;const[e,r]="polyline"===n.type?[n.paths,t.paths]:[n.rings,t.rings];return e.length===r.length&&e.every(((n,t)=>n.length===r[t].length))}export{x as a,i as b,y as c,a as d,c as e,m as f,r as g,u as h,p as i,l as j,M as k,f as l,j as m,o as p,g as u};
