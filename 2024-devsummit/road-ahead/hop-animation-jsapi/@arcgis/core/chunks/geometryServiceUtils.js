/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import r from"../config.js";import o from"../core/Error.js";import t from"../portal/Portal.js";import{p as e}from"./project.js";import s from"../rest/support/ProjectParameters.js";import"../core/lang.js";import"./Logger.js";import"./tslib.es6.js";import"../kernel.js";import"../core/urlUtils.js";import"../core/JSONSupport.js";import"../core/Accessor.js";import"../core/Handles.js";import"./maybe.js";import"../core/accessorSupport/decorators/subclass.js";import"./metadata.js";import"./utils.js";import"./handleUtils.js";import"./tracking.js";import"./ensureType.js";import"../core/accessorSupport/decorators/property.js";import"./ObservableBase.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"../request.js";import"../core/Loadable.js";import"../core/Promise.js";import"./reader.js";import"../geometry/Extent.js";import"../geometry/Geometry.js";import"../geometry/SpatialReference.js";import"./unitUtils.js";import"./jsonMap.js";import"./assets.js";import"./writer.js";import"../geometry/Point.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/support/webMercatorUtils.js";import"./locale.js";import"../portal/PortalGroup.js";import"../portal/PortalQueryParams.js";import"../portal/PortalQueryResult.js";import"../portal/PortalUser.js";import"../portal/PortalFolder.js";import"../geometry/support/jsonUtils.js";import"../geometry/Multipoint.js";import"./zmUtils.js";import"../geometry/Polygon.js";import"./coordsUtils.js";import"./Axis.js";import"./extentUtils.js";import"./aaBoundingRect.js";import"./mathUtils.js";import"./vec3.js";import"./vec3f64.js";import"./common.js";import"../geometry/Polyline.js";import"./utils7.js";import"./utils8.js";async function i(e=null,s){if(r.geometryServiceUrl)return r.geometryServiceUrl;if(!e)throw new o("internal:geometry-service-url-not-configured");let i;i="portal"in e?e.portal||t.getDefault():e,await i.load({signal:s});const p=i.helperServices?.geometry?.url;if(!p)throw new o("internal:geometry-service-url-not-configured");return p}async function p(r,t,p=null,m){const a=await i(p,m),l=new s;l.geometries=[r],l.outSpatialReference=t;const j=await e(a,l,{signal:m});if(j&&Array.isArray(j)&&1===j.length)return j[0];throw new o("internal:geometry-service-projection-failed")}export{i as getGeometryServiceURL,p as projectGeometry};
