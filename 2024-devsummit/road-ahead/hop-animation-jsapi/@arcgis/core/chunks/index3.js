/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.3.0
 */
const t=(()=>{const t=Intl.supportedValuesOf("timeZone");return[...new Set([...t,"Etc/GMT+1","Etc/GMT+10","Etc/GMT+11","Etc/GMT+12","Etc/GMT+2","Etc/GMT+3","Etc/GMT+4","Etc/GMT+5","Etc/GMT+6","Etc/GMT+7","Etc/GMT+8","Etc/GMT+9","Etc/GMT-1","Etc/GMT-10","Etc/GMT-11","Etc/GMT-12","Etc/GMT-13","Etc/GMT-14","Etc/GMT-2","Etc/GMT-3","Etc/GMT-4","Etc/GMT-5","Etc/GMT-6","Etc/GMT-7","Etc/GMT-8","Etc/GMT-9"])]})(),e={startDate:(new Date).toISOString(),groupDateRange:365,debug:!1},n=new Set(["Europe","Asia","America","America/Argentina","Africa","Australia","Pacific","Atlantic","Antarctica","Arctic","Indian"]),o=t=>{if(t.includes("Istanbul"))return"Europe";const e=t.lastIndexOf("/");return-1===e?t:t.slice(0,e)},r=t=>n.has(t),a=(t,e,n)=>t.length===e.length&&t.every(((t,o)=>n.same(t,e[o]))),i=(t,e=5)=>{const n=t.filter((({label:t})=>r(o(t))));return 0===n.length?[0]:function(t,e=5){const n=t.length;if(n<=e)return t;const o=Math.min(n-2,e-2),r=(n-1)/(o+1);return[t[0],...Array.from({length:o},((e,n)=>t[Math.round((n+1)*r)])),t[n-1]]}(n.map((e=>t.indexOf(e))),e)};async function s(n){const{debug:s,groupDateRange:c,hooks:l,startDate:u,dateEngine:T}={...e,...n},G=[];if(!T)throw new Error("dateEngine is required");const g=t.map((t=>({label:t})));l?.onBeforeTimeZoneMetadataCreate?.(g);const E=((t,e,n,a,i=!1)=>{const s=new Map;i&&console.log(`Initializing data starting ${e} with ${n} days in the future, comparing ${t.length} timezones`);const c=((t,e,n)=>{const o=[];let r=n.create(t);for(let t=0;t<=e;t++)r=n.increase(r),o.push(n.formatToIsoDateString(r));return o})(e,n,a);return t.map((t=>{const e=t.label,n=o(e),i=c.map((t=>{const n=`${t}-${e}`;let o=s.get(n);return o||(o=a.isoToTimeZone(t,e),s.set(n,o),o)}));return{...t,continent:n,isRegularContinent:r(n),dates:i}}))})(g,u,c,T,s);l?.onTimeZoneMetadataCreate?.(E);for(const t of E){const{label:e,continent:n,dates:o}=t;if(t.visited)continue;t.visited=!0;const r={labelTzIndices:void 0,tzs:[{label:e}]};l?.onGroupCreate?.(r,t);for(const t of E.filter((t=>!t.visited))){const{label:e,continent:i,isRegularContinent:s,dates:c}=t;if((n===i||!s)&&a(o,c,T)){const n={label:e};r.tzs.push(n),l?.onGroupTimeZoneAdd?.(r,n,t),t.visited=!0}}G.push(r),l?.onGroupAdd?.(r)}const M=G.map((t=>{l?.onBeforeFinalGroupCreate?.(t),t.tzs=t.tzs.sort(((t,e)=>t.label.localeCompare(e.label)));const e={labelTzIndices:i(t.tzs,7),tzs:t.tzs.map((t=>t.label))};return l?.onFinalGroupCreate?.(e,t),e})).sort(((t,e)=>e.tzs.length-t.tzs.length));if(s){const e=t.map((t=>M.some((e=>e.tzs.includes(t)))?null:t)).filter(Boolean);if(e.length>0)throw new Error(`There are ${e.length} missing timezones: ${e.toString()}`)}return l?.onFinalGroupingCreate?l.onFinalGroupingCreate(M):M}export{s as groupTimeZones};
