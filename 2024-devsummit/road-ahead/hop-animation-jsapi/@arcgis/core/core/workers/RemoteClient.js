/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import{buildDate as e,fullVersion as s,revision as t}from"../../kernel.js";import r from"../Error.js";import{isAborted as o,createAbortError as n,onAbort as i,isPromiseLike as a,isAbortError as c,o as l}from"../promiseUtils.js";import{m as p}from"../../chunks/handleUtils.js";import{r as h}from"../../chunks/maybe.js";import{h as u}from"../lang.js";import"../urlUtils.js";import"../../config.js";import"../JSONSupport.js";import"../../chunks/tslib.es6.js";import"../Accessor.js";import"../Handles.js";import"../../chunks/Logger.js";import"../accessorSupport/decorators/subclass.js";import"../../chunks/metadata.js";import"../../chunks/utils.js";import"../../chunks/tracking.js";import"../../chunks/ensureType.js";import"../accessorSupport/decorators/property.js";import"../../chunks/ObservableBase.js";import"../scheduling.js";function _(e,s){return new Proxy({},{get:(t,r,o)=>(...t)=>{let o,n;const i=t[t.length-1];var a;return"object"!=typeof(a=i)||Array.isArray(a)||null==a||!("signal"in a)&&!("transferList"in a)&&0!==Object.keys(a).length||(o=i.signal,n=i.transferList,t.pop()),e.apply(s?`${s}.${r.toString()}`:r.toString(),t,{transferList:n,signal:o})}})}const k={statsWorker:()=>import("../../chunks/statsWorker.js"),geometryEngineWorker:()=>import("../../chunks/geometryEngineWorker.js"),CSVSourceWorker:()=>import("../../chunks/CSVSourceWorker.js"),EdgeProcessingWorker:()=>import("../../chunks/EdgeProcessingWorker.js"),ElevationSamplerWorker:()=>import("../../chunks/ElevationSamplerWorker.js"),FeatureServiceSnappingSourceWorker:()=>import("../../chunks/FeatureServiceSnappingSourceWorker.js"),GeoJSONSourceWorker:()=>import("../../chunks/GeoJSONSourceWorker.js"),LercWorker:()=>import("../../chunks/LercWorker.js"),MemorySourceWorker:()=>import("../../chunks/MemorySourceWorker.js"),PBFDecoderWorker:()=>import("../../chunks/PBFDecoderWorker.js"),FeaturePipelineWorker:()=>import("../../chunks/FeaturePipelineWorker.js"),PointCloudWorker:()=>import("../../chunks/PointCloudWorker.js"),RasterWorker:()=>import("../../chunks/RasterWorker.js"),SceneLayerSnappingSourceWorker:()=>import("../../chunks/SceneLayerSnappingSourceWorker.js"),SceneLayerWorker:()=>import("../../chunks/SceneLayerWorker.js").then((e=>e.S)),WFSSourceWorker:()=>import("../../chunks/WFSSourceWorker.js"),WorkerTileHandler:()=>import("../../chunks/WorkerTileHandler.js"),Lyr3DWorker:()=>import("../../chunks/Lyr3DWorker.js")};var d;!function(e){e[e.HANDSHAKE=0]="HANDSHAKE",e[e.OPEN=1]="OPEN",e[e.OPENED=2]="OPENED",e[e.RESPONSE=3]="RESPONSE",e[e.INVOKE=4]="INVOKE",e[e.ABORT=5]="ABORT",e[e.CLOSE=6]="CLOSE",e[e.OPEN_PORT=7]="OPEN_PORT",e[e.ON=8]="ON"}(d||(d={}));let m=0;function g(){return m++}function f(e){return e?"string"==typeof e?JSON.stringify({name:"message",message:e}):e.toJSON?JSON.stringify(e):JSON.stringify({name:e.name,message:e.message,details:e.details||{stack:e.stack}}):null}function b(e,s,t,r){if(s.type===d.OPEN_PORT)return void e.postMessage(s,[s.port]);if(s.type!==d.INVOKE&&s.type!==d.RESPONSE)return void e.postMessage(s);let o;var n;if((n=t)&&"object"==typeof n&&("result"in n||"transferList"in n)?(o=y(t.transferList),s.data=t.result):(o=y(r),s.data=t),o){if(u("ff"))for(const t of o)if("byteLength"in t&&t.byteLength>267386880){const t="Worker call with large ArrayBuffer would crash Firefox";switch(s.type){case d.INVOKE:throw t;case d.RESPONSE:return void b(e,{type:d.RESPONSE,jobId:s.jobId,error:f(t)})}}e.postMessage(s,o)}else e.postMessage(s)}function j(e){if(!e)return null;const s=e.data;return s?"string"==typeof s?JSON.parse(s):s:null}function y(e){if(!e?.length)return null;if(u("esri-workers-arraybuffer-transfer"))return e;const s=e.filter((e=>{return!((s=e)instanceof ArrayBuffer||"ArrayBuffer"===s?.constructor?.name);var s}));return s.length?s:null}const{CLOSE:S,ABORT:O,INVOKE:v,RESPONSE:E,OPEN_PORT:W,ON:M}=d;class N{constructor(e){this._timer=null,this._cancelledJobIds=new Set,this._invokeMessages=[],this._invoke=e,this._timer=null,this._process=this._process.bind(this)}push(e){e.type===d.ABORT?this._cancelledJobIds.add(e.jobId):(this._invokeMessages.push(e),null===this._timer&&(this._timer=setTimeout(this._process,0)))}clear(){this._invokeMessages.length=0,this._cancelledJobIds.clear(),this._timer=null}_process(){this._timer=null;for(const e of this._invokeMessages)this._cancelledJobIds.has(e.jobId)||this._invoke(e);this._cancelledJobIds.clear(),this._invokeMessages.length=0}}class P{static connect(e){const s=new MessageChannel;let t;t="function"==typeof e?new e:"default"in e&&"function"==typeof e.default?new e.default:e;const r=new P(s.port1,{channel:s,client:t});return"object"==typeof t&&"remoteClient"in t&&(t.remoteClient=r),P.clients.set(r,t),s.port2}static loadWorker(e){const s=k[e];return s?s():Promise.resolve(null)}constructor(e,s,t){this._port=e,this._jobQueue=t,this._outJobs=new Map,this._inJobs=new Map,this._invokeQueue=new N((e=>this._onInvokeMessage(e))),this._client=s.client,this._onMessage=this._onMessage.bind(this),this._channel=s.channel,this._schedule=s.schedule,this._port.addEventListener("message",this._onMessage),this._port.start()}close(){this._post({type:S}),this._close()}isBusy(){return this._outJobs.size>0}invoke(e,s,t){return this.apply(e,[s],t)}apply(e,s,t){const a=t?.signal,c=t?.transferList;if(!this._port)return Promise.reject(new r("worker:port-closed",`Cannot call invoke('${e}'), port is closed`,{methodName:e,data:s}));const l=g();return new Promise(((t,r)=>{if(o(a))return this._processWork(),void r(n());const p=i(a,(()=>{const e=this._outJobs.get(l);e&&(this._outJobs.delete(l),this._processWork(),h(e.abortHandle),this._post({type:O,jobId:l}),r(n()))})),u={resolve:t,reject:r,abortHandle:p,debugInfo:e};this._outJobs.set(l,u),this._post({type:v,jobId:l,methodName:e,abortable:null!=a},s,c)}))}createInvokeProxy(e){return _(this,e)}on(e,s){const t=new MessageChannel;function r(e){s(e.data)}return this._port.postMessage({type:d.ON,eventType:e,port:t.port2},[t.port2]),t.port1.addEventListener("message",r),t.port1.start(),p((()=>{t.port1.postMessage({type:d.CLOSE}),t.port1.close(),t.port1.removeEventListener("message",r)}))}jobAdded(){this._processWork()}openPort(){const e=new MessageChannel;return this._post({type:W,port:e.port2}),e.port1}_processWork(){if(this._outJobs.size>=2)return;const e=this._jobQueue?.pop();if(!e)return;const{methodName:s,data:t,invokeOptions:r,resolver:o}=e;this.apply(s,t,r).then((e=>o.resolve(e))).catch((e=>o.reject(e)))}_close(){this._channel&&(this._channel=void 0),this._port.removeEventListener("message",this._onMessage),this._port.close(),this._outJobs.forEach((e=>{h(e.abortHandle),e.reject(n(`Worker closing, aborting job calling '${e.debugInfo}'`))})),this._inJobs.clear(),this._outJobs.clear(),this._invokeQueue.clear(),this._port=null,this._client=null,this._schedule=null}_onMessage(e){null!=this._schedule?this._schedule((()=>this._processMessage(e))):this._processMessage(e)}_processMessage(e){const s=j(e);if(s)switch(s.type){case E:this._onResponseMessage(s);break;case v:this._invokeQueue.push(s);break;case O:this._onAbortMessage(s);break;case S:this._onCloseMessage();break;case W:this._onOpenPortMessage(s);break;case M:this._onOnMessage(s)}}_onAbortMessage(e){const s=this._inJobs,t=e.jobId,r=s.get(t);this._invokeQueue.push(e),r&&(r.controller&&r.controller.abort(),s.delete(t))}_onCloseMessage(){const e=this._client;this._close(),e&&"destroy"in e&&P.clients.get(this)===e&&e.destroy(),P.clients.delete(this),e?.remoteClient&&(e.remoteClient=null)}_onInvokeMessage(e){const{methodName:s,jobId:t,data:r=[],abortable:o}=e,n=o?new AbortController:null,i=this._inJobs;let l,p=this._client,h=p[s];try{if(!h&&s&&s.includes(".")){const e=s.split(".");for(let s=0;s<e.length-1;s++)p=p[e[s]],h=p[e[s+1]]}if("function"!=typeof h)throw new TypeError(`${s} is not a function`);r.push({client:this,signal:n?n.signal:null}),l=h.apply(p,r)}catch(e){return void this._post({type:E,jobId:t,error:f(e)})}a(l)?(i.set(t,{controller:n,promise:l}),l.then((e=>{i.has(t)&&(i.delete(t),this._post({type:E,jobId:t},e))}),(e=>{i.has(t)&&(i.delete(t),c(e)||this._post({type:E,jobId:t,error:f(e||{message:`Error encountered at method ${s}`})}))}))):this._post({type:E,jobId:t},l)}_onOpenPortMessage(e){new P(e.port,{client:this._client})}_onOnMessage(e){const{port:s}=e,t=this._client.on(e.eventType,(e=>{s.postMessage(e)})),r=l(e.port,"message",(e=>{const o=j(e);o?.type===d.CLOSE&&(r.remove(),t.remove(),s.close())}))}_onResponseMessage(e){const{jobId:s,error:t,data:o}=e,n=this._outJobs;if(!n.has(s))return;const i=n.get(s);n.delete(s),this._processWork(),h(i.abortHandle),t?i.reject(r.fromJSON(JSON.parse(t))):i.resolve(o)}_post(e,s,t){return b(this._port,e,s,t)}}P.kernelInfo={buildDate:e,fullVersion:s,revision:t},P.clients=new Map;export{d as M,_ as c,P as default,g as n,b as p,j as r,f as t};
