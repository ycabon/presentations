/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import{JSONSupport as e}from"../../core/JSONSupport.js";import{clone as o}from"../../core/lang.js";import{property as n}from"../../core/accessorSupport/decorators/property.js";import"../../chunks/Logger.js";import{e as r}from"../../chunks/enumeration.js";import{r as i}from"../../chunks/reader.js";import{subclass as s}from"../../core/accessorSupport/decorators/subclass.js";import{w as p}from"../../chunks/writer.js";import{s as a,J as u}from"../../chunks/jsonMap.js";import{I as c}from"../../chunks/ensureType.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/maybe.js";import"../../chunks/metadata.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/ObservableBase.js";import"../../chunks/tracking.js";import"../../core/scheduling.js";import"../../core/promiseUtils.js";import"../../core/Error.js";import"../../config.js";const y=a()({RSP_NearestNeighbor:"nearest",RSP_BilinearInterpolation:"bilinear",RSP_CubicConvolution:"cubic",RSP_Majority:"majority"}),m=a()({esriNoDataMatchAny:"any",esriNoDataMatchAll:"all"}),l=a()({U1:"u1",U2:"u2",U4:"u4",U8:"u8",S8:"s8",U16:"u16",S16:"s16",U32:"u32",S32:"s32",F32:"f32",F64:"f64",C64:"c64",C128:"c128",UNKNOWN:"unknown"});let f=class extends e{constructor(){super(...arguments),this.pixelType="unknown"}};t([n({type:String,json:{write:!0}})],f.prototype,"name",void 0),t([n({type:String,json:{write:!0}})],f.prototype,"description",void 0),t([n({type:c,json:{type:c,write:!0,name:"_object_id"}})],f.prototype,"id",void 0),t([n({type:String,json:{type:l.jsonValues,read:l.read,write:l.write}})],f.prototype,"pixelType",void 0),t([n({type:String,json:{write:!0}})],f.prototype,"type",void 0),f=t([s("esri.layers.support.RasterFunctionInfo")],f);const d=f;let j=class extends e{constructor(){super(...arguments),this.isDataset=!1,this.isPublic=!1,this.type="RasterFunctionVariable"}};t([n({type:String,json:{write:!0}})],j.prototype,"name",void 0),t([n({type:Number,json:{type:c,write:!0,name:"_object_id"}})],j.prototype,"id",void 0),t([n({type:Boolean,json:{write:!0}})],j.prototype,"isDataset",void 0),t([n({type:Boolean,json:{write:!0}})],j.prototype,"isPublic",void 0),t([n({json:{write:!0}})],j.prototype,"value",void 0),t([n({type:String,json:{write:!0}})],j.prototype,"type",void 0),j=t([s("esri.layers.support.RasterFunctionVariable")],j);const w={key:"type",base:null,typeMap:{RasterFunctionVariable:j}};let h=class extends e{};t([n({types:w,json:{types:w,name:"MatchVariable"}})],h.prototype,"matchVariable",void 0),t([n({types:w,json:{types:w,name:"UnionDimension"}})],h.prototype,"unionDimension",void 0),t([n({type:Number,json:{type:c,write:!0,name:"_object_id"}})],h.prototype,"id",void 0),t([n({type:String,json:{write:!0}})],h.prototype,"type",void 0),h=t([s("esri.layers.support.RasterFunctionProperties")],h);const g=h,v=new u({0:"mosaic",1:"item",2:"item-group"},{useNumericKeys:!0});let F=class extends e{constructor(){super(...arguments),this.functionType="mosaic",this.type="RasterFunctionTemplate"}};t([n({type:[String],json:{write:!0}})],F.prototype,"aliases",void 0),t([n({type:Object,json:{write:!0}})],F.prototype,"arguments",void 0),t([n({type:String,json:{write:!0}})],F.prototype,"description",void 0),t([n({type:d,json:{write:!0,name:"function"}})],F.prototype,"functionInfo",void 0),t([n({type:v.apiValues,json:{type:[0,1,2],read:v.read,write:v.write}})],F.prototype,"functionType",void 0),t([n({type:String,json:{write:!0}})],F.prototype,"group",void 0),t([n({type:String,json:{write:!0}})],F.prototype,"help",void 0),t([n({type:Number,json:{type:c,write:!0,name:"_object_id"}})],F.prototype,"id",void 0),t([n({type:String,json:{write:!0}})],F.prototype,"name",void 0),t([n({type:String,json:{write:!0,name:"definition"}})],F.prototype,"queryDefinition",void 0),t([n({type:String,json:{write:!0}})],F.prototype,"tag",void 0),t([n({type:g,json:{write:!0}})],F.prototype,"properties",void 0),t([n({type:String,json:{write:!0}})],F.prototype,"thumbnail",void 0),t([n({type:String,json:{write:!0}})],F.prototype,"thumbnailEx",void 0),t([n({json:{type:["RasterFunctionTemplate"],write:!0}})],F.prototype,"type",void 0),F=t([s("esri.layers.support.RasterFunctionTemplate")],F);const S=F;var b;const N=new Set(["raster","raster2","dem","fillraster"]),k=new Set(["rasters"]),A=t=>t?.rasterFunction?R.fromJSON(t):t,D=t=>t&&t instanceof R?t.toJSON():t,C=t=>t?.functionName&&!t.declaredClass,U=t=>C(t)?new R(t):t,O={types:{key:"type",base:null,typeMap:{RasterFunctionTemplate:S}},json:{write:!0,name:"rasterFunctionDefinition"}};let R=b=class extends e{constructor(t){super(t),this.functionName=null,this.outputPixelType="unknown",this.variableName=null,this.functionDefinition=null}set functionArguments(t){if(t){const e=Object.keys(t);if(e.some((e=>N.has(e.toLowerCase())&&C(t[e])))||e.some((e=>k.has(e.toLowerCase())&&Array.isArray(t[e])&&t[e].some((t=>C(t)))))){t=o(t);for(const o of e)N.has(o.toLowerCase())?t[o]=U(t[o]):k.has(o.toLowerCase())&&Array.isArray(t[o])&&(t[o]=t[o].map((t=>U(t))))}}this._set("functionArguments",t)}readFunctionArguments(t){return(t=>{if(null==t)return null;t=o(t);const e={};for(const o of Object.keys(t))N.has(o.toLowerCase())?e[o]=A(t[o]):k.has(o.toLowerCase())&&Array.isArray(t[o])?e[o]=t[o].map(A):e[o]=t[o];return e})(t)}writeFunctionArguments(t,e,o){const n={};for(const e of Object.keys(t))N.has(e.toLowerCase())?n[e]=D(t[e]):k.has(e.toLowerCase())&&Array.isArray(t[e])?n[e]=t[e].map(D):n[e]=D(t[e]);e[o]=n}readFunctionName(t,e){const o=e.rasterFunctionInfos;return e.name||(o?.length&&"None"!==o[0].name?o[0].name:e.rasterFunctionDefinition?e.rasterFunctionDefinition.name:e.rasterFunction)}get rasterFunctionDefinition(){return this.functionDefinition?.toJSON()}set rasterFunctionDefinition(t){this.functionDefinition=t?S.fromJSON(t):null}get hasClipFunction(){return this.rasterFunctionDefinition?JSON.stringify(this.rasterFunctionDefinition).includes('"type":"ClipFunction"'):JSON.stringify(this).includes('"rasterFunction":"Clip"')}clone(){return new b({functionName:this.functionName,functionArguments:o(this.functionArguments),outputPixelType:this.outputPixelType,variableName:this.variableName,rasterFunctionDefinition:o(this.rasterFunctionDefinition)})}};t([n({json:{type:Object,name:"rasterFunctionArguments"}})],R.prototype,"functionArguments",null),t([i("functionArguments")],R.prototype,"readFunctionArguments",null),t([p("functionArguments")],R.prototype,"writeFunctionArguments",null),t([n({json:{type:String,write:{target:"rasterFunction"}}})],R.prototype,"functionName",void 0),t([i("functionName",["rasterFunction","rasterFunctionInfos","rasterFunctionDefinition"])],R.prototype,"readFunctionName",null),t([r({C128:"c128",C64:"c64",F32:"f32",F64:"f64",S16:"s16",S32:"s32",S8:"s8",U1:"u1",U16:"u16",U2:"u2",U32:"u32",U4:"u4",U8:"u8",UNKNOWN:"unknown"},{ignoreUnknown:!1}),n({json:{default:"unknown"}})],R.prototype,"outputPixelType",void 0),t([n({type:String,json:{read:!0,write:!0}})],R.prototype,"variableName",void 0),t([n()],R.prototype,"rasterFunctionDefinition",null),t([n(O)],R.prototype,"functionDefinition",void 0),t([n()],R.prototype,"hasClipFunction",null),R=b=t([s("esri.layers.support.RasterFunction")],R);const _=R;export{_ as default,y as i,m as n,l as p};
