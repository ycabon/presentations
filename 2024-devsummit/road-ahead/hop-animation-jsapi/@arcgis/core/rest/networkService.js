/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import e from"../request.js";import t from"../core/Error.js";import{L as r}from"../chunks/Logger.js";import{g as o}from"../config.js";import{removeTrailingSlash as s}from"../core/urlUtils.js";import{a as i,p as a}from"../chunks/utils7.js";import{_ as n}from"../chunks/tslib.es6.js";import{JSONSupport as l}from"../core/JSONSupport.js";import{property as u}from"../core/accessorSupport/decorators/property.js";import"../core/lang.js";import{e as p}from"../chunks/enumeration.js";import{r as d}from"../chunks/reader.js";import{subclass as c}from"../core/accessorSupport/decorators/subclass.js";import{w as m}from"../chunks/writer.js";import{i as v,k as f,z as h,A as y,g}from"../chunks/networkEnums.js";import T from"./support/TravelMode.js";import"../kernel.js";import"../core/Accessor.js";import"../core/Handles.js";import"../chunks/maybe.js";import"../chunks/metadata.js";import"../chunks/utils.js";import"../chunks/handleUtils.js";import"../chunks/ObservableBase.js";import"../chunks/tracking.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"../chunks/ensureType.js";import"../chunks/jsonMap.js";import"../core/Clonable.js";let w=class extends l{constructor(e){super(e),this.dataType=null,this.name=null,this.parameterNames=null,this.restrictionUsageParameterName=null,this.timeNeutralAttributeName=null,this.trafficSupport=null,this.units=null,this.usageType=null}};n([u({type:String})],w.prototype,"dataType",void 0),n([p(v,{ignoreUnknown:!1})],w.prototype,"name",void 0),n([u({type:[String]})],w.prototype,"parameterNames",void 0),n([u({type:String})],w.prototype,"restrictionUsageParameterName",void 0),n([p(f,{ignoreUnknown:!1})],w.prototype,"timeNeutralAttributeName",void 0),n([u({type:String})],w.prototype,"trafficSupport",void 0),n([p(h)],w.prototype,"units",void 0),n([p(y)],w.prototype,"usageType",void 0),w=n([c("esri.rest.support.NetworkAttribute")],w);const k=w;let M=class extends l{constructor(e){super(e),this.buildTime=null,this.name=null,this.networkAttributes=null,this.networkSources=null,this.state=null}};n([u({type:Number})],M.prototype,"buildTime",void 0),n([u({type:String})],M.prototype,"name",void 0),n([u({type:[k]})],M.prototype,"networkAttributes",void 0),n([u()],M.prototype,"networkSources",void 0),n([u({type:String})],M.prototype,"state",void 0),M=n([c("esri.rest.support.NetworkDataset")],M);const j=M;let b=class extends l{constructor(e){super(e),this.accumulateAttributeNames=null,this.attributeParameterValues=null,this.currentVersion=null,this.defaultTravelMode=null,this.directionsLanguage=null,this.directionsLengthUnits=null,this.directionsSupportedLanguages=null,this.directionsTimeAttribute=null,this.hasZ=null,this.impedance=null,this.networkDataset=null,this.supportedTravelModes=null}readAccumulateAttributes(e){return null==e?null:e.map((e=>v.fromJSON(e)))}writeAccumulateAttributes(e,t,r){e?.length&&(t[r]=e.map((e=>v.toJSON(e))))}get capabilities(){return{supportsNow:(this.currentVersion??10)>=10.81}}readDefaultTravelMode(e,t){const r=t.supportedTravelModes?.find((({id:e})=>e===t.defaultTravelMode))??t.supportedTravelModes?.find((({itemId:e})=>e===t.defaultTravelMode));return r?T.fromJSON(r):null}};n([u()],b.prototype,"accumulateAttributeNames",void 0),n([d("accumulateAttributeNames")],b.prototype,"readAccumulateAttributes",null),n([m("accumulateAttributeNames")],b.prototype,"writeAccumulateAttributes",null),n([u()],b.prototype,"attributeParameterValues",void 0),n([u()],b.prototype,"capabilities",null),n([u()],b.prototype,"currentVersion",void 0),n([u()],b.prototype,"defaultTravelMode",void 0),n([d("defaultTravelMode",["defaultTravelMode","supportedTravelModes"])],b.prototype,"readDefaultTravelMode",null),n([u()],b.prototype,"directionsLanguage",void 0),n([p(g)],b.prototype,"directionsLengthUnits",void 0),n([u()],b.prototype,"directionsSupportedLanguages",void 0),n([p(f,{ignoreUnknown:!1})],b.prototype,"directionsTimeAttribute",void 0),n([u()],b.prototype,"hasZ",void 0),n([p(v,{ignoreUnknown:!1})],b.prototype,"impedance",void 0),n([u({type:j})],b.prototype,"networkDataset",void 0),n([u({type:[T]})],b.prototype,"supportedTravelModes",void 0),b=n([c("esri.rest.support.NetworkServiceDescription")],b);const N=b;function S(e,t,r,o){o[r]=[t.length,t.length+e.length],e.forEach((e=>{t.push(e.geometry)}))}function A(e,t){for(let r=0;r<t.length;r++){const o=e[t[r]];if(o&&o.length)for(const e of o)e.z=void 0}r.getLogger("esri.rest.networkService").warnOnce("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")}function U(e,t){for(let r=0;r<t.length;r++){const o=e[t[r]];if(o&&o.length)for(const e of o)if(null!=e&&e.hasZ)return!0}return!1}async function L(r,n,l){if(!r)throw new t("network-service:missing-url","Url to Network service is missing");const u=i({f:"json",token:n},l),{data:p}=await e(r,u),d=p.currentVersion>=10.4?async function(r,o,a){try{const t=i({f:"json",token:o},a),n=s(r)+"/retrieveTravelModes",{data:{supportedTravelModes:l,defaultTravelMode:u}}=await e(n,t);return{supportedTravelModes:l,defaultTravelMode:u}}catch(e){throw new t("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:e})}}(r,n,l):async function(t,r){const n=i({f:"json"},r),{data:l}=await e(t.replace(/\/rest\/.*$/i,"/info"),n);if(!l?.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};const{owningSystemUrl:u}=l,p=s(u)+"/sharing/rest/portals/self",{data:d}=await e(p,n),c=o("helperServices.routingUtilities.url",d);if(!c)return{supportedTravelModes:[],defaultTravelMode:null};const m=a(u),v=/\/solve$/i.test(m.path)?"Route":/\/solveclosestfacility$/i.test(m.path)?"ClosestFacility":"ServiceAreas",f=i({f:"json",serviceName:v},r),h=s(c)+"/GetTravelModes/execute",y=await e(h,f),g=[];let T=null;if(y?.data?.results?.length){const e=y.data.results;for(const t of e)if("supportedTravelModes"===t.paramName){if(t.value?.features)for(const{attributes:e}of t.value.features)if(e){const t=JSON.parse(e.TravelMode);g.push(t)}}else"defaultTravelMode"===t.paramName&&(T=t.value)}return{supportedTravelModes:g,defaultTravelMode:T}}(r,l),{defaultTravelMode:c,supportedTravelModes:m}=await d;return p.defaultTravelMode=c,p.supportedTravelModes=m,N.fromJSON(p)}export{S as collectGeometries,A as dropZValuesOffInputGeometry,L as fetchServiceDescription,U as isInputGeometryZAware};
