/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
import{_ as o}from"../../chunks/tslib.es6.js";import t from"../../core/Accessor.js";import{ignoreAbortErrors as e}from"../../core/promiseUtils.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import"../../core/lang.js";import"../../chunks/Logger.js";import{subclass as n}from"../../core/accessorSupport/decorators/subclass.js";import"../../core/Handles.js";import"../../chunks/maybe.js";import"../../chunks/metadata.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/ObservableBase.js";import"../../chunks/tracking.js";import"../../core/scheduling.js";import"../../core/Error.js";import"../../config.js";import"../../chunks/ensureType.js";let i=class extends t{get canZoomIn(){const o=this.view?.ready;if(!o)return!1;const t=this.view?.constraints?.effectiveMaxScale;return 0===t||this._scale>t}get canZoomOut(){const{view:o}=this,t=o?.ready;if(!t)return!1;const e=o.constraints?.effectiveMinScale;return 0===e||this._scale<e}get _scale(){const o=this.view?.animation?.target;return(o&&"then"in o?void 0:o?.scale)??this.view?.scale??0}};o([s({readOnly:!0})],i.prototype,"canZoomIn",null),o([s({readOnly:!0})],i.prototype,"canZoomOut",null),o([s()],i.prototype,"view",void 0),o([s()],i.prototype,"_scale",null),i=o([n("esri.widgets.Zoom.ZoomConditions2D")],i);const r=i;let c=class extends t{get canZoomIn(){return!!this.view.ready}get canZoomOut(){return!!this.view.ready}};o([s({readOnly:!0})],c.prototype,"canZoomIn",null),o([s({readOnly:!0})],c.prototype,"canZoomOut",null),o([s()],c.prototype,"view",void 0),c=o([n("esri.widgets.Zoom.ZoomConditions3D")],c);const a=c;let m=class extends t{constructor(o){super(o)}destroy(){this.view=null}get canZoomIn(){return null!=this._zoomConditions&&this._zoomConditions.canZoomIn}get canZoomOut(){return null!=this._zoomConditions&&this._zoomConditions?.canZoomOut}get state(){return this.view?.ready?"ready":"disabled"}set view(o){o?"2d"===o.type?this._zoomConditions=new r({view:o}):"3d"===o.type&&(this._zoomConditions=new a({view:o})):this._zoomConditions=null,this._set("view",o)}zoomIn(){if(!this.canZoomIn)return;const o=this.view;"2d"===o.type?o.mapViewNavigation.zoomIn():e(o.goTo({zoomFactor:2}))}zoomOut(){if(!this.canZoomOut)return;const o=this.view;"2d"===o.type?o.mapViewNavigation.zoomOut():e(o.goTo({zoomFactor:.5}))}};o([s()],m.prototype,"_zoomConditions",void 0),o([s()],m.prototype,"canZoomIn",null),o([s()],m.prototype,"canZoomOut",null),o([s({readOnly:!0})],m.prototype,"state",null),o([s()],m.prototype,"view",null),m=o([n("esri.widgets.Zoom.ZoomViewModel")],m);const l=m;export{l as default};
