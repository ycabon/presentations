// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("../Error ../Logger ../maybe ../promiseUtils ./staticWorkerMessages ./utils ./workerFactory".split(" "),function(t,u,p,m,v,g,w){const {ABORT:q,INVOKE:x,OPEN:y,OPENED:z,RESPONSE:h}=g.MessageType;class r{static async create(a){const c=await w.createWorker();return new r(c,a)}constructor(a,c){this._outJobs=new Map;this._inJobs=new Map;this.worker=a;this.id=c;a.addEventListener("message",this._onMessage.bind(this));a.addEventListener("error",b=>{b.preventDefault();u.getLogger("esri.core.workers.WorkerOwner").error(b)})}terminate(){this.worker.terminate()}async open(a,
c={}){const {signal:b}=c,d=g.newJobId();return new Promise((n,e)=>{const l=m.onAbortOrThrow(b,()=>{this._outJobs.delete(d);this._post({type:q,jobId:d})});this._outJobs.set(d,{resolve:n,reject:e,abortHandle:l});this._post({type:y,jobId:d,modulePath:a})})}_onMessage(a){if(a=g.receiveMessage(a))switch(a.type){case z:this._onOpenedMessage(a);break;case h:this._onResponseMessage(a);break;case q:this._onAbortMessage(a);break;case x:this._onInvokeMessage(a)}}_onAbortMessage(a){const c=this._inJobs;a=a.jobId;
const b=c.get(a);b&&(b.controller&&b.controller.abort(),c.delete(a))}_onInvokeMessage(a){const {methodName:c,jobId:b,data:d,abortable:n}=a;a=n?new AbortController:null;const e=this._inJobs,l=v.staticWorkerMessages[c];let k;try{if("function"!==typeof l)throw new TypeError(`${c} is not a function`);k=l.call(null,d,{signal:a?a.signal:null})}catch(f){this._post({type:h,jobId:b,error:g.toInvokeError(f)});return}m.isPromiseLike(k)?(e.set(b,{controller:a,promise:k}),k.then(f=>{e.has(b)&&(e.delete(b),this._post({type:h,
jobId:b},f))},f=>{e.has(b)&&(e.delete(b),f||={message:"Error encountered at method"+c},m.isAbortError(f)||this._post({type:h,jobId:b,error:g.toInvokeError(f||{message:`Error encountered at method ${c}`})}))})):this._post({type:h,jobId:b},k)}_onOpenedMessage(a){const {jobId:c,data:b}=a;if(a=this._outJobs.get(c))this._outJobs.delete(c),p.removeMaybe(a.abortHandle),a.resolve(b)}_onResponseMessage(a){const {jobId:c,error:b,data:d}=a;if(a=this._outJobs.get(c))this._outJobs.delete(c),p.removeMaybe(a.abortHandle),
b?a.reject(t.fromJSON(JSON.parse(b))):a.resolve(d)}_post(a,c,b){return g.postMessage(this.worker,a,c,b)}}return r});