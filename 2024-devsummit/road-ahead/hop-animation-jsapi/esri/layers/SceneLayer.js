// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("require ../chunks/tslib.es6 ../Graphic ../PopupTemplate ../renderers/ClassBreaksRenderer ../renderers/DictionaryRenderer ../renderers/DotDensityRenderer ../renderers/HeatmapRenderer ../renderers/PieChartRenderer ../renderers/Renderer ../renderers/SimpleRenderer ../renderers/UniqueValueRenderer ../renderers/support/jsonUtils ../renderers/support/types ../request ../core/Clonable ../core/Collection ../core/Error ../core/Logger ../core/MultiOriginJSONSupport ../core/promiseUtils ../core/reactiveUtils ../core/urlUtils ../core/accessorSupport/decorators/property ../core/has ../core/RandomLCG ../core/accessorSupport/utils ../core/accessorSupport/decorators/reader ../core/accessorSupport/decorators/subclass ../core/accessorSupport/PropertyOrigin ../geometry/Mesh ../geometry/Point ./Layer ./graphics/sources/support/uploadAssetErrors ./mixins/APIKeyMixin ./mixins/ArcGISService ./mixins/CustomParametersMixin ./mixins/EditBusLayer ./mixins/OperationalLayer ./mixins/PortalLayer ./mixins/ScaleRangeLayer ./mixins/SceneService ./mixins/TemporalSceneLayer ./support/arcgisLayerUrl ./support/associatedFeatureServiceUtils ./support/capabilities ./support/commonProperties ./support/featureLayerUtils ./support/FeatureReduction ./support/FeatureReductionSelection ./support/fieldProperties ./support/FieldsIndex ./support/fieldUtils ./support/I3SLayerDefinitions ./support/infoFor3D ./support/LabelClass ./support/labelingInfo ./support/LayerFloorInfo ./support/lazyLayerLoader ./support/RangeInfo ./support/SceneFilter ../renderers/support/styleUtils ../rest/support/Query ../support/elevationInfoUtils ../support/featureFlags ../support/popupUtils ../support/zipUtils ../views/3d/layers/i3s/I3SUtil ../views/layers/support/popupUtils ../webdoc/support/opacityUtils".split(" "),
function(M,e,N,O,t,Ka,La,Ma,Na,Oa,Pa,Qa,Ra,P,Q,d,B,h,m,R,C,S,T,f,Sa,Ta,D,n,U,u,V,W,X,E,Y,Z,aa,ba,ca,da,ea,v,fa,F,ha,ia,p,G,ja,ka,la,ma,w,q,H,na,I,oa,pa,qa,ra,sa,ta,r,J,ua,va,wa,K,xa){const ya=new Set(["3DObject","Point"]);t=la.defineFieldProperties();d=class extends fa.TemporalSceneLayer(ba.EditBusLayer(v.SceneService(Z.ArcGISService(ca.OperationalLayer(da.PortalLayer(ea.ScaleRangeLayer(R.MultiOriginJSONMixin(aa.CustomParametersMixin(Y.APIKeyMixin(d.ClonableMixin(X))))))))))){constructor(...a){super(...a);
this.rangeInfos=this.featureReduction=null;this.operationalLayerType="ArcGISSceneServiceLayer";this.type="scene";this.serviceUpdateTimeStamp=this.geometryDefinitions=this.textureSetDefinitions=this.materialDefinitions=this.nodePages=this.outFields=this.floorInfo=this.fields=null;this.excludeObjectIds=new B;this.path=this.filter=this.definitionExpression=null;this.labelsVisible=!0;this.labelingInfo=null;this.legendEnabled=!0;this.semantic=this.priority=null;this.cachedDrawingInfo={color:!1};this.popupEnabled=
!0;this.globalIdField=this.objectIdField=this.popupTemplate=null;this._fieldUsageInfo={};this.screenSizePerspectiveEnabled=!0;this.serviceItemId=void 0}normalizeCtorArgs(a,b){return"string"===typeof a?{url:a,...b}:a}destroy(){this._set("renderer",null)}getField(a){return this.fieldsIndex.get(a)}getFieldDomain(a,b){return(b=this.getFeatureType(b?.feature)?.domains?.[a])&&"inherited"!==b.type?b:this.getField(a)?.domain??null}getFeatureType(a){return a&&this.associatedLayer?this.associatedLayer.getFeatureType(a):
null}get types(){return this.associatedLayer?.types??[]}get typeIdField(){return this.associatedLayer?.typeIdField??null}get templates(){return this.associatedLayer?.templates??null}get formTemplate(){return this.associatedLayer?.formTemplate??null}get fieldsIndex(){return new ma(this.fields)}readNodePages(a,b,c){"Point"===b.layerType&&(a=b.pointNodePages);return null==a||"object"!==typeof a?null:q.I3SNodePageDefinition.fromJSON(a,c)}set elevationInfo(a){this._set("elevationInfo",a);this.loaded&&
this._validateElevationInfo()}get effectiveCapabilities(){return this._capabilitiesFromAssociatedFeatureLayer(this.associatedLayer?.effectiveCapabilities)}get effectiveEditingEnabled(){return null!=this.associatedLayer&&G.computeEffectiveEditingEnabled(this.associatedLayer)}get geometryType(){return za[this.profile]||"mesh"}set renderer(a){w.fixRendererFields(a,this.fieldsIndex);this._set("renderer",a)}readCachedDrawingInfo(a){if(null==a||"object"!==typeof a)a={};null==a.color&&(a.color=!1);return a}get capabilities(){return this._capabilitiesFromAssociatedFeatureLayer(this.associatedLayer?.capabilities)}_capabilitiesFromAssociatedFeatureLayer(a){a=
null!=a?a:ia.zeroCapabilities;const {query:b,queryRelated:c,editing:{supportsGlobalId:g,supportsRollbackOnFailure:k,supportsUploadWithItemId:l,supportsGeometryUpdate:x,supportsReturnServiceEditsInSourceSpatialReference:y},data:{supportsZ:z,supportsM:Aa,isVersioned:Ba,supportsAttachment:Ca},operations:{supportsEditing:Da,supportsAdd:Ea,supportsUpdate:Fa,supportsDelete:Ga,supportsQuery:Ha,supportsQueryAttachments:Ia,supportsAsyncConvert3D:Ja}}=a;a=a.operations.supportsChangeTracking;const A=!!this.associatedLayer?.infoFor3D&&
J.sceneLayerEditingEnabled();return{query:b,queryRelated:c,editing:{supportsGlobalId:g,supportsReturnServiceEditsInSourceSpatialReference:y,supportsRollbackOnFailure:k,supportsGeometryUpdate:A&&x,supportsUploadWithItemId:l},data:{supportsAttachment:Ca,supportsZ:z,supportsM:Aa,isVersioned:Ba},operations:{supportsQuery:Ha,supportsQueryAttachments:Ia,supportsEditing:Da&&a,supportsAdd:A&&Ea&&a,supportsDelete:A&&Ga&&a,supportsUpdate:Fa&&a,supportsAsyncConvert3D:Ja}}}get editingEnabled(){return this._isOverridden("editingEnabled")?
this._get("editingEnabled"):this.associatedLayer?.editingEnabled??!1}set editingEnabled(a){this._overrideIfSome("editingEnabled",a)}get infoFor3D(){return this.associatedLayer?.infoFor3D??null}get relationships(){return this.associatedLayer?.relationships}get defaultPopupTemplate(){return this.associatedLayer||this.attributeStorageInfo?this.createPopupTemplate():null}readObjectIdField(a,b){!a&&b.fields&&b.fields.some(c=>{"esriFieldTypeOID"===c.type&&(a=c.name);return!!a});return a||void 0}readGlobalIdField(a,
b){!a&&b.fields&&b.fields.some(c=>{"esriFieldTypeGlobalID"===c.type&&(a=c.name);return!!a});return a||void 0}get displayField(){return this.associatedLayer?.displayField??null}readProfile(a,b){a=b.store.profile;if(null!=a&&L[a])return L[a];m.getLogger(this).error("Unknown or missing profile",{profile:a,layer:this});return"mesh-pyramids"}load(a){this.addResolvingPromise(this._load(a));return Promise.resolve(this)}async _load(a){const b=null!=a?a.signal:null;await this.loadFromPortal({supportedTypes:["Scene Service"]},
a).catch(C.throwIfAbortError);await this._fetchService(b);await Promise.all([this._fetchIndexAndUpdateExtent(this.nodePages,b),this._setAssociatedFeatureLayer(b),this._loadFilterGeometries()]);this._validateElevationInfo();this._applyAssociatedLayerOverrides();this._populateFieldUsageInfo();await sa.loadStyleRenderer(this,{origin:"service"},b);w.fixRendererFields(this.renderer,this.fieldsIndex);await this.finishLoadEditablePortalLayer(a)}async beforeSave(){null!=this.filter&&(this.filter=this.filter.clone(),
await this.load())}async _loadFilterGeometries(){if(this.filter)try{await this.filter.loadGeometries(this.spatialReference)}catch(a){m.getLogger(this).error("#_loadFilterGeometries()",this,"Failed to load filter geometries. Geometry filter will not be applied for this layer.",{error:a}),this.filter=null}}createQuery(){const a=new ta;"mesh"!==this.geometryType&&(a.returnGeometry=!0,a.returnZ=!0);a.where=this.definitionExpression||"1\x3d1";a.sqlFormat="standard";a.outFields=["*"];return a}queryExtent(a,
b){return this._getAssociatedLayerForQuery().then(c=>c.queryExtent(a||this.createQuery(),b))}queryFeatureCount(a,b){return this._getAssociatedLayerForQuery().then(c=>c.queryFeatureCount(a||this.createQuery(),b))}queryFeatures(a,b){return this._getAssociatedLayerForQuery().then(c=>c.queryFeatures(a||this.createQuery(),b)).then(c=>{if(c?.features)for(const g of c.features)g.layer=this,g.sourceLayer=this;return c})}async queryRelatedFeatures(a,b){await this.load();if(!this.associatedLayer)throw new h("scenelayer:query-not-available",
"SceneLayer queries are not available without an associated feature layer",{layer:this});return this.associatedLayer.queryRelatedFeatures(a,b)}async queryRelatedFeaturesCount(a,b){await this.load();if(!this.associatedLayer)throw new h("scenelayer:query-not-available","SceneLayer queries are not available without an associated feature layer",{layer:this});return this.associatedLayer.queryRelatedFeaturesCount(a,b)}async queryCachedAttributes(a,b){const c=w.unpackFieldNames(this.fieldsIndex,await K.getRequiredFields(this,
K.getFetchPopupTemplate(this)));return wa.queryAttributesFromCachedAttributesId(this.parsedUrl.path,this.attributeStorageInfo??[],a,b,c,this.apiKey,this.customParameters)}async queryCachedFeature(a,b){a=await this.queryCachedAttributes(a,[b]);if(!a||0===a.length)throw new h("scenelayer:feature-not-in-cached-data","Feature not found in cached data");b=new N;b.attributes=a[0];b.layer=this;b.sourceLayer=this;return b}queryObjectIds(a,b){return this._getAssociatedLayerForQuery().then(c=>c.queryObjectIds(a||
this.createQuery(),b))}queryAttachments(a,b){return this._getAssociatedLayerForQuery().then(c=>c.queryAttachments(a,b))}getFieldUsageInfo(a){const b={supportsLabelingInfo:!1,supportsRenderer:!1,supportsPopupTemplate:!1,supportsLayerQuery:!1};return this.loaded?this._fieldUsageInfo[a]||b:(m.getLogger(this).error("#getFieldUsageInfo()","Unavailable until layer is loaded"),b)}createPopupTemplate(a){return ua.createPopupTemplate(this,a)}_getAssociatedLayerForQuery(){const a=this.associatedLayer;return a?.loaded?
Promise.resolve(a):this._loadAssociatedLayerForQuery()}async _loadAssociatedLayerForQuery(){await this.load();if(!this.associatedLayer)throw new h("scenelayer:query-not-available","SceneLayer queries are not available without an associated feature layer",{layer:this});try{await this.associatedLayer.load()}catch(a){throw new h("scenelayer:query-not-available","SceneLayer associated feature layer could not be loaded",{layer:this,error:a});}return this.associatedLayer}hasCachedStatistics(a){return null!=
this.statisticsInfo&&this.statisticsInfo.some(b=>b.name===a)}async queryCachedStatistics(a,b){await this.load(b);if(!this.statisticsInfo)throw new h("scenelayer:no-cached-statistics","Cached statistics are not available for this layer");const c=this.fieldsIndex.get(a);if(!c)throw new h("scenelayer:field-unexisting",`Field '${a}' does not exist on the layer`);for(const g of this.statisticsInfo)if(g.name===c.name)return a=T.join(this.parsedUrl.path,g.href),Q(a,{query:{f:"json",...this.customParameters,
token:this.apiKey},responseType:"json",signal:b?b.signal:null}).then(k=>k.data);throw new h("scenelayer:no-cached-statistics","Cached statistics for this attribute are not available");}async saveAs(a,b){return this._debouncedSaveOperations(v.SaveOperationType.SAVE_AS,{...b,getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"scene"},a)}async save(){return this._debouncedSaveOperations(v.SaveOperationType.SAVE,{getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"scene"})}async applyEdits(a,
b){const {applyEdits:c}=await new Promise((y,z)=>M(["./graphics/editingSupport"],y,z));await this.load();const g=this.associatedLayer;if(!g)throw new h(`${this.type}-layer:not-editable`,"Service is not editable");await g.load();const {globalIdField:k}=g,l=!!g.infoFor3D,x=b?.globalIdUsed??!0;if(l&&null==k)throw new h(`${this.type}-layer:not-editable`,"Valid globalIdField expected on editable SceneLayer");if(l&&!x)throw new h(`${this.type}-layer:globalid-required`,"globalIdUsed must not be false for SceneLayer editing as globalIds are required.");
F.isHostedAgolService(g.url)&&l&&null!=a.deleteFeatures&&null!=k&&(b={...b,globalIdToObjectId:await G.getGlobalIdToObjectIdMap(g,a.deleteFeatures,k)});return c(this,g.source,a,b)}async uploadAssets(a,b){await this.load();if(null==this.associatedLayer)throw new h(`${this.type}-layer:not-editable`,"Service is not editable");await this.associatedLayer.load();return this.associatedLayer.uploadAssets(a,b)}on(a,b){return super.on(a,b)}async convertMesh(a,b){var c=k=>{m.getLogger(this).error(".convertMesh()",
k.message);throw k;};await this.load();this.infoFor3D||c(new h("invalid:layer","SceneLayer has no capability for mesh conversion"));a=await this.extractAndFilterFiles(a);const g=a.reduce((k,l)=>H.isFileEditFormat(this.infoFor3D,l)?k+1:k,0);0===g&&c(new E.NoModelError);1<g&&c(new E.MultipleModelsError);c=b?.location??new W({x:0,y:0,z:0,spatialReference:this.spatialReference});c=V.createWithExternalSource(c,a);[b]=await this.uploadAssets([c],b);return b}async extractAndFilterFiles(a){await this.load();
const b=this.infoFor3D;return b?(await va.extractZipFiles(a)).filter(c=>H.isFileSupported(b,c)):a}validateLayer(a){if(a.layerType&&!ya.has(a.layerType))throw new h("scenelayer:layer-type-not-supported","SceneLayer does not support this layer type",{layerType:a.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new h("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x, 2.x"});if(2<this.version.major)throw new h("layer:service-version-too-new",
"Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x, 2.x"});a=this.normalReferenceFrame;var b=this.spatialReference;let c=!1,g=!1;if(null==a)g=c=!0;else switch(b=b&&b.isGeographic,a){case "east-north-up":case "earth-centered":c=!0;g=b;break;case "vertex-reference-frame":c=!0;g=!b;break;default:c=!1}if(!c)throw new h("scenelayer:unsupported-normal-reference-frame","Normal reference frame is invalid.");if(!g)throw new h("scenelayer:incompatible-normal-reference-frame",
"Normal reference frame is incompatible with layer spatial reference.");}_getTypeKeywords(){const a=[];if("points"===this.profile)a.push("Point");else if("mesh-pyramids"===this.profile)a.push("3DObject");else throw new h("scenelayer:unknown-profile","SceneLayer:save() encountered an unknown SceneLayer profile: "+this.profile);return a}_populateFieldUsageInfo(){this._fieldUsageInfo={};if(this.fields)for(const a of this.fields){const b=!(!this.attributeStorageInfo||!this.attributeStorageInfo.some(g=>
g.name===a.name)),c=!!this.associatedLayer?.fields?.some(g=>g&&a.name===g.name);this._fieldUsageInfo[a.name]={supportsLabelingInfo:b,supportsRenderer:b,supportsPopupTemplate:b||c,supportsLayerQuery:c}}}_applyAssociatedLayerOverrides(){this._applyAssociatedLayerFieldsOverrides();this._applyAssociatedLayerPopupOverrides();this._applyAssociatedLayerExtentOverride();this._applyAssociatedLayerPrivileges()}_applyAssociatedLayerFieldsOverrides(){if(this.associatedLayer?.fields){var a=null;for(const b of this.associatedLayer.fields){const c=
this.getField(b.name);c?(!c.domain&&b.domain&&(c.domain=b.domain.clone()),c.editable=b.editable,c.nullable=b.nullable,c.length=b.length):(a||=this.fields?this.fields.slice():[],a.push(b.clone()))}a&&this._set("fields",a)}}_applyAssociatedLayerPopupOverrides(){if(this.associatedLayer){var a=["popupTemplate","popupEnabled"],b=D.getProperties(this);for(let c=0;c<a.length;c++){const g=a[c],k=this.originIdOf(g),l=this.associatedLayer.originIdOf(g);k<l&&(l===u.OriginId.SERVICE||l===u.OriginId.PORTAL_ITEM)&&
b.setAtOrigin(g,this.associatedLayer[g],l)}}}_applyAssociatedLayerExtentOverride(){const a=this.associatedLayer?.editingInfo?.lastEditDate,b=this.associatedLayer?.serverGens,c=this.associatedLayer?.getAtOrigin("fullExtent","service");J.sceneLayerEditingEnabled()&&null!=this.associatedLayer?.infoFor3D&&c&&F.isHostedAgolService(this.associatedLayer?.url)&&a&&this.serviceUpdateTimeStamp?.lastUpdate!==a.getTime()&&(this.serviceUpdateTimeStamp||b?.minServerGen!==b?.serverGen)&&D.getProperties(this).setAtOrigin("fullExtent",
c.clone(),u.OriginId.SERVICE)}_applyAssociatedLayerPrivileges(){const a=this.associatedLayer;a&&(this._set("userHasEditingPrivileges",a.userHasEditingPrivileges),this._set("userHasFullEditingPrivileges",a.userHasFullEditingPrivileges),this._set("userHasUpdateItemPrivileges",a.userHasUpdateItemPrivileges))}async _setAssociatedFeatureLayer(a){if(["mesh-pyramids","points"].includes(this.profile))try{const {serverUrl:b,layerId:c,portalItem:g}=await ha.findAssociatedFeatureService(`${this.url}/layers/${this.layerId}`,
{sceneLayerItem:this.portalItem,customParameters:this.customParameters,apiKey:this.apiKey,signal:a});this.associatedLayer=new (await pa.layerLookupMap.FeatureLayer())({url:b,customParameters:this.customParameters,layerId:c,portalItem:g});await this.associatedLayer.load()}catch(b){C.isAbortError(b)||this._logWarningOnPopupEnabled()}}async _logWarningOnPopupEnabled(){await S.whenOnce(()=>this.popupEnabled&&null!=this.popupTemplate);const a=`this SceneLayer: ${this.title}`;null==this.attributeStorageInfo?
m.getLogger(this).warn(`Associated FeatureLayer could not be loaded and no binary attributes found. Popups will not work on ${a}`):m.getLogger(this).info(`Associated FeatureLayer could not be loaded. Falling back to binary attributes for Popups on ${a}`)}_validateElevationInfo(){const a=this.elevationInfo;"mesh-pyramids"===this.profile&&r.logInvalidElevationInfoWarning(m.getLogger(this),r.elevationModeUnsupportedMessage("Mesh scene layers","relative-to-scene",a));r.logInvalidElevationInfoWarning(m.getLogger(this),
r.featureExpressionUnsupportedMessage("Scene layers",a))}};e.__decorate([f.property({types:{key:"type",base:ja.FeatureReduction,typeMap:{selection:ka}},json:{origins:{"web-scene":{name:"layerDefinition.featureReduction",write:!0},"portal-item":{name:"layerDefinition.featureReduction",write:!0}}}})],d.prototype,"featureReduction",void 0);e.__decorate([f.property({type:[qa.RangeInfo],json:{read:!1,origins:{"web-scene":{name:"layerDefinition.rangeInfos",write:!0},"portal-item":{name:"layerDefinition.rangeInfos",
write:!0}}}})],d.prototype,"rangeInfos",void 0);e.__decorate([f.property({json:{read:!1}})],d.prototype,"associatedLayer",void 0);e.__decorate([f.property({type:["show","hide"]})],d.prototype,"listMode",void 0);e.__decorate([f.property({type:["ArcGISSceneServiceLayer"]})],d.prototype,"operationalLayerType",void 0);e.__decorate([f.property({json:{read:!1},readOnly:!0})],d.prototype,"type",void 0);e.__decorate([f.property({...t.fields,readOnly:!0,json:{read:!1,origins:{service:{read:!0}}}})],d.prototype,
"fields",void 0);e.__decorate([f.property()],d.prototype,"types",null);e.__decorate([f.property()],d.prototype,"typeIdField",null);e.__decorate([f.property()],d.prototype,"templates",null);e.__decorate([f.property()],d.prototype,"formTemplate",null);e.__decorate([f.property({readOnly:!0,clonable:!1})],d.prototype,"fieldsIndex",null);e.__decorate([f.property({type:oa,json:{read:{source:"layerDefinition.floorInfo"},write:{target:"layerDefinition.floorInfo"}}})],d.prototype,"floorInfo",void 0);e.__decorate([f.property(t.outFields)],
d.prototype,"outFields",void 0);e.__decorate([f.property({type:q.I3SNodePageDefinition,readOnly:!0,json:{read:!1}})],d.prototype,"nodePages",void 0);e.__decorate([n.reader("service","nodePages",["nodePages","pointNodePages"])],d.prototype,"readNodePages",null);e.__decorate([f.property({type:[q.I3SMaterialDefinition],readOnly:!0})],d.prototype,"materialDefinitions",void 0);e.__decorate([f.property({type:[q.I3STextureSetDefinition],readOnly:!0})],d.prototype,"textureSetDefinitions",void 0);e.__decorate([f.property({type:[q.I3SGeometryDefinition],
readOnly:!0})],d.prototype,"geometryDefinitions",void 0);e.__decorate([f.property({readOnly:!0})],d.prototype,"serviceUpdateTimeStamp",void 0);e.__decorate([f.property({readOnly:!0})],d.prototype,"attributeStorageInfo",void 0);e.__decorate([f.property({readOnly:!0})],d.prototype,"statisticsInfo",void 0);e.__decorate([f.property({type:B.ofType(Number),nonNullable:!0,json:{origins:{service:{read:!1,write:!1}},name:"layerDefinition.excludeObjectIds",write:{enabled:!0}}})],d.prototype,"excludeObjectIds",
void 0);e.__decorate([f.property({type:String,json:{origins:{service:{read:!1,write:!1}},name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],d.prototype,"definitionExpression",void 0);e.__decorate([f.property({type:ra,json:{name:"layerDefinition.polygonFilter",write:{enabled:!0,allowNull:!0},origins:{service:{read:!1,write:!1}}}})],d.prototype,"filter",void 0);e.__decorate([f.property({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],d.prototype,"path",
void 0);e.__decorate([f.property(p.elevationInfo)],d.prototype,"elevationInfo",null);e.__decorate([f.property({readOnly:!0,json:{read:!1}})],d.prototype,"effectiveCapabilities",null);e.__decorate([f.property({readOnly:!0})],d.prototype,"effectiveEditingEnabled",null);e.__decorate([f.property({type:String})],d.prototype,"geometryType",null);e.__decorate([f.property(p.labelsVisible)],d.prototype,"labelsVisible",void 0);e.__decorate([f.property({type:[na],json:{origins:{service:{name:"drawingInfo.labelingInfo",
read:{reader:I.reader},write:!1}},name:"layerDefinition.drawingInfo.labelingInfo",read:{reader:I.reader},write:!0}})],d.prototype,"labelingInfo",void 0);e.__decorate([f.property(p.legendEnabled)],d.prototype,"legendEnabled",void 0);e.__decorate([f.property({type:Number,json:{origins:{"web-document":{default:1,write:{enabled:!0,target:{opacity:{type:Number},"layerDefinition.drawingInfo.transparency":{type:Number}}},read:{source:["opacity","layerDefinition.drawingInfo.transparency"],reader(a,b){if("number"===
typeof a&&0<=a&&1>=a)return a;a=b.layerDefinition?.drawingInfo?.transparency;return void 0!==a?xa.transparencyToOpacity(a):void 0}}},"portal-item":{write:!0},service:{read:!1}}}})],d.prototype,"opacity",void 0);e.__decorate([f.property({type:["Low","High"],readOnly:!0,json:{read:!1,origins:{service:{read:!0}}}})],d.prototype,"priority",void 0);e.__decorate([f.property({type:["Labels"],readOnly:!0,json:{read:!1,origins:{service:{read:!0}}}})],d.prototype,"semantic",void 0);e.__decorate([f.property({types:P.webSceneRendererTypes,
json:{origins:{service:{read:{source:"drawingInfo.renderer"}}},name:"layerDefinition.drawingInfo.renderer",write:!0},value:null})],d.prototype,"renderer",null);e.__decorate([f.property({json:{read:!1}})],d.prototype,"cachedDrawingInfo",void 0);e.__decorate([n.reader("service","cachedDrawingInfo")],d.prototype,"readCachedDrawingInfo",null);e.__decorate([f.property({readOnly:!0,json:{read:!1}})],d.prototype,"capabilities",null);e.__decorate([f.property({type:Boolean,json:{read:!1}})],d.prototype,"editingEnabled",
null);e.__decorate([f.property({readOnly:!0,json:{write:!1,read:!1}})],d.prototype,"infoFor3D",null);e.__decorate([f.property({readOnly:!0,json:{write:!1,read:!1}})],d.prototype,"relationships",null);e.__decorate([f.property(p.popupEnabled)],d.prototype,"popupEnabled",void 0);e.__decorate([f.property({type:O,json:{name:"popupInfo",write:!0}})],d.prototype,"popupTemplate",void 0);e.__decorate([f.property({readOnly:!0,json:{read:!1}})],d.prototype,"defaultPopupTemplate",null);e.__decorate([f.property({type:String,
json:{read:!1}})],d.prototype,"objectIdField",void 0);e.__decorate([n.reader("service","objectIdField",["objectIdField","fields"])],d.prototype,"readObjectIdField",null);e.__decorate([f.property({type:String,json:{read:!1}})],d.prototype,"globalIdField",void 0);e.__decorate([n.reader("service","globalIdField",["globalIdField","fields"])],d.prototype,"readGlobalIdField",null);e.__decorate([f.property({readOnly:!0,type:String,json:{read:!1}})],d.prototype,"displayField",null);e.__decorate([f.property({type:String,
json:{read:!1}})],d.prototype,"profile",void 0);e.__decorate([n.reader("service","profile",["store.profile"])],d.prototype,"readProfile",null);e.__decorate([f.property({readOnly:!0,type:String,json:{origins:{service:{read:{source:"store.normalReferenceFrame"}}},read:!1}})],d.prototype,"normalReferenceFrame",void 0);e.__decorate([f.property(p.screenSizePerspectiveEnabled)],d.prototype,"screenSizePerspectiveEnabled",void 0);e.__decorate([f.property({json:{read:!1,origins:{service:{read:!0}}}})],d.prototype,
"serviceItemId",void 0);d=e.__decorate([U.subclass("esri.layers.SceneLayer")],d);const L={"mesh-pyramids":"mesh-pyramids",meshpyramids:"mesh-pyramids","features-meshes":"mesh-pyramids",points:"points","features-points":"points",lines:"lines","features-lines":"lines",polygons:"polygons","features-polygons":"polygons"},za={"mesh-pyramids":"mesh",points:"point",lines:"polyline",polygons:"polygon"};return d});