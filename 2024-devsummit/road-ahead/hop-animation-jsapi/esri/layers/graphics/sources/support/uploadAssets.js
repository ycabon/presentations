// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../request ../../../../core/has ../../../../core/Logger ../../../../core/promiseUtils ../../../../core/time ../../../../core/urlUtils ../../../../core/uuid ../../../../geometry/support/meshUtils/External ./uploadAssetErrors ./uploadProgressWeights ./uploads ../../../support/infoFor3D ../../../../support/progressUtils".split(" "),function(v,q,X,B,k,C,t,D,n,m,u,E,r,p){async function F(a,{layer:b,ongoingUploads:c},d){const e=c.get(a);if(e)return e;if(!b.infoFor3D||!b.url)throw new m.UnsupportedError;
if(G(a,b))return d?.onProgress?.(1),a;b=H(a,b,d);c.set(a,b);try{await b}finally{c.delete(a)}return a}function G(a,b){const {parsedUrl:c}=b;return null!=c&&a.metadata.externalSources.some(d=>n.externalIsOnService(d,c))}async function H(a,b,c){var {metadata:d}=a,{displaySource:e}=d;e=w(e?.source,b);d=0<d.externalSources.length;b=await (e?I(e,b,c):d?J(a,b,c):K(a,b,c));k.throwIfAborted(c);a.addExternalSources([b]);return a}async function I(a,b,c){return{source:await x(a,b,c),original:!0}}async function J(a,
b,c){const d=y(b);var {externalSources:e}=a.metadata;e=L(e,b);if(!e)throw new m.NoSupportedSourceError;const h=p.makeProgressManager(u.uploadProgressWeights.uploadConvertibleSource,c?.onProgress,"uploadConvertibleSource");c=await x(e,b,{onProgress:h.makeOnProgress("uploadEditSource")});a.addExternalSources([{source:c,original:!0}]);a=e.reduce((f,{asset:g})=>g instanceof File?f+g.size:f,0);a=h.simulate("serviceAssetsToGlb",p.estimatedConversionTime(a));try{return{source:await M(c,b,d)}}finally{a.remove()}}
async function K(a,b,c){const d=p.makeProgressManager(u.uploadProgressWeights.uploadLocalMesh,c?.onProgress,"uploadLocalMesh"),e=N(a,b,{...c,onProgress:d.makeOnProgress("meshToAssetBlob")});return{source:await z([e],b,{...c,onProgress:d.makeOnProgress("uploadAssetBlobs")}),extent:a.extent.clone(),original:!0}}async function N(a,b,c){b=y(b);a=await (await a.load(c)).toBinaryGLTF({ignoreLocalTransform:!0});k.throwIfAborted(c);a=await a.buffer();k.throwIfAborted(c);return{blob:new Blob([a.data],{type:a.type}),
assetName:`${D.generateBracedUUID()}.glb`,assetType:b}}function L(a,b){for(const c of a)if(a=w(c.source,b))return a;return null}function w(a,b){if(!a)return null;const {infoFor3D:{supportedFormats:c,editFormats:d}}=b;a=n.externalSourceToMultiPart(a);b=[];let e=!1;for(let f=0;f<a.length;++f){{var h=a[f];const g=n.assetFormatId(h,c);h=g?{asset:h,assetType:g}:null}if(!h)return null;d.includes(h.assetType)&&(e=!0);b.push(h)}return e?b:null}async function x(a,b,c){a=a.map(d=>O(d,c));return z(a,b,c)}async function z(a,
b,c){const d=p.makeProgressManager(u.uploadProgressWeights.uploadAssetBlobs,c?.onProgress,"uploadAssetBlobs"),e=await P(a,b,{...c,onProgress:d.makeOnProgress("prepareAssetItems")});k.throwIfAborted(c);const h=e.map(({item:g})=>g),{uploadResults:f}=await Q(h,b,{...c,onProgress:d.makeOnProgress("uploadAssetItems")});k.throwIfAborted(c);return a.map((g,l)=>{g=e[l];l=f[l];const {success:R}=l;if(!R)throw{error:l}=l,new m.UploadFailedError(g.assetName,l);({assetHash:l}=l);const {assetName:S,item:{assetType:A}}=
g;({infoFor3D:{supportedFormats:g}}=b);g=r.getFormatIdMimeType(A,g);if(!g)throw new m.UnsupportedFormatUploadedError(A);return new n.ServiceAsset(S,g,[new n.ServiceAssetPart(`${b.parsedUrl.path}/assets/${l}`,l)])})}async function O(a,b){const {asset:c,assetType:d}=a;if(c instanceof File)return{blob:c,assetName:c.name,assetType:d};a=await c.toBlob(b);k.throwIfAborted(b);return{blob:a,assetName:c.assetName,assetType:d}}async function T(a,b,c){const {blob:d,assetType:e,assetName:h}=a;a=null;try{const f=
await E.uploadItem({data:d,name:h},b.url,c);k.throwIfAborted(c);a={assetType:e,assetUploadId:f.itemID}}catch(f){k.throwIfAbortError(f),B.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${b.url} does not support the REST Uploads API.`)}if(!a){b=await t.parseData(d);k.throwIfAborted(c);if(!b.isBase64)throw new m.NotBase64Error;a={assetType:e,assetData:b.data}}if(!a)throw new m.UnableToPrepareOptionsError;return{item:a,assetName:h}}function P(a,b,c){const d=p.makeProgressManager(a.length,
c?.onProgress,"prepareAssetItems");return Promise.all(a.map(async(e,h)=>{e=T(await e,b,{...c,onProgress:d.makeOnProgress(h)});k.throwIfAborted(c);return e}))}async function Q(a,b,c){const d=p.simulateProgress(c?.onProgress);try{const e=await q(t.join(b.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(a)},method:"post",responseType:"json"});k.throwIfAborted(c);if(e.data.uploadResults.length!==a.length)throw new m.BadResponseError(a.length,e.data.uploadResults.length);
return e.data}finally{d.remove()}}async function M(a,b,c){var d=a.map(({assetName:f,parts:g})=>({assetName:f,assetHash:g[0].partHash}));a=b.capabilities?.operations.supportsAsyncConvert3D;c={f:"json",assets:JSON.stringify(d),transportType:"esriTransportTypeUrl",targetFormat:c,async:a};d=t.join(b.parsedUrl.path,"convert3D");let e;try{e=(await (a?U:V)(d,{query:c,responseType:"json",timeout:0})).data}catch(f){throw new m.Convert3DFailedError;}const {supportedFormats:h}=b.infoFor3D;return e.assets.map(f=>
{const g=r.getMimeTypeFormatId(f.contentType,h);if(!g)throw new m.UnsupportedFormatUploadedError(g);return new n.ServiceAsset(f.assetName,f.contentType,[new n.ServiceAssetPart(f.assetURL,f.assetHash)])})}function V(a,b){return q(a,b)}async function U(a,b){for(a=(await q(a,b)).data.statusUrl;;){b=(await q(a,{query:{f:"json"},responseType:"json"})).data;switch(b.status){case "Completed":return q(b.resultUrl,{query:{f:"json"},responseType:"json"});case "CompletedWithErrors":throw Error(b.status);case "Failed ImportChanges":case "InProgress":case "Pending":case "ExportAttachments":case "ExportChanges":case "ExportingData":case "ExportingSnapshot":case "ImportAttachments":case "ProvisioningReplica":case "UnRegisteringReplica":break;
default:throw Error();}await k.after(W)}}function y(a){({infoFor3D:a}=a);a=r.getMimeTypeFormatId("model/gltf-binary",a.supportedFormats)??r.getFilenameFormatId("glb",a.supportedFormats);if(!a)throw new m.NoGlbSupportError;return a}const W=C.Milliseconds(1E3);v.uploadAssets=async function(a,b,c){const d=a.length;if(!d)return c?.onProgress?.(1),[];const e=p.makeProgressManager(d,c?.onProgress,"uploadAssets");return Promise.all(a.map((h,f)=>F(h,b,{...c,onProgress:e.makeOnProgress(f)})))};Object.defineProperty(v,
Symbol.toStringTag,{value:"Module"})});