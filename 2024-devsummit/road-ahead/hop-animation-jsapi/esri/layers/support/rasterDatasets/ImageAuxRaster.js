// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("../../../chunks/tslib.es6 ../../../geometry ../../../core/Error ../../../core/has ../../../core/promiseUtils ../../../core/accessorSupport/decorators/property ../../../core/Logger ../../../core/RandomLCG ../../../core/accessorSupport/decorators/subclass ./BaseRaster ./InMemoryRaster ./pamParser ../rasterFormats/RasterCodec ../rasterFunctions/stretchUtils ../rasterTransforms/PolynomialTransform ../../../geometry/SpatialReference ../../../geometry/Extent".split(" "),function(l,g,m,q,n,r,E,F,
t,u,v,w,x,y,z,A,B){g=class extends u{async open(a){await this.init();var b=await this._fetchData(a);let {spatialReference:e,statistics:c,histograms:d,transform:f}=await this._fetchAuxiliaryData(a);(a=!e)&&(e=new A({wkid:3857}));d?.length&&null==c&&(c=y.estimateStatisticsFromHistograms(d));const {width:C,height:D}=b;let h=new B({xmin:-.5,ymin:.5-D,xmax:C-.5,ymax:.5,spatialReference:e});const p=f?f.forwardTransform(h):h;var k=!0;f&&(k=(k=f.forwardCoefficients)&&0===k[1]&&0===k[2])&&(f=null,h=p);b=new v({source:{extent:p,
nativeExtent:h,transform:f,pixelBlocks:[b],statistics:c,histograms:d,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(b.ioConfig.skipMapInfo=!0);await b.open();b.source=null;this._set("rasterInfo",b.rasterInfo);this._inMemoryRaster=b}fetchRawTile(a,b,e,c={}){return this._inMemoryRaster.fetchRawTile(a,b,e,c)}async _fetchData(a){({data:a}=await this.request(this.url,{responseType:"array-buffer",signal:a?.signal}));
var b=x.getFormat(a).toUpperCase();if("JPG"===b||"PNG"===b||"GIF"===b||"BMP"===b)this._set("datasetFormat",b);else throw new m("image-aux-raster:open","the data is not a supported format");b=b.toLowerCase();const e="gif"===b||"bmp"===b||!q("ios");a=await this.decodePixelBlock(a,{format:b,useCanvas:e,hasNoZlibMask:!0});if(null==a)throw new m("image-aux-raster:open","the data cannot be decoded");return a}async _fetchAuxiliaryData(a){a=a?.signal;const {skipExtensions:b=[],skipMapInfo:e}=this.ioConfig;
var c=e||b.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:a}),d=this.datasetFormat;d=(d="JPG"===d?"jgw":"PNG"===d?"pgw":"BMP"===d?"bpw":null)&&b.includes(d)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+d,{responseType:"text",signal:a});c=await n.eachAlways([c,d]);if(a?.aborted)throw n.createAbortError();a=w.parsePAMInfo(c[0].value?.data);a.transform||(c=c[1].value?c[1].value.data.split("\n").slice(0,6).map(f=>Number(f)):null,a.transform=6===
c?.length?new z({forwardCoefficients:[c[4],c[5],c[0],-c[1],c[2],-c[3]]}):null);return a}};l.__decorate([r.property({type:String,json:{write:!0}})],g.prototype,"datasetFormat",void 0);return g=l.__decorate([t.subclass("esri.layers.support.rasterDatasets.ImageAuxRaster")],g)});