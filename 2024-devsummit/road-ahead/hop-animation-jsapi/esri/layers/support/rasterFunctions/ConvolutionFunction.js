// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("../../../chunks/tslib.es6 ../../../core/accessorSupport/decorators/property ../../../core/has ../../../core/Logger ../../../core/RandomLCG ../../../core/accessorSupport/decorators/subclass ../rasterFunctionConstants ../rasterFormats/pixelRangeUtils ./BaseRasterFunction ./ConvolutionFunctionArguments ./convolutionUtils".split(" "),function(g,k,e,t,u,l,c,m,n,p,q){e=class extends n{constructor(){super(...arguments);this.functionName="Convolution";this.rasterArgumentNames=["raster"]}get _normalizedKernel(){const {kernel:a,
convolutionType:h}=this.functionArguments,f=a.reduce((d,b)=>d+b);return-1===h||0===f||1===f?a:a.map(d=>d/f)}_bindSourceRasters(){const {convolutionType:a,rows:h,cols:f,kernel:d}=this.functionArguments;if(!Object.values(c.convolutionKernel).includes(a))return{success:!1,supportsGPU:!1,error:`convolution-function: the specified kernel type is not supported ${a}`};if(a!==c.convolutionKernel.none&&h*f!==d.length)return{success:!1,supportsGPU:!1,error:"convolution-function: the specified rows and cols do not match the length of the kernel"};
var b=this.sourceRasterInfos[0];this.outputPixelType=this._getOutputPixelType(b.pixelType);b=b.clone();b.pixelType=this.outputPixelType;const r=[c.convolutionKernel.none,c.convolutionKernel.sharpen,c.convolutionKernel.sharpen2,c.convolutionKernel.sharpening3x3,c.convolutionKernel.sharpening5x5];if(-1===a||"u8"!==this.outputPixelType&&!r.includes(a))b.statistics=null,b.histograms=null;b.colormap=null;b.attributeTable=null;this.rasterInfo=b;return{success:!0,supportsGPU:25>=d.length}}_processPixels(a){a=
a.pixelBlocks?.[0];if(null==a||this.functionArguments.convolutionType===c.convolutionKernel.none)return a;const {rows:h,cols:f}=this.functionArguments,{_normalizedKernel:d}=this;return q.convolute(a,{kernel:d,rows:h,cols:f,outputPixelType:this.outputPixelType})}_getWebGLParameters(){const a=new Float32Array(25);a.set(this._normalizedKernel);return{kernelRows:this.functionArguments.rows,kernelCols:this.functionArguments.cols,kernel:a,clampRange:m.getPixelValueRange(this.outputPixelType)}}};g.__decorate([k.property({json:{write:!0,
name:"rasterFunction"}})],e.prototype,"functionName",void 0);g.__decorate([k.property({type:p,json:{write:!0,name:"rasterFunctionArguments"}})],e.prototype,"functionArguments",void 0);g.__decorate([k.property()],e.prototype,"rasterArgumentNames",void 0);g.__decorate([k.property()],e.prototype,"_normalizedKernel",null);return e=g.__decorate([l.subclass("esri.layers.support.rasterFunctions.ConvolutionFunction")],e)});