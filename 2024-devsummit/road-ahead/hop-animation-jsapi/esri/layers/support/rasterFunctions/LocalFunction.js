// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("../../../chunks/tslib.es6 ../../../core/accessorSupport/decorators/property ../../../core/has ../../../core/Logger ../../../core/RandomLCG ../../../core/accessorSupport/decorators/subclass ../rasterFunctionConstants ../rasterFormats/pixelRangeUtils ./BaseRasterFunction ./LocalFunctionArguments ./localUtils".split(" "),function(m,n,k,v,w,r,q,g,t,u,l){k=class extends t{constructor(){super(...arguments);this.functionName="Local";this.functionArguments=null;this.rasterArgumentNames=["rasters"]}_bindSourceRasters(){var {sourceRasterInfos:b}=
this,c=b[0];const {bandCount:d}=c,{processAsMultiband:a}=this.functionArguments;if(b.some(f=>f.bandCount!==d))return{success:!1,supportsGPU:!1,error:"local-function: input rasters do not have same band count"};const {operation:e,rasters:h}=this.functionArguments;b=l.operandsCount[e];if(!(999===b||h.length===b||1>=h.length&&1===b))return{success:!1,supportsGPU:!1,error:`local-function: the length of functionArguments.rasters does not match operation's requirement: ${b}`};c=c.clone();c.bandCount=999!==
b||a?d:1;this._removeStatsHistColormapVAT(c);this._updateStatistics(c);this._updatePixelType(c);this.rasterInfo=c;return{success:!0,supportsGPU:1===c.bandCount&&3>=b&&(11>e||16<e)}}_processPixels(b){({pixelBlocks:b}=b);return null==b||b.some(c=>null==c)?null:l.local(b,this.functionArguments.operation,{processAsMultiband:this.functionArguments.processAsMultiband,outputPixelType:this.outputPixelType??void 0})}_getWebGLParameters(){const {operation:b}=this.functionArguments,c=l.operandsCount[b],d=Object.keys(q.localOperators).find(f=>
q.localOperators[f]===b)?.toLowerCase()??"undefined";var a=this.outputPixelType??"f32";let [e,h]=g.getPixelValueRange(a);if(a=g.isIntegerPixelType(a))e-=1E-4,h+=1E-4;return{imageCount:c,operationName:d,domainRange:[e,h],isOutputRounded:a}}_updateStatistics(b){var c=this.sourceRasterInfos[0];const {operation:d}=this.functionArguments,a=l.getOutputDomain(d)?.domain;if(a)for(b.statistics=[],c=0;c<b.bandCount;c++)b.statistics[c]={min:a[0],max:a[1],avg:(a[0]+a[1])/2,stddev:(a[0]+a[1])/10};else 45===d&&
c.statistics?.length&&(b.statistics=c.statistics.map(e=>({min:-e.max,max:-e.min,avg:null!=e.avg?-e.avg:void 0,stddev:null!=e.stddev?-e.stddev:void 0})))}_updatePixelType(b){const {statistics:c,pixelType:d}=this.sourceRasterInfos[0];var {operation:a}=this.functionArguments;const {domain:e,isInteger:h}=l.getOutputDomain(a)??{domain:null,isInteger:!1};var f="f32";e&&h?f=g.getIntegerPixelType(e[0],e[1]):30===a?f=(a=c?.[0])?g.getIntegerPixelType(a.min,a.max):g.isIntegerPixelType(d)?d:"s32":45===a&&g.isIntegerPixelType(d)&&
(f=c?.map(({max:p})=>-p),a=c?.map(({min:p})=>-p),f=f?.length?Math.min(...f):null,a=a?.length?Math.min(...a):null,f=null!=f&&null!=a?g.getIntegerPixelType(f,a):d.startsWith("s")?d.replace("s","u"):"u1"===d||"u2"===d||"u4"===d?"s8":"u8"===d?"s16":"s32");b.pixelType=this.outputPixelType=this._getOutputPixelType(f)}};m.__decorate([n.property({json:{write:!0,name:"rasterFunction"}})],k.prototype,"functionName",void 0);m.__decorate([n.property({type:u,json:{write:!0,name:"rasterFunctionArguments"}})],k.prototype,
"functionArguments",void 0);m.__decorate([n.property()],k.prototype,"rasterArgumentNames",void 0);return k=m.__decorate([r.subclass("esri.layers.support.rasterFunctions.LocalFunction")],k)});