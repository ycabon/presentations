// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../request ../../core/has ../../geometry/support/normalizeUtils ../../layers/support/Field ../../layers/support/MapImage ../utils ../support/DataFile ../support/FeatureSet ../support/LinearUnit ../support/ParameterValue ../support/RasterData".split(" "),function(h,C,J,D,r,t,u,l,m,v,E,w){function x(c,d,a){for(const e in c){var b=c[e];b&&"object"===typeof b&&b instanceof m&&({features:b}=b,a[e]=[d.length,d.length+b.length],b.forEach(f=>{d.push(f.geometry)}))}}function n(c,d,a){for(const b in c){const e=
c[b];Array.isArray(e)?c[b]=JSON.stringify(e.map(f=>n({item:f},!0).item)):e instanceof Date&&(c[b]=e.getTime())}return u.encode(c,d,a)}h.collectGeometries=x;h.constructRequest=async function(c,d,a,b,e){const f={},y={},z=[];x(b,z,f);return D.normalizeCentralMeridian(z).then(g=>{const {outSpatialReference:p,processExtent:A,processSpatialReference:q,returnFeatureCollection:F,returnM:G,returnZ:H}=a,{path:I}=u.parseUrl(c);for(var k in f){const B=f[k];y[k]=g.slice(B[0],B[1])}g=p?p.wkid||p:null;k=q?q.wkid||
q:null;g=n({...(A?{context:{extent:A,outSR:g,processSR:k}}:{"env:outSR":g,"env:processSR":k}),...b,...("execute"===d?{returnFeatureCollection:F||void 0,returnM:G||void 0,returnZ:H||void 0}:null),f:"json"},null,y);return C(`${I}/${d}`,{...e,query:g})})};h.decode=function(c){const d=c.dataType,a=E.fromJSON(c);switch(d){case "GPDate":a.value=new Date(a.value);break;case "GPDataFile":a.value=l.fromJSON(a.value);break;case "GPLinearUnit":a.value=v.fromJSON(a.value);break;case "GPFeatureRecordSetLayer":case "GPRecordSet":a.value=
c.value.url?l.fromJSON(a.value):m.fromJSON(a.value);break;case "GPRasterData":case "GPRasterDataLayer":c=c.value.mapImage;a.value=c?t.fromJSON(c):w.fromJSON(a.value);break;case "Field":a.value=r.fromJSON(a.value);break;case "GPMultiValue:GPDate":a.value=a.value.map(b=>new Date(b));break;case "GPMultiValue:GPDataFile":a.value=a.value.map(b=>l.fromJSON(b));break;case "GPMultiValue:GPLinearUnit":a.value=a.value.map(b=>v.fromJSON(b));break;case "GPMultiValue:GPFeatureRecordSetLayer":case "GPMultiValue:GPRecordSet":a.value=
a.value.map(b=>m.fromJSON(b));break;case "GPMultiValue:GPRasterData":case "GPMultiValue:GPRasterDataLayer":a.value=a.value.map(b=>b?t.fromJSON(b):w.fromJSON(a.value));break;case "GPMultiValue:Field":a.value=a.value.map(b=>r.fromJSON(b))}return a};h.gpEncode=n;Object.defineProperty(h,Symbol.toStringTag,{value:"Module"})});