// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../request ../core/accessorSupport/get ../geometry/support/normalizeUtils ./networkService ./utils ./route/utils ./support/FeatureSet ./support/ServiceAreaSolveResult".split(" "),function(n,q,r,t,c,u,v,h,w){n.solve=async function(k,a,e){const m=[];var d=[],b={};const g={},p=u.parseUrl(k);({path:k}=p);a.facilities instanceof h&&c.collectGeometries(a.facilities.features,d,"facilities.features",b);a.pointBarriers instanceof h&&c.collectGeometries(a.pointBarriers.features,d,"pointBarriers.features",
b);a.polylineBarriers instanceof h&&c.collectGeometries(a.polylineBarriers.features,d,"polylineBarriers.features",b);a.polygonBarriers instanceof h&&c.collectGeometries(a.polygonBarriers.features,d,"polygonBarriers.features",b);d=await t.normalizeCentralMeridian(d);for(const f in b){const l=b[f];m.push(f);g[f]=d.slice(l[0],l[1])}if(c.isInputGeometryZAware(g,m)){b=null;try{b=await c.fetchServiceDescription(k,a.apiKey,e)}catch{}b&&!b.hasZ&&c.dropZValuesOffInputGeometry(g,m)}for(const f in g)g[f].forEach((l,
x)=>{r.get(a,f)[x].geometry=l});e={...e,query:{...p.query,...v.serviceAreaParametersToQueryParameters(a),f:"json"}};({data:e}=await q(`${k}/solveServiceArea`,e));return w.fromJSON(e)};Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});