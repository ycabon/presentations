// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("../../core/has ../../core/Error ../../core/screenUtils ../../geometry/support/scaleUtils ../../renderers/visualVariables/SizeVariable ./scaleRange ../support/binningUtils ../support/adapters/support/layerUtils".split(" "),function(P,g,m,z,n,A,B,q){async function C(a){var {view:c}=a;if(!(a&&c&&a.layer))throw new g("size-range:missing-parameters","'view' and 'layer' parameters are required");a.forBinning&&B.verifyBinningParams(a,"size-range");const {layer:d,...e}=a;var b=a.forBinning?q.binningCapableLayerTypes:
q.featureCapableLayerTypes;a=q.createLayerAdapter(d,b,a.forBinning);if(!a)throw new g("size-range:invalid-parameters","'layer' must be one of these types: "+q.getLayerTypeLabels(b).join(", "));b={layerAdapter:a,...e,view:c};await c.when();await a.load(null!=b.signal?{signal:b.signal}:null);c=a.geometryType;if("point"!==c&&"multipoint"!==c&&"polyline"!==c&&"polygon"!==c)throw new g("size-range:not-supported",`sizeRange is not supported for geometryType: ${c}`);return b}function v(a,c){({view:a}=a);
if(!a)throw new g("scale-range:invalid-parameters","'view' is required");var d=c.minScale||1E8;c=a.constraints&&"effectiveLODs"in a.constraints&&a.constraints.effectiveLODs||D;a=[];for(let e=0;e<c.length;e++)if(!(c[e].scale>d)){d=Number(e);d=[d-3,d,d+3,d+6];for(const b of d)-1<b&&b<c.length&&a.push(c[b].scale);break}return a.sort((e,b)=>e-b)}function E(a,c){const {view:d,layerAdapter:e}=a;if(!d)throw new g("scale-range:invalid-parameters","'view' is required");var b=e.fullExtent;a=e.minScale||1128.497176;
const f=e.maxScale||5.91657527591555E8,t=c.minScale||0;c=c.maxScale||0;b=null!=b?z.getScale(d,b):0;b=b<a&&b>f?b:0;return{scales:[a,f,t,c,b].map(Math.round).sort((k,l)=>k-l).filter((k,l,p)=>!!k&&p.indexOf(k)===l).filter((k,l,p)=>l?5<Math.abs(k-p[l-1]):!0),fullExtentScale:b}}function F(a,c){const {minScale:d,maxScale:e}=c;a=v(a,{minScale:d,maxScale:e});if(!a.length)throw new g("scale-range:insufficient-info","not enough scale values");return{minSize:new n({valueExpression:"$view.scale",stops:a.map((b,
f)=>({value:b,size:m.px2pt(G[f])}))}),maxSize:new n({valueExpression:"$view.scale",stops:a.map((b,f)=>({value:b,size:m.px2pt(H[f])}))})}}function I(a,c){const {minScale:d,maxScale:e}=c;a=v(a,{minScale:d,maxScale:e});if(!a.length)throw new g("scale-range:insufficient-info","not enough scale values");return{minSize:new n({valueExpression:"$view.scale",stops:a.map((b,f)=>({value:b,size:m.px2pt(J[f])}))}),maxSize:new n({valueExpression:"$view.scale",stops:a.map((b,f)=>({value:b,size:m.px2pt(K[f])}))})}}
function L(a,c){const {spatialStatistics:d,minScale:e,maxScale:b}=c;if(!("avgSize"in d&&d.avgSize))throw new g("size-range:insufficient-info","average polygon size is invalid");const f=d.avgSize;({view:c}=a);if(!c)throw new g("scale-range:invalid-parameters","'view' is required");const {resolution:t,scale:k}=c,l=t/k,{scales:p,fullExtentScale:M}=E(a,{minScale:e,maxScale:b}),w=[],x=[];p.forEach((u,r)=>{var h=Math.ceil(Math.ceil(f/(l*u))/4);4>h?h=4:16<h&&(h=16);const y=5*h,{min:N,max:O}={min:h,max:50>
y?50:y};h=p.indexOf(M);r=-1<h&&r>h?2:1;w.push({value:u,size:m.px2pt(N/r)});x.push({value:u,size:m.px2pt(O/r)})});a=new n({valueExpression:"$view.scale",stops:w});c=new n({valueExpression:"$view.scale",stops:x});return{minSize:a,maxSize:c}}const G=[10,8,4,2],H=[100,100,60,30],J=[2,1,.75,.5],K=[32,18,12,6],D=[{level:0,resolution:156543.03392800014,scale:5.91657527591555E8},{level:1,resolution:78271.51696399994,scale:2.95828763795777E8},{level:2,resolution:39135.75848200009,scale:1.47914381897889E8},
{level:3,resolution:19567.87924099992,scale:7.3957190948944E7},{level:4,resolution:9783.93962049996,scale:3.6978595474472E7},{level:5,resolution:4891.96981024998,scale:1.8489297737236E7},{level:6,resolution:2445.98490512499,scale:9244648.868618},{level:7,resolution:1222.992452562495,scale:4622324.434309},{level:8,resolution:611.4962262813797,scale:2311162.217155},{level:9,resolution:305.74811314055756,scale:1155581.108577},{level:10,resolution:152.87405657041106,scale:577790.554289},{level:11,resolution:76.43702828507324,
scale:288895.277144},{level:12,resolution:38.21851414253662,scale:144447.638572},{level:13,resolution:19.10925707126831,scale:72223.819286},{level:14,resolution:9.554628535634155,scale:36111.909643},{level:15,resolution:4.77731426794937,scale:18055.954822},{level:16,resolution:2.388657133974685,scale:9027.977411},{level:17,resolution:1.1943285668550503,scale:4513.988705},{level:18,resolution:.5971642835598172,scale:2256.994353},{level:19,resolution:.29858214164761665,scale:1128.497176}];return async function(a){a=
await C(a);const {view:c,layerAdapter:d,signal:e}=a,b=await A({layer:d,view:c,signal:e});switch(d.geometryType){case "point":case "multipoint":return F(a,b);case "polyline":return I(a,b);case "polygon":return L(a,b)}return null}});