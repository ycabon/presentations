// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("../../../chunks/tslib.es6 ../../../core/Error ../../../core/Logger ../../../core/has ../../../core/RandomLCG ../../../core/accessorSupport/decorators/subclass ../../../rest/support/generateRendererUtils ../../statistics/support/utils ../../statistics/support/WorkerClient ../utils ./FeatureLayerAdapter ./support/utils".split(" "),function(p,m,k,y,z,q,n,l,r,t,u,v){k=class extends u{constructor(){super(...arguments);this.adapterName="csv-layer-adapter"}async _createGenerateRendererResult(a,c,
b,f,d){a=a?.features;if(!a?.length)throw new m("csv-layer-adapter:insufficient-data","No features are available to calculate statistics");const g=v.ensureFeaturesJSON(a);a=null;if("percent-of-total"===f&&(a=(await this.workerClient.summaryStatistics({field:c},g)).sum,null==a))throw new m("csv-layer-adapter:invalid","invalid normalizationTotal");if("class-breaks-definition"===d?.type)return c=(await l.getDataValues({field:c,normalizationType:f,normalizationField:b,normalizationTotal:a},g)).filter(e=>
Number.isFinite(e)),n.createGenerateRendererClassBreaks({definition:d,values:c,normalizationTotal:a});d=(await l.getDataValues({field:c},g)).filter(e=>null!=e&&"string"===typeof e&&""!==e.trim());return n.createGenerateRendererUniqueValues(d)}generateRenderer(a,c){const b=a.classificationDefinition;let f=null,d=null,g=null;"class-breaks-definition"===b?.type?(f=b.classificationField,d=b.normalizationField,g=b.normalizationType):f=b?.attributeField;const e=this.layer;return t.getFieldsList({field:f,
normalizationField:d}).then(w=>{const h=e.createQuery();h.returnGeometry=!1;h.outFields=w;h.where=l.mergeWhereClauses(h.where,a.where);return e.queryFeatures(h,{signal:c}).then(x=>this._createGenerateRendererResult(x,f,d,g,b))})}load(a){const c=this.layer.load(a).then(async b=>{this.geometryType=b.geometryType;this.objectIdField=b.objectIdField;this.supportsSQLExpression=!0;this._hasLocalSource=!1;this.hasQueryEngine=!0;this.workerClient=r.WorkerClient.getInstance();await this.workerClient.open(a.signal)});
this.addResolvingPromise(c);return Promise.resolve(this)}};return k=p.__decorate([q.subclass("esri.smartMapping.support.adapters.CSVLayerAdapter")],k)});