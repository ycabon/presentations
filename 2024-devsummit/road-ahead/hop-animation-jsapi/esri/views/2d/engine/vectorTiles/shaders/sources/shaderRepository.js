// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define(function(){return{background:{"background.frag":"#ifdef PATTERN\nuniform lowp float u_opacity;\nuniform lowp sampler2D u_texture;\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_tileTextureCoord;\n#else\nuniform lowp vec4 u_color;\n#endif\nvoid main() {\n#ifdef PATTERN\nmediump vec2 normalizedTextureCoord \x3d mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos \x3d mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color \x3d texture2D(u_texture, samplePos);\ngl_FragColor \x3d u_opacity * color;\n#else\ngl_FragColor \x3d u_color;\n#endif\n}",
"background.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_coord_range;\nuniform mediump float u_depth;\n#ifdef PATTERN\nuniform mediump mat3 u_pattern_matrix;\nvarying mediump vec2 v_tileTextureCoord;\nuniform mediump vec4 u_tlbr;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump vec4 v_tlbr;\n#endif\nvoid main() {\ngl_Position \x3d vec4((u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0)).xy, u_depth, 1.0);\n#ifdef PATTERN\nv_tileTextureCoord \x3d (u_pattern_matrix * vec3(a_pos, 1.0)).xy;\nv_tlbr             \x3d u_tlbr / u_mosaicSize.xyxy;\n#endif\n}"},
circle:{"circle.frag":"precision lowp float;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_stroke_color;\nvarying mediump float v_blur;\nvarying mediump float v_stroke_width;\nvarying mediump float v_radius;\nvarying mediump vec2 v_offset;\nvoid main()\n{\nmediump float dist \x3d length(v_offset);\nmediump float alpha \x3d smoothstep(0.0, -v_blur, dist - 1.0);\nlowp float color_mix_ratio \x3d v_stroke_width \x3c 0.01 ? 0.0 : smoothstep(-v_blur, 0.0, dist - v_radius / (v_radius + v_stroke_width));\ngl_FragColor \x3d alpha * mix(v_color, v_stroke_color, color_mix_ratio);\n}",
"circle.vert":"precision mediump float;\nattribute vec2 a_pos;\n#pragma header\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_stroke_color;\nvarying mediump float v_blur;\nvarying mediump float v_stroke_width;\nvarying mediump float v_radius;\nvarying mediump vec2 v_offset;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform mediump vec2 u_circleTranslation;\nuniform mediump float u_depth;\nuniform mediump float u_antialiasingWidth;\nvoid main()\n{\n#pragma main\nv_color \x3d color * opacity;\nv_stroke_color \x3d stroke_color * stroke_opacity;\nv_stroke_width \x3d stroke_width;\nv_radius \x3d radius;\nv_blur \x3d max(blur, u_antialiasingWidth / (radius + stroke_width));\nmediump vec2 offset \x3d vec2(mod(a_pos, 2.0) * 2.0 - 1.0);\nv_offset \x3d offset;\nmediump vec3 pos \x3d u_dvsMat3 * vec3(a_pos * 0.5, 1.0) + u_displayMat3 * vec3((v_radius + v_stroke_width) * offset + u_circleTranslation, 0.0);\ngl_Position \x3d vec4(pos.xy, u_depth, 1.0);\n}"},
fill:{"fill.frag":"precision lowp float;\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\nvarying mediump vec2 v_tileTextureCoord;\nvarying mediump vec4 v_tlbr;\n#endif\nvarying lowp vec4 v_color;\nvec4 mixColors(vec4 color1, vec4 color2) {\nfloat compositeAlpha \x3d color2.a + color1.a * (1.0 - color2.a);\nvec3 compositeColor \x3d color2.rgb + color1.rgb * (1.0 - color2.a);\nreturn vec4(compositeColor, compositeAlpha);\n}\nvoid main()\n{\n#ifdef PATTERN\nmediump vec2 normalizedTextureCoord \x3d fract(v_tileTextureCoord);\nmediump vec2 samplePos \x3d mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color \x3d texture2D(u_texture, samplePos);\ngl_FragColor \x3d v_color[3] * color;\n#else\ngl_FragColor \x3d v_color;\n#endif\n}",
"fill.vert":"precision mediump float;\nattribute vec2 a_pos;\n#pragma header\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_fillTranslation;\n#ifdef PATTERN\n#include \x3cutil/util.glsl\x3e\nuniform mediump vec2 u_mosaicSize;\nuniform mediump float u_patternFactor;\nvarying mediump vec2 v_tileTextureCoord;\nvarying mediump vec4 v_tlbr;\n#endif\nvarying lowp vec4 v_color;\nvoid main()\n{\n#pragma main\nv_color \x3d color * opacity;\n#ifdef PATTERN\nfloat patternWidth \x3d nextPOT(tlbr.z - tlbr.x);\nfloat patternHeight \x3d nextPOT(tlbr.w - tlbr.y);\nfloat scaleX \x3d 1.0 / (patternWidth * u_patternFactor);\nfloat scaleY \x3d 1.0 / (patternHeight * u_patternFactor);\nmat3 patterMat \x3d mat3(scaleX, 0.0,    0.0,\n0.0,    -scaleY, 0.0,\n0.0,    0.0,    1.0);\nv_tileTextureCoord \x3d (patterMat * vec3(a_pos, 1.0)).xy;\nv_tlbr             \x3d tlbr / u_mosaicSize.xyxy;\n#endif\nvec3 pos \x3d u_dvsMat3 * vec3(a_pos, 1.0) + u_displayMat3 * vec3(u_fillTranslation, 0.0);\ngl_Position \x3d vec4(pos.xy, u_depth, 1.0);\n}"},
icon:{"icon.frag":"precision mediump float;\nuniform lowp sampler2D u_texture;\n#ifdef SDF\nuniform lowp vec4 u_color;\nuniform lowp vec4 u_outlineColor;\n#endif\nvarying mediump vec2 v_tex;\nvarying lowp float v_opacity;\nvarying mediump vec2 v_size;\nvarying lowp vec4 v_color;\n#ifdef SDF\nvarying mediump flaot v_halo_width;\n#endif\n#include \x3cutil/encoding.glsl\x3e\nvec4 mixColors(vec4 color1, vec4 color2) {\nfloat compositeAlpha \x3d color2.a + color1.a * (1.0 - color2.a);\nvec3 compositeColor \x3d color2.rgb + color1.rgb * (1.0 - color2.a);\nreturn vec4(compositeColor, compositeAlpha);\n}\nvoid main()\n{\n#ifdef SDF\nlowp vec4 fillPixelColor \x3d v_color;\nfloat d \x3d rgba2float(texture2D(u_texture, v_tex)) - 0.5;\nconst float softEdgeRatio \x3d 0.248062016;\nfloat size \x3d max(v_size.x, v_size.y);\nfloat dist \x3d d * softEdgeRatio * size;\nfillPixelColor *\x3d clamp(0.5 - dist, 0.0, 1.0);\nif (v_halo_width \x3e 0.25) {\nlowp vec4 outlinePixelColor \x3d u_outlineColor;\nconst float outlineLimitRatio \x3d (16.0 / 86.0);\nfloat clampedOutlineSize \x3d softEdgeRatio * min(v_halo_width, outlineLimitRatio * max(v_size.x, v_size.y));\noutlinePixelColor *\x3d clamp(0.5 - (abs(dist) - clampedOutlineSize), 0.0, 1.0);\ngl_FragColor \x3d v_opacity * mixColors(fillPixelColor, outlinePixelColor);\n}\nelse {\ngl_FragColor \x3d v_opacity * fillPixelColor;\n}\n#else\nlowp vec4 texColor \x3d texture2D(u_texture, v_tex);\ngl_FragColor \x3d v_opacity * texColor;\n#endif\n}",
"icon.vert":"attribute vec2 a_pos;\nattribute vec2 a_vertexOffset;\nattribute vec4 a_texAngleRange;\nattribute vec4 a_levelInfo;\nattribute float a_opacityInfo;\n#pragma header\nvarying lowp vec4 v_color;\n#ifdef SDF\nvarying mediump float v_halo_width;\n#endif\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform mediump vec2 u_iconTranslation;\nuniform vec2 u_mosaicSize;\nuniform mediump float u_depth;\nuniform mediump float u_mapRotation;\nuniform mediump float u_level;\nuniform lowp float u_keepUpright;\nuniform mediump float u_fadeDuration;\nvarying mediump vec2 v_tex;\nvarying lowp float v_opacity;\nvarying mediump vec2 v_size;\nconst float C_OFFSET_PRECISION \x3d 1.0 / 8.0;\nconst float C_256_TO_RAD \x3d 3.14159265359 / 128.0;\nconst float C_DEG_TO_RAD \x3d 3.14159265359 / 180.0;\nconst float tileCoordRatio \x3d 1.0 / 8.0;\nuniform highp float u_time;\nvoid main()\n{\n#pragma main\nv_color \x3d color;\nv_opacity \x3d opacity;\n#ifdef SDF\nv_halo_width \x3d halo_width;\n#endif\nfloat modded \x3d mod(a_opacityInfo, 128.0);\nfloat targetOpacity \x3d (a_opacityInfo - modded) / 128.0;\nfloat startOpacity \x3d modded / 127.0;\nfloat interpolatedOpacity \x3d clamp(startOpacity + 2.0 * (targetOpacity - 0.5) * u_time / u_fadeDuration, 0.0, 1.0);\nv_opacity *\x3d interpolatedOpacity;\nmediump float a_angle         \x3d a_levelInfo[1];\nmediump float a_minLevel      \x3d a_levelInfo[2];\nmediump float a_maxLevel      \x3d a_levelInfo[3];\nmediump vec2 a_tex            \x3d a_texAngleRange.xy;\nmediump float delta_z \x3d 0.0;\nmediump float rotated \x3d mod(a_angle + u_mapRotation, 256.0);\ndelta_z +\x3d (1.0 - step(u_keepUpright, 0.0)) * step(64.0, rotated) * (1.0 - step(192.0, rotated));\ndelta_z +\x3d 1.0 - step(a_minLevel, u_level);\ndelta_z +\x3d step(a_maxLevel, u_level);\ndelta_z +\x3d step(v_opacity, 0.0);\nvec2 offset \x3d C_OFFSET_PRECISION * a_vertexOffset;\nv_size \x3d abs(offset);\n#ifdef SDF\noffset \x3d (120.0 / 86.0) * offset;\n#endif\nmediump vec3 pos \x3d u_dvsMat3 * vec3(a_pos, 1.0) + u_displayViewMat3 * vec3(size * offset, 0.0) + u_displayMat3 * vec3(u_iconTranslation, 0.0);\ngl_Position \x3d vec4(pos.xy, u_depth + delta_z, 1.0);\nv_tex \x3d a_tex.xy / u_mosaicSize;\n}"},
line:{"line.frag":"precision lowp float;\nvarying mediump vec2 v_normal;\nvarying highp float v_accumulatedDistance;\nvarying mediump float v_lineHalfWidth;\nvarying lowp vec4 v_color;\nvarying mediump float v_blur;\n#if defined (PATTERN) || defined(SDF)\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\nvarying mediump float v_widthRatio;\nuniform sampler2D u_texture;\nuniform mediump float u_antialiasing;\n#endif\n#ifdef SDF\n#include \x3cutil/encoding.glsl\x3e\n#endif\nvoid main()\n{\nmediump float fragDist \x3d length(v_normal) * v_lineHalfWidth;\nlowp float alpha \x3d clamp((v_lineHalfWidth - fragDist) / v_blur, 0.0, 1.0);\n#ifdef PATTERN\nmediump float relativeTexX \x3d fract(v_accumulatedDistance / (v_patternSize.x * v_widthRatio));\nmediump float relativeTexY \x3d 0.5 + v_normal.y * v_lineHalfWidth / (v_patternSize.y * v_widthRatio);\nmediump vec2 texCoord \x3d mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexX, relativeTexY));\nlowp vec4 color \x3d texture2D(u_texture, texCoord);\ngl_FragColor \x3d alpha * v_color[3] * color;\n#elif defined(SDF)\nmediump float relativeTexX \x3d fract((v_accumulatedDistance * 0.5) / (v_patternSize.x * v_widthRatio));\nmediump float relativeTexY \x3d  0.5 + 0.25 * v_normal.y;\nmediump vec2 texCoord \x3d mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d \x3d rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist \x3d d * (v_lineHalfWidth + u_antialiasing / 2.0);\ngl_FragColor \x3d alpha * clamp(0.5 - dist, 0.0, 1.0) * v_color;\n#else\ngl_FragColor \x3d alpha * v_color;\n#endif\n}",
"line.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec4 a_extrude_offset;\nattribute vec4 a_dir_normal;\nattribute vec2 a_accumulatedDistance;\n#pragma header\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform mediump float u_zoomFactor;\nuniform mediump vec2 u_lineTranslation;\nuniform mediump float u_antialiasing;\nuniform mediump float u_depth;\nvarying mediump vec2 v_normal;\nvarying highp float v_accumulatedDistance;\nconst float scale \x3d 1.0 / 31.0;\nconst mediump float tileCoordRatio \x3d 8.0;\n#if defined (SDF)\nconst mediump float sdfPatternHalfWidth \x3d 15.5;\n#endif\n#if defined (PATTERN) || defined(SDF)\nuniform mediump vec2 u_mosaicSize;\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\nvarying mediump float v_widthRatio;\n#endif\nvarying lowp vec4 v_color;\nvarying mediump float v_lineHalfWidth;\nvarying mediump float v_blur;\nvoid main()\n{\n#pragma main\nv_color \x3d color * opacity;\nv_blur \x3d blur + u_antialiasing;\nv_normal \x3d a_dir_normal.zw * scale;\n#if defined (PATTERN) || defined(SDF)\nv_tlbr          \x3d tlbr / u_mosaicSize.xyxy;\nv_patternSize   \x3d vec2(tlbr.z - tlbr.x, tlbr.y - tlbr.w);\n#if defined (PATTERN)\nv_widthRatio \x3d width / v_patternSize.y;\n#else\nv_widthRatio \x3d width / sdfPatternHalfWidth / 2.0;\n#endif\n#endif\nv_lineHalfWidth \x3d (width + u_antialiasing) * 0.5;\nmediump vec2 dir \x3d a_dir_normal.xy * scale;\nmediump vec2 offset_ \x3d a_extrude_offset.zw * scale * offset;\nmediump vec2 dist \x3d v_lineHalfWidth * scale * a_extrude_offset.xy;\nmediump vec3 pos \x3d u_dvsMat3 * vec3(a_pos + offset_ * tileCoordRatio / u_zoomFactor, 1.0) + u_displayViewMat3 * vec3(dist, 0.0) + u_displayMat3 * vec3(u_lineTranslation, 0.0);\ngl_Position \x3d vec4(pos.xy, u_depth, 1.0);\n#if defined (PATTERN) || defined(SDF)\nv_accumulatedDistance \x3d a_accumulatedDistance.x * u_zoomFactor / tileCoordRatio + dot(dir, dist + offset_);\n#endif\n}"},
outline:{"outline.frag":"varying lowp vec4 v_color;\nvarying mediump vec2 v_normal;\nvoid main()\n{\nlowp float dist \x3d abs(v_normal.y);\nlowp float alpha \x3d smoothstep(1.0, 0.0, dist);\ngl_FragColor \x3d alpha * v_color;\n}","outline.vert":"attribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_xnormal;\n#pragma header\nvarying lowp vec4 v_color;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform mediump vec2 u_fillTranslation;\nuniform mediump float u_depth;\nuniform mediump float u_outline_width;\nvarying lowp vec2 v_normal;\nconst float scale \x3d 1.0 / 15.0;\nvoid main()\n{\n#pragma main\nv_color \x3d color * opacity;\nv_normal \x3d a_xnormal;\nmediump vec2 dist \x3d u_outline_width * scale * a_offset;\nmediump vec3 pos \x3d u_dvsMat3 * vec3(a_pos, 1.0) + u_displayMat3 * vec3(dist + u_fillTranslation, 0.0);\ngl_Position \x3d vec4(pos.xy, u_depth, 1.0);\n}"},
text:{"text.frag":"uniform lowp sampler2D u_texture;\nvarying lowp vec2 v_tex;\nvarying lowp vec4 v_color;\nvarying mediump float v_edgeWidth;\nvarying mediump float v_edgeDistance;\nvoid main()\n{\nlowp float dist \x3d texture2D(u_texture, v_tex).a;\nmediump float alpha \x3d smoothstep(v_edgeDistance - v_edgeWidth, v_edgeDistance + v_edgeWidth, dist);\ngl_FragColor \x3d alpha * v_color;\n}","text.vert":"attribute vec2 a_pos;\nattribute vec2 a_vertexOffset;\nattribute vec4 a_texAngleRange;\nattribute vec4 a_levelInfo;\nattribute float a_opacityInfo;\n#pragma header\nvarying lowp vec4 v_color;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform mediump vec2 u_textTranslation;\nuniform vec2 u_mosaicSize;\nuniform mediump float u_depth;\nuniform mediump float u_mapRotation;\nuniform mediump float u_level;\nuniform lowp float u_keepUpright;\nuniform mediump float u_fadeDuration;\nvarying lowp vec2 v_tex;\nconst float offsetPrecision \x3d 1.0 / 8.0;\nconst mediump float edgePos \x3d 0.75;\nuniform mediump float u_antialiasingWidth;\nvarying mediump float v_edgeDistance;\nvarying mediump float v_edgeWidth;\nuniform lowp float u_halo;\nconst float sdfFontScale \x3d 1.0 / 24.0;\nconst float sdfPixel \x3d 3.0;\nuniform highp float u_time;\nvoid main()\n{\n#pragma main\nif (u_halo \x3e 0.5)\n{\nv_color \x3d halo_color * opacity;\nhalo_width *\x3d sdfPixel;\nhalo_blur *\x3d sdfPixel;\n}\nelse\n{\nv_color \x3d color * opacity;\nhalo_width \x3d 0.0;\nhalo_blur \x3d 0.0;\n}\nfloat modded \x3d mod(a_opacityInfo, 128.0);\nfloat targetOpacity \x3d (a_opacityInfo - modded) / 128.0;\nfloat startOpacity \x3d modded / 127.0;\nfloat interpolatedOpacity \x3d clamp(startOpacity + 2.0 * (targetOpacity - 0.5) * u_time / u_fadeDuration, 0.0, 1.0);\nv_color *\x3d interpolatedOpacity;\nmediump float a_angle       \x3d a_levelInfo[1];\nmediump float a_minLevel    \x3d a_levelInfo[2];\nmediump float a_maxLevel    \x3d a_levelInfo[3];\nmediump vec2 a_tex          \x3d a_texAngleRange.xy;\nmediump float a_visMinAngle    \x3d a_texAngleRange.z;\nmediump float a_visMaxAngle    \x3d a_texAngleRange.w;\nmediump float delta_z \x3d 0.0;\nmediump float angle \x3d mod(a_angle + u_mapRotation, 256.0);\nif (a_visMinAngle \x3c a_visMaxAngle)\n{\ndelta_z +\x3d (1.0 - step(u_keepUpright, 0.0)) * (step(a_visMaxAngle, angle) + (1.0 - step(a_visMinAngle, angle)));\n}\nelse\n{\ndelta_z +\x3d (1.0 - step(u_keepUpright, 0.0)) * (step(a_visMaxAngle, angle) * (1.0 - step(a_visMinAngle, angle)));\n}\ndelta_z +\x3d 1.0 - step(a_minLevel, u_level);\ndelta_z +\x3d step(a_maxLevel, u_level);\ndelta_z +\x3d step(v_color[3], 0.0);\nv_tex \x3d a_tex.xy / u_mosaicSize;\nv_edgeDistance \x3d edgePos - halo_width / size;\nv_edgeWidth \x3d (u_antialiasingWidth + halo_blur) / size;\nmediump vec3 pos \x3d u_dvsMat3 * vec3(a_pos, 1.0) + sdfFontScale * u_displayViewMat3 * vec3(offsetPrecision * size * a_vertexOffset, 0.0) + u_displayMat3 * vec3(u_textTranslation, 0.0);\ngl_Position \x3d vec4(pos.xy, u_depth + delta_z, 1.0);\n}"},
util:{"encoding.glsl":"const vec4 rgba2float_factors \x3d vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}","util.glsl":"float nextPOT(in float x) {\nreturn pow(2.0, ceil(log2(abs(x))));\n}"}}});