// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("../../../../core/screenUtils ../../../../core/libs/gl-matrix-2/math/mat3 ../../../../core/libs/gl-matrix-2/factories/mat3f32 ../../../../core/libs/gl-matrix-2/factories/vec2f32 ../../../../core/libs/gl-matrix-2/factories/vec3f32 ../../../../geometry/support/normalizeUtils ../../../../geometry/support/spatialReferenceUtils ../../viewpointUtils ../brushes ./enums ./WGLContainer".split(" "),function(A,m,B,C,D,E,F,G,H,I,J){class K extends J{constructor(){super(...arguments);this._localOrigin=
A.createScreenPoint(0,0);this._viewStateId=-1;this._dvsMat3=B.create()}get dvsMat3(){return this._dvsMat3}beforeRender(a){this._updateMatrices(a);this._updateOverlays(a,this.children);for(const b of this.children)b.beforeRender(a)}prepareRenderPasses(a){const b=a.registerRenderPass({name:"overlay",brushes:[H.brushes.overlay],target:()=>this.children,drawPhase:I.WGLDrawPhase.MAP});return[...super.prepareRenderPasses(a),b]}_updateMatrices(a){var {state:b}=a;const {id:f,size:q,pixelRatio:h,resolution:n,
rotation:r,viewpoint:v,displayMat3:k}=b;if(this._viewStateId!==f){a=Math.PI/180*r;var c=h*q[0],d=h*q[1],{x:g,y:l}=v.targetGeometry;b=E.normalizeMapX(g,b.spatialReference);this._localOrigin.x=b;this._localOrigin.y=l;b=n*c;var p=n*d,e=m.identity(this._dvsMat3);m.multiply(e,e,k);m.translate(e,e,C.fromValues(c/2,d/2));m.scale(e,e,D.fromValues(c/b,-d/p,1));m.rotate(e,e,-a);this._viewStateId=f}}_updateOverlays(a,b){const {state:f}=a,{rotation:q,spatialReference:h,worldScreenWidth:n,size:r,viewpoint:v}=
f;a=this._localOrigin;let k=0;var c=F.getInfo(h);if(c&&h.isWrappable){var d=180/Math.PI*q,g=Math.round(r[0]*Math.abs(Math.cos(d))+r[1]*Math.abs(Math.sin(d)));const [p,e]=c.valid;c=G.getWorldWidth(h);const {x,y:L}=v.targetGeometry;d=[0,0];f.toScreen(d,[x,L]);const t=[0,0];g=g>n?.5*n:.5*g;var l=Math.floor((x+.5*c)/c);const M=p+l*c;l=e+l*c;const w=[d[0]+g,0];f.toMap(t,w);t[0]>l&&(k=c);w[0]=d[0]-g;f.toMap(t,w);t[0]<M&&(k=-c);for(const u of b){b=u.elementView.bounds;if(null==b)continue;const [y,,z]=b;
y<p&&z>p?u.updateDrawCoords(a,c):z>e&&y<e?u.updateDrawCoords(a,-c):u.updateDrawCoords(a,k)}}else for(d of b)d.updateDrawCoords(a,k)}}return K});