// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../../chunks/tslib.es6","../../GraphShaderModule","../../graph/glsl","./heatmapUtils"],function(e,c,a,d,p){class k extends a.VertexInput{}c.__decorate([a.location(0,d.Vec2)],k.prototype,"pos",void 0);class m extends a.FragmentInput{}class g extends a.UniformGroup{}c.__decorate([a.uniform(d.Sampler2D)],g.prototype,"texture",void 0);c.__decorate([a.uniform(d.Vec2)],g.prototype,"minAndInvRange",void 0);c.__decorate([a.uniform(d.Float)],g.prototype,"normalization",void 0);
class l extends a.UniformGroup{}c.__decorate([a.uniform(d.Sampler2D)],l.prototype,"texture",void 0);class f extends a.GraphShaderModule{constructor(){super(...arguments);this.usesHalfFloatPrecision=!1}vertex(b){return{glPosition:new d.Vec4(b.pos.multiply(2).subtract(1),1,1),uv:b.pos}}fragment(b){const {accumulatedDensity:h,gradient:q}=this;b=d.texture2D(h.texture,b.uv).r.multiply(new d.Float(p.getHeatmapCompressionFactor(this.usesHalfFloatPrecision)));b=b.multiply(h.normalization);b=b.subtract(h.minAndInvRange.x).multiply(h.minAndInvRange.y);
b=d.texture2D(q.texture,new d.Vec2(b,.5));const n=new a.FragmentOutput;n.glFragColor=new d.Vec4(b.rgb.multiply(b.a),b.a);return n}}c.__decorate([a.define],f.prototype,"usesHalfFloatPrecision",void 0);c.__decorate([a.uniform(g)],f.prototype,"accumulatedDensity",void 0);c.__decorate([a.uniform(l)],f.prototype,"gradient",void 0);c.__decorate([c.__param(0,a.input(k))],f.prototype,"vertex",null);c.__decorate([c.__param(0,a.input(m))],f.prototype,"fragment",null);e.AccumulatedDensity=g;e.Gradient=l;e.HeatmapResolveFragmentInput=
m;e.HeatmapResolveShader=f;e.HeatmapResolveVertexInput=k;Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});