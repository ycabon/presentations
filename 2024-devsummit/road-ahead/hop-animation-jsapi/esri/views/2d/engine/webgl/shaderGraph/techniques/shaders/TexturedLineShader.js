// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../../../../chunks/tslib.es6 ../../../../../../../symbols/cim/constants ../../GraphShaderModule ../../graph/glsl ./AFeatureShader ./constants ./LineShader ./MosaicInfo ./utils".split(" "),function(q,h,x,k,a,y,t,m,z,r){class n extends m.LineVertexInput{}h.__decorate([k.location(9,a.Float)],n.prototype,"accumulatedDistance",void 0);h.__decorate([k.location(10,a.Vec2)],n.prototype,"segmentDirection",void 0);h.__decorate([k.location(11,a.Vec4)],n.prototype,"tlbr",void 0);class A extends m.LineFragmentInput{}
class u extends m.LineShader{_getLineWidthRatio(b,f){const g=new a.Float(x.dashRadius);b=r.getBit(b.bitset,t.bitsetLineScaleDash);return b.multiply(a.max(f,new a.Float(.25))).add((new a.Float(1)).subtract(b)).divide(g)}_getSDFAlpha(b){const {halfWidth:f,normal:g,tlbr:c,patternSize:e,accumulatedDistance:d,lineWidthRatio:p}=b;b=e.x.multiply(new a.Float(2)).multiply(p);b=a.fract(d.divide(b));const l=(new a.Float(.25)).multiply(g.y).add(new a.Float(.5));b=a.mix(c.xy,c.zw,new a.Vec2(b,l));b=r.rgba2float(a.texture2D(this.mosaicInfo.texture,
b)).subtract(new a.Float(.5)).multiply(f);b=a.clamp((new a.Float(.5)).subtract(b),new a.Float(0),new a.Float(1));return new a.Vec4(b)}_getPatternColor(b){const {halfWidth:f,normal:g,color:c,accumulatedDistance:e,patternSize:d,sampleAlphaOnly:p,tlbr:l}=b;b=d.y.multiply((new a.Float(2)).multiply(f).divide(d.x));b=a.fract(e.divide(b));const v=(new a.Float(.5)).multiply(g.y).add(new a.Float(.5));b=a.mix(l.xy,l.zw,new a.Vec2(v,b));b=a.texture2D(this.mosaicInfo.texture,b);null!=this.visualVariableColor&&
(b=a.ifElse(a.greaterThan(p,new a.Float(.5)),new a.Vec4(c.a),c));return b}vertex(b,f){const {segmentDirection:g,tlbr:c,bitset:e}=b,d=m.getLineVertexData(this,b),p=b.accumulatedDistance.divide(this.view.displayZoomFactor).add(a.dot(g,d.scaledOffset)),l=new a.Vec2(c.z.subtract(c.x),c.w.subtract(c.y)),v=c.divide(this.mosaicInfo.size.xyxy),w=r.getBit(e,t.bitsetLineIsSdf),B=r.getBit(e,t.bitsetGenericConsiderAlphaOnly),C=a.ifElse(a.greaterThan(w,new a.Float(.5)),this._getLineWidthRatio(b,d.scaledHalfWidth),
new a.Float(1));return{...d,tlbr:v,patternSize:l,accumulatedDistance:p,isSDF:w,sampleAlphaOnly:B,lineWidthRatio:C,...this.maybeRunHittest(b,f,d.halfWidth)}}fragment(b){const {color:f,opacity:g,isSDF:c}=b;var e=m.getLineAntialiasing(b,this.antialiasingControls.blur);const d=a.ifElse(a.greaterThan(c,new a.Float(.5)),this._getSDFAlpha(b),this._getPatternColor(b));e=f.multiply(g).multiply(e).multiply(d);return this.getFragmentOutput(e,b)}}h.__decorate([k.uniform(z.MosaicInfo)],u.prototype,"mosaicInfo",
void 0);h.__decorate([h.__param(0,k.input(n)),h.__param(1,k.input(y.BaseHittestVertexInput))],u.prototype,"vertex",null);q.TexturedLineFragmentInput=A;q.TexturedLineShader=u;q.TexturedLineVertexInput=n;Object.defineProperty(q,Symbol.toStringTag,{value:"Module"})});