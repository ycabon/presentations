// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define(function(){return{background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\ngl_FragColor \x3d u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\nvec3 v_pos \x3d u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\ngl_Position \x3d vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nlowp vec4 color \x3d texture2D(u_tex, v_uv);\ngl_FragColor \x3d color * u_opacity;\n}",
"bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position \x3d vec4(a_pos , 0.0, 1.0);\nv_uv \x3d a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\nreturn max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\nvec4 K \x3d vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p \x3d c.g \x3c c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q \x3d c.r \x3c p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d \x3d q.x - min(q.w, q.y);\nfloat e \x3d 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\nvec4 K \x3d vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p \x3d abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\nfloat vIn \x3d rgb2v(Cb);\nvec3 hsvTint \x3d rgb2hsv(Cs);\nvec3 hsvOut \x3d vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\nreturn hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\nreturn (Cb \x3d\x3d 0.0) ? 0.0 : (Cs \x3d\x3d 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\nreturn (Cb \x3d\x3d 1.0) ? 1.0 : (Cs \x3d\x3d 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\nreturn (Cs \x3d\x3d 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\nif (Cs \x3c\x3d 0.5) {\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n}\nif (Cb \x3c\x3d 0.25) {\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n}\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\nreturn min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\nreturn max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\nreturn dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\nreturn maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\nfloat lum \x3d lumv3(color);\nfloat mincol \x3d minv3(color);\nfloat maxcol \x3d maxv3(color);\nif (mincol \x3c 0.0) {\ncolor \x3d lum + ((color - lum) * lum) / (lum - mincol);\n}\nif (maxcol \x3e 1.0) {\ncolor \x3d lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n}\nreturn color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\nfloat lbase \x3d lumv3(cbase);\nfloat llum \x3d lumv3(clum);\nfloat ldiff \x3d llum - lbase;\nvec3 color \x3d cbase + vec3(ldiff);\nreturn clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\nfloat minbase \x3d minv3(cbase);\nfloat sbase \x3d satv3(cbase);\nfloat ssat \x3d satv3(csat);\nvec3 color;\nif (sbase \x3e 0.0) {\ncolor \x3d (cbase - minbase) * ssat / sbase;\n} else {\ncolor \x3d vec3(0.0);\n}\nreturn setLum(color, clum);\n}\nvoid main() {\nvec4 src \x3d texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\ngl_FragColor \x3d src *  u_opacity;\n#else\nvec4 dst \x3d texture2D(u_backbufferTexture, v_uv);\nvec3 Cs \x3d src.a \x3d\x3d 0.0 ? src.rgb : vec3(src.rgb / src.a);\nvec3 Cb \x3d dst.a \x3d\x3d 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\nfloat as \x3d u_opacity * src.a;\nfloat ab \x3d dst.a;\n#ifdef DESTINATION_OVER\ngl_FragColor \x3d vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n#endif\n#ifdef SOURCE_IN\nvec4 color \x3d vec4(as * Cs * ab, as * ab);\nvec4 fadeColor \x3d (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor \x3d color + fadeColor;\n#endif\n#ifdef DESTINATION_IN\nvec4 color \x3d vec4(ab * Cb * as, ab * as);\nvec4 fadeColor \x3d (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor \x3d color + fadeColor;\n#endif\n#ifdef SOURCE_OUT\ngl_FragColor \x3d vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n#endif\n#ifdef DESTINATION_OUT\ngl_FragColor \x3d vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n#endif\n#ifdef SOURCE_ATOP\ngl_FragColor \x3d vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n#endif\n#ifdef DESTINATION_ATOP\ngl_FragColor \x3d vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n#endif\n#ifdef XOR\ngl_FragColor \x3d vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\nas * (1.0 - ab) + ab * (1.0 - as));\n#endif\n#ifdef MULTIPLY\ngl_FragColor \x3d vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\nas + ab * (1.0 - as));\n#endif\n#ifdef SCREEN\ngl_FragColor \x3d vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef OVERLAY\nvec3 f \x3d vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DARKEN\ngl_FragColor \x3d vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LIGHTER\ngl_FragColor \x3d vec4(as * Cs + ab * Cb, as + ab);\n#endif\n#ifdef LIGHTEN\ngl_FragColor \x3d vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_DODGE\nvec3 f \x3d clamp(vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b)), vec3(0.0), vec3(1.0));\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_BURN\nvec3 f \x3d vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HARD_LIGHT\nvec3 f \x3d vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SOFT_LIGHT\nvec3 f \x3d vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DIFFERENCE\ngl_FragColor \x3d vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef EXCLUSION\nvec3 f \x3d Cs + Cb - 2.0 * Cs * Cb;\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef INVERT\ngl_FragColor \x3d vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n#endif\n#ifdef VIVID_LIGHT\nvec3 f \x3d vec3(clamp(vividLight(Cb.r, Cs.r), 0.0, 1.0),\nclamp(vividLight(Cb.g, Cs.g), 0.0, 1.0),\nclamp(vividLight(Cb.b, Cs.b), 0.0, 1.0));\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HUE\nvec3 f \x3d setLumSat(Cs,Cb,Cb);\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SATURATION\nvec3 f \x3d setLumSat(Cb,Cs,Cb);\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR\nvec3 f \x3d setLum(Cs,Cb);\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LUMINOSITY\nvec3 f \x3d setLum(Cb,Cs);\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef PLUS\ngl_FragColor \x3d clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n#endif\n#ifdef MINUS\ngl_FragColor \x3d vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n#endif\n#ifdef AVERAGE\nvec3 f \x3d (Cb + Cs) / 2.0;\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef REFLECT\nvec3 f \x3d clamp(vec3(reflectBlend(Cb.r, Cs.r),\nreflectBlend(Cb.g, Cs.g),\nreflectBlend(Cb.b, Cs.b)), vec3(0.0), vec3(1.0));\ngl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#endif\n}",
"blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position \x3d vec4(a_position , 0.0, 1.0);\nv_uv \x3d (a_position + 1.0) / 2.0;\n}"},debug:{overlay:{"overlay.frag":"precision mediump float;\nvarying vec4 v_color;\nvoid main(void) {\ngl_FragColor \x3d v_color;\n}","overlay.vert":"attribute vec3 a_PositionAndFlags;\nuniform mat3 u_dvsMat3;\nuniform vec4 u_colors[4];\nuniform float u_opacities[4];\nvarying vec4 v_color;\nvoid main(void) {\nvec2 position \x3d a_PositionAndFlags.xy;\nfloat flags \x3d a_PositionAndFlags.z;\nint colorIndex \x3d int(mod(flags, 4.0));\nvec4 color;\nfor (int i \x3d 0; i \x3c 4; i++) {\ncolor \x3d u_colors[i];\nif (i \x3d\x3d colorIndex) {\nbreak;\n}\n}\nint opacityIndex \x3d int(mod(floor(flags / 4.0), 4.0));\nfloat opacity;\nfor (int i \x3d 0; i \x3c 4; i++) {\nopacity \x3d u_opacities[i];\nif (i \x3d\x3d opacityIndex) {\nbreak;\n}\n}\nv_color \x3d color * opacity;\ngl_Position \x3d vec4((u_dvsMat3 * vec3(position, 1.0)).xy, 0.0, 1.0);\n}"}},
dot:{dot:{"dot.frag":"precision mediump float;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nuniform highp float u_tileZoomFactor;\nvoid main()\n{\nfloat dist \x3d length(gl_PointCoord - vec2(.5, .5)) * 2.;\nfloat alpha \x3d smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\ngl_FragColor \x3d v_color * alpha;\n}","dot.vert":"precision highp float;\nattribute vec2 a_pos;\nuniform sampler2D u_texture;\nuniform highp mat3 u_dvsMat3;\nuniform highp float u_tileZoomFactor;\nuniform highp float u_dotSize;\nuniform highp float u_pixelRatio;\nvarying vec2 v_pos;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nconst float EPSILON \x3d 0.000001;\nvoid main()\n{\nmat3 tileToTileTexture \x3d mat3(  1., 0., 0.,\n0., -1., 0.,\n0., 1., 1.  );\nvec3 texCoords \x3d tileToTileTexture * vec3(a_pos.xy / 512., 1.);\nv_color \x3d texture2D(u_texture, texCoords.xy);\nfloat smoothEdgeWidth \x3d max(u_dotSize / 2., 1.) ;\nfloat z \x3d 0.;\nz +\x3d 2.0 * step(v_color.a, EPSILON);\ngl_PointSize \x3d (smoothEdgeWidth + u_dotSize);\ngl_Position \x3d vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\nv_dotRatio \x3d u_dotSize / gl_PointSize;\nv_invEdgeRatio \x3d -1. / ( smoothEdgeWidth / gl_PointSize );\ngl_PointSize  *\x3d (u_pixelRatio * u_tileZoomFactor);\n}"}},
filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\nfloat b \x3d 1.0 / 6.0;\nfloat v2 \x3d v * v;\nfloat v3 \x3d v2 * v;\nfloat w0 \x3d b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\nfloat w1 \x3d b * (3.0 * v3  - 6.0 * v2 + 4.0);\nfloat w2 \x3d b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\nfloat w3 \x3d b * v3;\nreturn vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\nvec4 w \x3d computeWeights(v);\nfloat g0 \x3d w.x + w.y;\nfloat g1 \x3d w.z + w.w;\nfloat h0 \x3d 1.0 - (w.y / g0) + v;\nfloat h1 \x3d 1.0 + (w.w / g1) - v;\nreturn vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 eX \x3d vec2(1.0 / texSize.x, 0.0);\nvec2 eY \x3d vec2(0.0, 1.0 / texSize.y);\nvec2 texel \x3d coords * texSize - 0.5;\nvec3 hgX \x3d bicubicOffsetsAndWeights(fract(texel).x).xyz;\nvec3 hgY \x3d bicubicOffsetsAndWeights(fract(texel).y).xyz;\nvec2 coords10 \x3d coords + hgX.x * eX;\nvec2 coords00 \x3d coords - hgX.y * eX;\nvec2 coords11 \x3d coords10 + hgY.x * eY;\nvec2 coords01 \x3d coords00 + hgY.x * eY;\ncoords10 \x3d coords10 - hgY.y * eY;\ncoords00 \x3d coords00 - hgY.y * eY;\nvec4 color00 \x3d texture2D(sampler, coords00);\nvec4 color10 \x3d texture2D(sampler, coords10);\nvec4 color01 \x3d texture2D(sampler, coords01);\nvec4 color11 \x3d texture2D(sampler, coords11);\ncolor00 \x3d mix(color00, color01, hgY.z);\ncolor10 \x3d mix(color10, color11, hgY.z);\ncolor00 \x3d mix(color00, color10, hgX.z);\nreturn color00;\n}",
"bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 texelStart \x3d floor(coords * texSize);\nvec2 coord0 \x3d texelStart / texSize;\nvec2 coord1 \x3d (texelStart +  vec2(1.0, 0.0)) / texSize;\nvec2 coord2 \x3d (texelStart +  vec2(0.0, 1.0)) / texSize;\nvec2 coord3 \x3d (texelStart +  vec2(1.0, 1.0)) / texSize;\nvec4 color0 \x3d texture2D(sampler, coord0);\nvec4 color1 \x3d texture2D(sampler, coord1);\nvec4 color2 \x3d texture2D(sampler, coord2);\nvec4 color3 \x3d texture2D(sampler, coord3);\nvec2 blend \x3d fract(coords * texSize);\nvec4 color01 \x3d mix(color0, color1, blend.x);\nvec4 color23 \x3d mix(color2, color3, blend.x);\nvec4 color \x3d mix(color01, color23, blend.y);\n#ifdef NNEDGE\nfloat alpha \x3d floor(color0.a * color1.a * color2.a * color3.a + 0.5);\ncolor \x3d color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\n#endif\nreturn color;\n}",
"epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\nvec2 invSize \x3d 1.0 / texSize;\nvec2 texel \x3d coords * texSize;\nvec2 texel_i \x3d floor(texel);\nvec2 texel_frac \x3d fract(texel);\nvec4 colorP \x3d texture2D(sampler, texel_i * invSize);\nvec4 colorP1 \x3d vec4(colorP);\nvec4 colorP2 \x3d vec4(colorP);\nvec4 colorP3 \x3d vec4(colorP);\nvec4 colorP4 \x3d vec4(colorP);\nvec4 colorA \x3d texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\nvec4 colorB \x3d texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\nvec4 colorC \x3d texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\nvec4 colorD \x3d texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\nif (colorC \x3d\x3d colorA \x26\x26 colorC !\x3d colorD \x26\x26 colorA !\x3d colorB) {\ncolorP1 \x3d colorA;\n}\nif (colorA \x3d\x3d colorB \x26\x26 colorA !\x3d colorC \x26\x26 colorB !\x3d colorD) {\ncolorP2 \x3d colorB;\n}\nif (colorD \x3d\x3d colorC \x26\x26 colorD !\x3d colorB \x26\x26 colorC !\x3d colorA) {\ncolorP3 \x3d colorC;\n}\nif (colorB \x3d\x3d colorD \x26\x26 colorB !\x3d colorA \x26\x26 colorD !\x3d colorC) {\ncolorP4 \x3d colorD;\n}\nvec4 colorP12 \x3d mix(colorP1, colorP2, texel_frac.x);\nvec4 colorP34 \x3d mix(colorP1, colorP2, texel_frac.x);\nreturn mix(colorP12, colorP34, texel_frac.y);\n}"},
fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include \x3cmaterials/utils.glsl\x3e\nvoid main()\n{\n#ifdef DELTA\nvec4 texel \x3d texture2D(u_sourceTexture, v_texcoord);\nvec4 data0 \x3d texture2D(u_maskTexture, v_texcoord);\nfloat flags \x3d data0.r * 255.0;\nfloat groupMinZoom \x3d data0.g * 255.0;\nfloat wouldClip \x3d step(groupMinZoom, u_zoomLevel);\nfloat direction \x3d wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\nfloat dt \x3d u_timeDelta / max(u_animationTime, 0.0001);\nvec4 nextState \x3d vec4(texel + direction * dt);\ngl_FragColor \x3d  vec4(nextState);\n#elif defined(UPDATE)\nvec4 texel \x3d texture2D(u_sourceTexture, v_texcoord);\ngl_FragColor \x3d texel;\n#endif\n}",
"integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord \x3d a_pos;\ngl_Position \x3d vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},heatmap:{heatmapResolve:{"heatmapResolve.frag":"precision highp float;\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\n#define COMPRESSION_FACTOR 4.0\n#else\n#define COMPRESSION_FACTOR 1.0\n#endif\nuniform sampler2D u_texture;\nuniform sampler2D u_gradient;\nuniform vec2 u_densityMinAndInvRange;\nuniform float u_densityNormalization;\nvarying vec2 v_uv;\nvoid main() {\nvec4 data \x3d texture2D(u_texture, v_uv);\nfloat density \x3d data.r * COMPRESSION_FACTOR;\ndensity *\x3d u_densityNormalization;\ndensity \x3d (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\nvec4 color \x3d texture2D(u_gradient, vec2(density, 0.5));\ngl_FragColor \x3d vec4(color.rgb * color.a, color.a);\n}",
"heatmapResolve.vert":"precision highp float;\nattribute vec2 a_pos;\nvarying vec2 v_uv;\nvoid main() {\nv_uv \x3d a_pos;\ngl_Position \x3d vec4(a_pos * 2.0 - 1.0, 1., 1.);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump float u_sigma;\nuniform sampler2D u_texture;\nmediump float gauss1(mediump vec2 dir) {\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\nreturn u_channelSelector * sample;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\nmediump float w \x3d gauss1(i * u_direction.xy);\ntot +\x3d selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\nweight +\x3d w;\n}\nvoid main(void) {\nmediump float tot \x3d 0.0;\nmediump float weight \x3d 0.0;\naccumGauss1(-5.0, tot, weight);\naccumGauss1(-4.0, tot, weight);\naccumGauss1(-3.0, tot, weight);\naccumGauss1(-2.0, tot, weight);\naccumGauss1(-1.0, tot, weight);\naccumGauss1(0.0, tot, weight);\naccumGauss1(1.0, tot, weight);\naccumGauss1(2.0, tot, weight);\naccumGauss1(3.0, tot, weight);\naccumGauss1(4.0, tot, weight);\naccumGauss1(5.0, tot, weight);\ngl_FragColor \x3d vec4(0.0, 0.0, 0.0, tot / weight);\n}",
"highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump float u_sigma;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\nmediump float y \x3d texture2D(u_texture, v_texcoord)[3];\nconst mediump float y0 \x3d 0.5;\nmediump float m0 \x3d 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\nmediump float d \x3d (y - y0) / m0;\nreturn d;\n}\nmediump vec4 shade(mediump float d) {\nmediump float mappedDistance \x3d (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\nmappedDistance \x3d clamp(mappedDistance, 0.0, 1.0);\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\nmediump float d \x3d estimateDistance();\ngl_FragColor \x3d shade(d);\n}",
"textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\ngl_Position \x3d vec4(a_position, 0.0, 1.0);\nv_texcoord \x3d a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor \x3d 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\nlowp vec2 uvn \x3d uv * 2.0 - 1.0;\nif (uvn.x \x3d\x3d 0.0 \x26\x26 uvn.y \x3d\x3d 0.0) {\nreturn vec2(0.5, 0.5);\n}\nlowp float theta \x3d atan(uvn.y, uvn.x);\nlowp float r \x3d pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\nlowp vec4 color \x3d texture2D(u_readbackTexture, barrel(v_texCoord));\ncolor \x3d (color + (1.0 - color.a) * u_background);\nlowp float mask \x3d u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\ncolor *\x3d mask;\nlowp vec4 overlayColor \x3d u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\ngl_FragColor \x3d overlayColor + (1.0 - overlayColor.a) * color;\n}",
"magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\nv_texCoord \x3d a_pos;\ngl_Position \x3d vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D filterFlags;\nuniform highp sampler2D animation;\nuniform highp sampler2D gpgpu;\nuniform highp sampler2D visualVariableData;\nuniform highp sampler2D dataDriven0;\nuniform highp sampler2D dataDriven1;\nuniform highp sampler2D dataDriven2;\nuniform float size;\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\nhighp vec3  texel \x3d unpackDisplayIdTexel(id);\nhighp float u32 \x3d float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\nhighp float col \x3d mod(u32, size);\nhighp float row \x3d (u32 - col) / size;\nhighp float u \x3d col / size;\nhighp float v \x3d row / size;\nreturn vec2(u, v);\n}\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(size));\n}\nhighp vec4 getFilterData(in highp vec3 id) {\nvec2 coords \x3d getAttributeDataCoords(id);\nreturn texture2D(filterFlags, coords);\n}\nhighp vec4 getAnimation(in highp vec3 id) {\nhighp vec2 coords \x3d getAttributeDataCoords(id);\nreturn texture2D(animation, coords);\n}\nhighp vec4 getVisualVariableData(in highp vec3 id) {\nhighp vec2 coords \x3d getAttributeDataCoords(id);\nreturn texture2D(visualVariableData, coords);\n}\nhighp vec4 getDataDriven0(in highp vec3 id) {\nhighp vec2 coords \x3d getAttributeDataCoords(id);\nreturn texture2D(dataDriven0, coords);\n}\nhighp vec4 getDataDriven1(in highp vec3 id) {\nhighp vec2 coords \x3d getAttributeDataCoords(id);\nreturn texture2D(dataDriven1, coords);\n}\nhighp vec4 getGPGPU(in highp vec3 id) {\nhighp vec2 coords \x3d getAttributeDataCoords(id);\nreturn texture2D(gpgpu, coords);\n}\nhighp vec4 getDataDriven2(in highp vec3 id) {\nhighp vec2 coords \x3d getAttributeDataCoords(id);\nreturn texture2D(dataDriven2, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\nbool isMagic \x3d v.x \x3d\x3d 255.0 \x26\x26 v.y \x3d\x3d 255.0;\nif (isMagic) {\nreturn NAN_MAGIC_NUMBER;\n}\nreturn (v.x + v.y * float(0x100)) - 32768.0;\n}",
"barycentric.glsl":"float inTriangle(vec3 bary) {\nvec3 absBary \x3d abs(bary);\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\n}\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\nmat3 xyToBarycentricMat3 \x3d mat3(\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\n);\nfloat A2 \x3d v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\n}",
"constants.glsl":"const float C_DEG_TO_RAD \x3d 3.14159265359 / 180.0;\nconst float C_256_TO_RAD \x3d 3.14159265359 / 128.0;\nconst float C_RAD_TO_DEG \x3d 180.0 / 3.141592654;\nconst float POSITION_PRECISION \x3d 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION \x3d 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO \x3d 1.0;\nconst float THIN_LINE_WIDTH_FACTOR \x3d 1.1;\nconst float THIN_LINE_HALF_WIDTH \x3d 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING \x3d 1.0 / 4.0;\nconst float OFFSET_PRECISION \x3d 1.0 / 8.0;\nconst float OUTLINE_SCALE \x3d 1.0 / 5.0;\nconst float SDF_FONT_SIZE \x3d 24.0;\nconst float MAX_SDF_DISTANCE \x3d 8.0;\nconst float PLACEMENT_PADDING \x3d 8.0;\nconst float EPSILON \x3d 0.00001;\nconst float EPSILON_HITTEST \x3d 0.05;\nconst int MAX_FILTER_COUNT \x3d 2;\nconst int ATTR_VV_SIZE \x3d 0;\nconst int ATTR_VV_COLOR \x3d 1;\nconst int ATTR_VV_OPACITY \x3d 2;\nconst int ATTR_VV_ROTATION \x3d 3;\nconst highp float NAN_MAGIC_NUMBER \x3d 1e-30;\nconst int BITSET_GENERIC_LOCK_COLOR \x3d 1;\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY \x3d 4;\nconst int BITSET_MARKER_ALIGNMENT_MAP \x3d 0;\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE \x3d 2;\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY \x3d 3;\nconst int BITSET_TYPE_FILL_OUTLINE \x3d 0;\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET \x3d 2;\nconst int BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR \x3d 3;\nconst int BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR \x3d 5;\nconst int BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR \x3d 6;\nconst int BITSET_LINE_SCALE_DASH \x3d 2;",
fill:{"common.glsl":"#include \x3cmaterials/symbologyTypeUtils.glsl\x3e\n#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_sampleAlphaOnly;\n#endif\n#if SYMBOLOGY_TYPE \x3d\x3d SYMBOLOGY_TYPE_DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying highp vec3 v_id;\nvarying lowp vec4 v_color;\nvarying lowp float v_opacity;\nvarying mediump vec4 v_aux1;\n#ifdef PATTERN\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nvarying lowp float v_isOutline;\n#endif\n#if SYMBOLOGY_TYPE \x3d\x3d SYMBOLOGY_TYPE_DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif",
"fill.frag":"precision highp float;\n#include \x3cmaterials/constants.glsl\x3e\n#include \x3cmaterials/utils.glsl\x3e\n#include \x3cmaterials/fill/common.glsl\x3e\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#if SYMBOLOGY_TYPE \x3d\x3d SYMBOLOGY_TYPE_DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#include \x3cmaterials/shared/line/common.glsl\x3e\n#include \x3cmaterials/shared/line/line.frag\x3e\nlowp vec4 drawLine() {\nfloat v_lineWidth \x3d v_aux1.x;\nvec2  v_normal    \x3d v_aux1.yz;\nLineData inputs \x3d LineData(\nv_color,\nv_normal,\nv_lineWidth,\nv_opacity,\nv_id\n);\nreturn shadeLine(inputs);\n}\n#endif\nlowp vec4 drawFill() {\nlowp vec4 out_color \x3d vec4(0.);\n#ifdef HITTEST\nout_color \x3d v_color;\n#elif defined(PATTERN)\nmediump vec4 v_tlbr \x3d v_aux1;\nmediump vec2 normalizedTextureCoord \x3d mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos \x3d mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color \x3d texture2D(u_texture, samplePos);\nif (v_sampleAlphaOnly \x3e 0.5) {\ncolor.rgb \x3d vec3(color.a);\n}\nout_color \x3d v_opacity * v_color * color;\n#elif SYMBOLOGY_TYPE \x3d\x3d SYMBOLOGY_TYPE_DOT_DENSITY \x26\x26 !defined(HIGHLIGHT)\nvec4 textureThresholds0 \x3d texture2D(u_dotTextures[0], v_dotTextureCoords);\nvec4 textureThresholds1 \x3d texture2D(u_dotTextures[1], v_dotTextureCoords);\nvec4 difference0 \x3d v_dotThresholds[0] - textureThresholds0;\nvec4 difference1 \x3d v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\nvec4 isPositive0 \x3d step(0.0, difference0);\nvec4 isPositive1 \x3d step(0.0, difference1);\nfloat weightSum \x3d dot(isPositive0, difference0) + dot(isPositive1, difference1);\nfloat lessThanEqZero \x3d step(weightSum, 0.0);\nfloat greaterThanZero \x3d 1.0 - lessThanEqZero ;\nfloat divisor \x3d (weightSum + lessThanEqZero);\nvec4 weights0 \x3d difference0 * isPositive0 / divisor;\nvec4 weights1 \x3d difference1 * isPositive1 / divisor;\nvec4 dotColor \x3d u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\nvec4 preEffectColor \x3d greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\nfloat diffMax \x3d max(max4(difference0), max4(difference1));\nfloat lessThanZero \x3d step(diffMax, 0.0);\nfloat greaterOrEqZero \x3d 1.0 - lessThanZero;\nvec4 isMax0 \x3d step(diffMax, difference0);\nvec4 isMax1 \x3d step(diffMax, difference1);\nvec4 dotColor \x3d u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\nvec4 preEffectColor \x3d greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\nout_color \x3d preEffectColor;\n#else\nout_color \x3d v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\nout_color.a \x3d 1.0;\n#endif\nreturn out_color;\n}\nvoid main() {\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nif (v_isOutline \x3e 0.5) {\ngl_FragColor \x3d drawLine();\n} else {\ngl_FragColor \x3d drawFill();\n}\n#else\ngl_FragColor \x3d drawFill();\n#endif\n}",
"fill.vert":"#include \x3cmaterials/symbologyTypeUtils.glsl\x3e\n#define PACKED_LINE\nprecision highp float;\nattribute float a_bitset;\n#if SYMBOLOGY_TYPE \x3d\x3d SYMBOLOGY_TYPE_DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color \x3d vec4(0.0, 0.0, 0.0, 1.0);\nvec2 a_zoomRange \x3d vec2(0.0, 10000.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_aux2;\nattribute vec4 a_aux3;\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\nattribute vec4 a_aux1;\nattribute vec2 a_zoomRange;\n#else\nvec2 a_zoomRange \x3d vec2(0.0, 10000.0);\n#endif\n#endif\nuniform vec2 u_tileOffset;\nuniform vec2 u_maxIntNumOfCrossing;\n#include \x3cutil/encoding.glsl\x3e\n#include \x3cmaterials/vcommon.glsl\x3e\n#include \x3cmaterials/fill/common.glsl\x3e\n#include \x3cmaterials/fill/hittest.glsl\x3e\nconst float INV_SCALE_COMPRESSION_FACTOR \x3d 1.0 / 128.0;\nconst float MAX_REPRESENTABLE_INT \x3d 16777216.0;\n#if SYMBOLOGY_TYPE \x3d\x3d SYMBOLOGY_TYPE_DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#include \x3cmaterials/shared/line/common.glsl\x3e\n#include \x3cmaterials/shared/line/line.vert\x3e\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\nLineData outputs \x3d buildLine(\nout_pos,\na_id,\na_pos,\na_color,\n(a_aux3.xy - 128.) / 16.,\n(a_aux3.zw - 128.) / 16.,\n0.,\na_aux2.z / 16.,\na_bitset,\nvec4(0.),\nvec2(0.),\na_aux2.w / 16.\n);\nv_id      \x3d outputs.id;\nv_opacity \x3d outputs.opacity;\nv_aux1    \x3d vec4(outputs.lineHalfWidth, outputs.normal, 0.);\nout_color \x3d outputs.color;\n}\n#endif\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\nfloat a_bitSet \x3d a_bitset;\nout_color \x3d getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity \x3d getOpacity();\nv_id      \x3d norm(a_id);\n#if SYMBOLOGY_TYPE \x3d\x3d SYMBOLOGY_TYPE_DOT_DENSITY\nmat3 tileToTileNormalized \x3d mat3(  2. / 512.,  0.,  0.,\n0., -2. / 512.,  0.,\n-1.,  1.,  1.  );\nout_pos   \x3d tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\n#else\nout_pos   \x3d u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n#endif\n#ifdef PATTERN\nvec4  a_tlbr   \x3d a_aux1;\nfloat a_width  \x3d a_aux2.x;\nfloat a_height \x3d a_aux2.y;\nvec2  a_offset \x3d a_aux2.zw;\nvec2  a_scale  \x3d a_aux3.xy;\nfloat a_angle  \x3d a_aux3.z;\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR) \x3e 0.5) {\na_width *\x3d INV_SCALE_COMPRESSION_FACTOR;\n}\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR) \x3e 0.5) {\na_height *\x3d INV_SCALE_COMPRESSION_FACTOR;\n}\nvec2 scale \x3d INV_SCALE_COMPRESSION_FACTOR * a_scale;\nfloat width \x3d u_zoomFactor * a_width * scale.x;\nfloat height \x3d u_zoomFactor * a_height * scale.y;\nfloat angle \x3d C_256_TO_RAD * a_angle;\nfloat sinA \x3d sin(angle);\nfloat cosA \x3d cos(angle);\nfloat dx \x3d 0.0;\nfloat dy \x3d 0.0;\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) \x3e 0.5) {\nfloat id \x3d rgba2float(vec4(a_id, 0.0));\ndx \x3d rand(vec2(id, 0.0));\ndy \x3d rand(vec2(0.0, id));\n}\nmat3 patternMatrix \x3d mat3(cosA / width, sinA / height, 0,\n-sinA / width, cosA / height, 0,\ndx,            dy,           1);\nvec2 patternSize \x3d vec2(a_width, a_height);\nvec2 numPatternsPerMaxInt \x3d vec2(MAX_REPRESENTABLE_INT) / patternSize;\nvec2 maxIntCrossingOffsetCorrection \x3d patternSize * fract(u_maxIntNumOfCrossing * numPatternsPerMaxInt);\nvec2 tileOffset \x3d u_tileOffset + maxIntCrossingOffsetCorrection - 0.5 * patternSize;\ntileOffset \x3d vec2(tileOffset.x * cosA - tileOffset.y * sinA, tileOffset.x * sinA + tileOffset.y * cosA);\ntileOffset \x3d mod(tileOffset, patternSize);\nvec2 symbolOffset \x3d u_zoomFactor * scale * vec2(a_offset - tileOffset) / vec2(width, height);\nv_tileTextureCoord \x3d (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\nv_aux1 \x3d a_tlbr / u_mosaicSize.xyxy;\nv_sampleAlphaOnly \x3d getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\nif (getBit(a_bitSet, BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR) \x3e 0.5) {\n#ifdef VV_COLOR\nv_sampleAlphaOnly *\x3d (1.0 - float(isNan(VV_ADATA[ATTR_VV_COLOR]))) * (1.0 - getBit(a_bitSet, BITSET_GENERIC_LOCK_COLOR));\n#else\nv_sampleAlphaOnly \x3d 0.0;\n#endif\n}\n#elif SYMBOLOGY_TYPE \x3d\x3d SYMBOLOGY_TYPE_DOT_DENSITY\nvec4 ddAttributeData0 \x3d getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\nvec4 ddAttributeData1 \x3d getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\nfloat size \x3d u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\nv_dotThresholds[0] \x3d dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\nv_dotThresholds[1] \x3d dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\nv_dotTextureCoords \x3d (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n}\n#ifdef HITTEST\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) \x3e 0.5) {\nout_pos \x3d vec3(0., 0., 2.);\nreturn;\n}\n#endif\nhittestFill(out_color, out_pos);\ngl_PointSize \x3d 1.0;\n}\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\nv_isOutline \x3d getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\nif (v_isOutline \x3e 0.5) {\ndrawLine(out_color, out_pos);\n} else {\ndrawFill(out_color, out_pos);\n}\n}\n#else\n#define draw drawFill\n#endif\nvoid main()\n{\nINIT;\nhighp vec3 pos  \x3d vec3(0.);\nhighp vec4 color  \x3d vec4(0.);\ndraw(color, pos);\nv_color \x3d color;\ngl_Position \x3d vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}",
"hittest.glsl":"#ifdef HITTEST\n#include \x3cmaterials/hittest/common.glsl\x3e\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nvoid hittestFill(\nout lowp vec4 out_color,\nout highp vec3 out_pos\n) {\nvec3 pos        \x3d u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\nvec3 pos1       \x3d u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\nvec3 pos2       \x3d u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\nfloat hittestDist \x3d u_hittestDist;\nfloat dist \x3d distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\nout_pos \x3d vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif (dist \x3c 0. || dist \x3e\x3d hittestDist) {\nout_pos.z +\x3d 2.0;\n}\nout_color \x3d vec4(1. / 255., 0, 0, dist \x3d\x3d 0. ? (1. / 255.) : 0.);\n}\n#endif"},
hittest:{"common.glsl":"#ifdef HITTEST\nuniform float hittestDist;\nuniform highp vec2 hittestPos;\nfloat projectScalar(vec2 a, vec2 b) {\nreturn dot(a, normalize(b));\n}\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\nvec2 L \x3d p2 - p1;\nvec2 A \x3d p0 - p1;\nfloat projAL \x3d projectScalar(A, L);\nfloat t \x3d clamp(projAL / length(L), 0., 1.);\nreturn distance(p0, p1 + t * (p2 - p1));\n}\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\nfloat dist \x3d distance(pos, vec3(hittestPos, 1.));\nout_pos \x3d vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif ((dist - size) \x3e hittestDist) {\nout_pos.z +\x3d 2.0;\n}\nout_color \x3d vec4(1. / 255., 0, 0, (dist - size) \x3c 0. ? (1. / 255.) : 0.);\n}\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\nreturn inTriangle(xyToBarycentric(p, a, b, c));\n}\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\nvec2 ba \x3d b - a;\nvec2 ca \x3d c - a;\nfloat crossProduct \x3d ba.x * ca.y - ca.x * ba.y;\nbool isParallel \x3d crossProduct \x3c EPSILON_HITTEST \x26\x26 crossProduct \x3e -EPSILON_HITTEST;\nif (isParallel) {\nreturn -1.;\n}\nif (intersectPointTriangleBary(p.xy, a, b, c) \x3d\x3d 1.) {\nreturn 0.;\n}\nfloat distAB \x3d distPointSegment(p, a, b);\nfloat distBC \x3d distPointSegment(p, b, c);\nfloat distCA \x3d distPointSegment(p, c, a);\nreturn min(min(distAB, distBC), distCA);\n}\n#endif"},
icon:{"common.glsl":"#include \x3cutil/encoding.glsl\x3e\nuniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nuniform lowp sampler2D u_texture;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif\n#ifdef SDF\nvec4 getColor(vec2 v_size, vec2 v_tex) {\n#ifdef HITTEST\nlowp vec4 fillPixelColor \x3d vec4(1.0);\n#else\nlowp vec4 fillPixelColor \x3d v_color;\n#endif\nfloat d \x3d 0.5 - rgba2float(texture2D(u_texture, v_tex));\nfloat size \x3d max(v_size.x, v_size.y);\nfloat dist \x3d d * size * SOFT_EDGE_RATIO * v_distRatio;\nfillPixelColor *\x3d clamp(0.5 - dist, 0.0, 1.0);\nfloat outlineWidth \x3d v_outlineWidth;\n#ifdef HIGHLIGHT\noutlineWidth \x3d max(outlineWidth, 4.0 * v_isThin);\n#endif\nif (outlineWidth \x3e 0.25) {\nlowp vec4 outlinePixelColor \x3d v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\nfloat clampedOutlineSize \x3d min(outlineWidth, size);\noutlinePixelColor *\x3d clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n}\nreturn v_opacity * fillPixelColor;\n}\n#else\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\nlowp vec4 texColor \x3d texture2D(u_texture, v_tex);\nreturn v_opacity * texColor * v_color;\n}\n#endif",
heatmapAccumulate:{"common.glsl":"varying lowp vec4 v_hittestResult;\nvarying mediump vec2 v_offsetFromCenter;\nvarying highp float v_fieldValue;","heatmapAccumulate.frag":"precision mediump float;\n#include \x3cmaterials/icon/heatmapAccumulate/common.glsl\x3e\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\n#define COMPRESSION_FACTOR 0.25\n#else\n#define COMPRESSION_FACTOR 1.0\n#endif\nuniform lowp sampler2D u_texture;\nvoid main() {\n#ifdef HITTEST\ngl_FragColor \x3d v_hittestResult;\n#else\nfloat radius \x3d length(v_offsetFromCenter);\nfloat shapeWeight \x3d step(radius, 1.0);\nfloat oneMinusRadiusSquared \x3d 1.0 - radius * radius;\nfloat kernelWeight \x3d oneMinusRadiusSquared * oneMinusRadiusSquared;\ngl_FragColor \x3d vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\n#endif\n}",
"heatmapAccumulate.vert":"precision highp float;\nattribute vec2 a_vertexOffset;\nvec4 a_color \x3d vec4(0.0);\nvec2 a_zoomRange \x3d vec2(0.0, 10000.0);\nuniform float u_radius;\nuniform float u_isFieldActive;\n#include \x3cmaterials/vcommon.glsl\x3e\n#include \x3cmaterials/hittest/common.glsl\x3e\n#include \x3cmaterials/icon/heatmapAccumulate/common.glsl\x3e\nvoid main() {\nfloat filterFlags \x3d getFilterFlags();\n#ifdef HITTEST\nhighp vec4 out_hittestResult \x3d vec4(0.);\nhighp vec3 out_pos \x3d vec3(0.);\nvec3 pos \x3d u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\nv_hittestResult \x3d out_hittestResult;\ngl_PointSize \x3d 1.;\ngl_Position \x3d vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\nv_offsetFromCenter \x3d sign(a_vertexOffset);\nv_fieldValue \x3d getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\nvec3 centerPos \x3d u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\nvec3 vertexPos \x3d centerPos + u_displayViewMat3 * vec3(v_offsetFromCenter, 0.0) * u_radius;\ngl_Position \x3d vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},
"hittest.glsl":"#ifdef HITTEST\n#include \x3cmaterials/hittest/common.glsl\x3e\nattribute vec2 a_vertexOffset1;\nattribute vec2 a_vertexOffset2;\nattribute vec2 a_texCoords1;\nattribute vec2 a_texCoords2;\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\n}\nvoid hittestIcon(\ninout lowp vec4 out_color,\nout highp vec3 out_pos,\nin vec3 pos,\nin vec3 offset,\nin vec2 size,\nin float scaleFactor,\nin float isMapAligned\n) {\nout_pos \x3d vec3(getAttributeDataTextureCoords(a_id), 0.0);\nvec3 posBase \x3d u_viewMat3 * u_tileMat3  * pos;\nvec3 offset1 \x3d scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\nvec3 offset2 \x3d scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\nvec2 pos0    \x3d (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\nvec2 pos1    \x3d (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\nvec2 pos2    \x3d (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\nvec3 bary0 \x3d xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\nvec3 bary1 \x3d xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\nvec3 bary2 \x3d xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\nvec3 bary3 \x3d xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\nvec3 bary4 \x3d xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\nvec3 bary5 \x3d xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\nvec3 bary6 \x3d xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\nvec3 bary7 \x3d xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\nvec3 bary8 \x3d xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\nvec2 tex0 \x3d a_texCoords  / u_mosaicSize;\nvec2 tex1 \x3d a_texCoords1 / u_mosaicSize;\nvec2 tex2 \x3d a_texCoords2 / u_mosaicSize;\nfloat alphaSum \x3d 0.;\nalphaSum +\x3d inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\nalphaSum +\x3d inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\nalphaSum +\x3d inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\nalphaSum +\x3d inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\nalphaSum +\x3d inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\nalphaSum +\x3d inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\nalphaSum +\x3d inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\nalphaSum +\x3d inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\nout_pos.z +\x3d step(alphaSum, .05) * 2.0;\nout_color \x3d vec4(1. / 255., 0., 0., alphaSum / 255.);\n}\n#endif",
"icon.frag":"precision mediump float;\n#include \x3cmaterials/constants.glsl\x3e\n#include \x3cmaterials/utils.glsl\x3e\n#include \x3cmaterials/icon/common.glsl\x3e\nvoid main()\n{\n#ifdef HITTEST\nvec4 color \x3d v_color;\n#else\nvec4 color \x3d getColor(v_sizeTex.xy, v_sizeTex.zw);\n#endif\n#ifdef HIGHLIGHT\ncolor.a \x3d step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor \x3d color;\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\n#include \x3cmaterials/vcommon.glsl\x3e\n#include \x3cmaterials/icon/common.glsl\x3e\n#include \x3cmaterials/icon/hittest.glsl\x3e\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\n#ifdef VV_SIZE\nfloat f \x3d getSize(size.y) / size.y;\nfloat sizeFactor \x3d size.y / referenceSize;\nreturn getSize(referenceSize) / referenceSize;\n#else\nreturn 1.;\n#endif\n}\nvoid main()\n{\nINIT;\nfloat a_bitSet \x3d a_bitSetAndDistRatio.x;\nvec3  pos           \x3d vec3(a_pos * POSITION_PRECISION, 1.0);\nvec2  size          \x3d a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec3  offset        \x3d vec3(a_vertexOffset / 16.0, 0.);\nfloat outlineSize   \x3d a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\nfloat isMapAligned  \x3d getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nfloat referenceSize \x3d a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\nfloat scaleSymbolProportionally \x3d getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\nfloat scaleFactor               \x3d getMarkerScaleFactor(size, referenceSize);\nsize.xy     *\x3d scaleFactor;\noffset.xy   *\x3d scaleFactor;\noutlineSize *\x3d scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\nvec2 v_tex   \x3d a_texCoords / u_mosaicSize;\nfloat filterFlags \x3d getFilterFlags();\nv_color    \x3d getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity  \x3d getOpacity();\nv_id       \x3d norm(a_id);\nv_pos      \x3d u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\nv_sizeTex  \x3d vec4(size.xy, v_tex.xy);\n#ifdef SDF\nv_isThin   \x3d getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\n#ifdef VV_COLOR\nv_overridingOutlineColor \x3d v_isThin;\n#else\nv_overridingOutlineColor \x3d 0.0;\n#endif\nv_outlineWidth \x3d min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\nv_outlineColor \x3d a_outlineColor;\nv_distRatio \x3d a_bitSetAndDistRatio.y / 128.0;\n#endif\n#ifdef HITTEST\nhighp vec4 out_color \x3d vec4(0.);\nhighp vec3 out_pos   \x3d vec3(0.);\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\nv_color \x3d out_color;\ngl_PointSize \x3d 1.;\ngl_Position \x3d vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\ngl_Position \x3d vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},
label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include \x3cmaterials/text/text.frag\x3e","label.vert":"precision highp float;\n#include \x3cmaterials/vcommon.glsl\x3e\n#include \x3cmaterials/text/common.glsl\x3e\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHaloPass;\nuniform float u_isBackgroundPass;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\nfloat glyphAngle \x3d angle * 360.0 / 254.0;\nfloat mapAngle \x3d u_mapRotation * 360.0 / 254.0;\nfloat diffAngle \x3d min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\nfloat z \x3d 0.0;\nz +\x3d u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\nz +\x3d u_mapAligned * 2.0 * step(90.0, diffAngle);\nz +\x3d 2.0 * (1.0 - step(u_currentZoom, maxZoom));\nreturn z;\n}\nvoid main()\n{\nINIT;\nfloat groupMinZoom    \x3d getMinZoom();\nfloat glyphMinZoom    \x3d a_glyphData.x;\nfloat glyphMaxZoom    \x3d a_glyphData.y;\nfloat glyphAngle      \x3d a_glyphData.z;\nfloat a_isBackground  \x3d a_glyphData.w;\nfloat a_minZoom          \x3d max(groupMinZoom, glyphMinZoom);\nfloat a_placementPadding \x3d a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\nvec2  a_placementDir     \x3d unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\nfloat a_refSymbolSize    \x3d a_refSymbolAndPlacementOffset.y;\nfloat fontSize           \x3d a_texAndSize.z;\nfloat haloSize           \x3d a_texAndSize.w * OUTLINE_SCALE;\nvec2  vertexOffset \x3d a_vertexOffset * OFFSET_PRECISION;\nvec3  pos          \x3d vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat z            \x3d getZ(a_minZoom, glyphMaxZoom, glyphAngle);\nfloat fontScale    \x3d fontSize / SDF_FONT_SIZE;\nfloat halfSize     \x3d getSize(a_refSymbolSize) / 2.0;\nfloat animation    \x3d pow(getAnimationState(), vec4(2.0)).r;\nfloat isText \x3d 1.0 - a_isBackground;\nfloat isBackground \x3d u_isBackgroundPass * a_isBackground;\nvec4  nonHaloColor \x3d (isBackground + isText) * a_color;\nv_color     \x3d animation * ((1.0 - u_isHaloPass) * nonHaloColor + (u_isHaloPass * a_haloColor));\nv_opacity   \x3d 1.0;\nv_tex       \x3d a_texCoords / u_mosaicSize;\nv_edgeDistanceOffset \x3d u_isHaloPass * haloSize / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  \x3d 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\nvec2 placementOffset \x3d a_placementDir * (halfSize + a_placementPadding);\nvec3 glyphOffset     \x3d u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\nvec3 v_pos           \x3d vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\nfloat isHidden \x3d u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\nv_pos.z +\x3d 2.0 * isHidden;\ngl_Position \x3d vec4(v_pos, 1.0);\n#ifdef DEBUG\nv_color \x3d vec4(a_color.rgb, z \x3d\x3d 0.0 ? 1.0 : 0.645);\n#endif\n}"},
line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif\n#ifdef SDF\nvarying mediump float v_lineWidthRatio;\n#endif","hittest.glsl":"#include \x3cmaterials/hittest/common.glsl\x3e\n#ifdef HITTEST\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\nvec3 pos        \x3d u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\nvec3 pos1       \x3d u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\nvec3 pos2       \x3d u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\nvec3 outTextureCoords \x3d vec3(getAttributeDataTextureCoords(a_id), 0.0);\nfloat dist \x3d min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\nout_pos \x3d vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif (dist \x3e\x3d u_hittestDist) {\nout_pos.z +\x3d 2.0;\n}\nout_color \x3d vec4(1. / 255., 0, 0, dist \x3c\x3d 0. ? (1. / 255.) : 0.);\n}\n#endif",
"line.frag":"precision lowp float;\n#include \x3cutil/encoding.glsl\x3e\n#include \x3cmaterials/constants.glsl\x3e\n#include \x3cmaterials/symbologyTypeUtils.glsl\x3e\n#include \x3cmaterials/line/common.glsl\x3e\n#include \x3cmaterials/shared/line/common.glsl\x3e\n#include \x3cmaterials/shared/line/line.frag\x3e\n#ifdef HITTEST\nvoid main() {\ngl_FragColor \x3d v_color;\n}\n#else\nvoid main() {\nLineData inputs \x3d LineData(\nv_color,\nv_normal,\nv_lineHalfWidth,\nv_opacity,\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nv_tlbr,\nv_patternSize,\n#endif\n#ifdef SDF\nv_lineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance,\n#endif\n#endif\nv_id\n);\ngl_FragColor \x3d shadeLine(inputs);\n}\n#endif",
"line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\nattribute vec2 a_zoomRange;\n#include \x3cmaterials/vcommon.glsl\x3e\n#include \x3cmaterials/symbologyTypeUtils.glsl\x3e\n#include \x3cmaterials/line/common.glsl\x3e\n#include \x3cmaterials/line/hittest.glsl\x3e\n#include \x3cmaterials/shared/line/common.glsl\x3e\n#include \x3cmaterials/shared/line/line.vert\x3e\n#ifdef HITTEST\nvoid draw() {\nfloat aa        \x3d 0.5 * u_antialiasing;\nfloat a_halfWidth \x3d a_accumulatedDistanceAndHalfWidth.y / 16.;\nfloat a_cimHalfWidth \x3d a_aux.x / 16. ;\nvec2  a_offset \x3d a_offsetAndNormal.xy / 16.;\nfloat baseWidth \x3d getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\nfloat halfWidth \x3d getLineHalfWidth(baseWidth, aa);\nhighp vec3 pos  \x3d vec3(0.);\nv_color \x3d vec4(0.);\nhittestLine(v_color, pos, halfWidth);\ngl_PointSize \x3d 1.;\ngl_Position \x3d vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#else\nvoid draw()\n{\nhighp vec3 pos \x3d vec3(0.);\nLineData outputs \x3d buildLine(\npos,\na_id,\na_pos,\na_color,\na_offsetAndNormal.xy / 16.,\na_offsetAndNormal.zw / 16.,\na_accumulatedDistanceAndHalfWidth.x,\na_accumulatedDistanceAndHalfWidth.y / 16.,\na_segmentDirection.w,\na_tlbr,\na_segmentDirection.xy / 16.,\na_aux.x / 16.\n);\nv_id              \x3d outputs.id;\nv_color           \x3d outputs.color;\nv_normal          \x3d outputs.normal;\nv_lineHalfWidth   \x3d outputs.lineHalfWidth;\nv_opacity         \x3d outputs.opacity;\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nv_tlbr          \x3d outputs.tlbr;\nv_patternSize   \x3d outputs.patternSize;\n#endif\n#ifdef SDF\nv_lineWidthRatio \x3d outputs.lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance \x3d outputs.accumulatedDistance;\n#endif\n#endif\ngl_Position \x3d vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#endif\nvoid main() {\nINIT;\ndraw();\n}"},
pie:{"pie.common.glsl":"uniform float outlineWidth;\nuniform mediump float sectorThreshold;\nvarying vec3  v_id;\nvarying vec3  v_pos;\nvarying vec2  v_offset;\nvarying vec4  v_color;\nvarying float v_size;\nvarying float v_numOfEntries;\nvarying float v_maxSectorAngle;\nvarying vec2  v_filteredSectorToColorId[numberOfFields];\nvarying vec2  v_texCoords;\nvarying float v_outlineWidth;\nvarying float v_opacity;\nstruct FilteredChartInfo {\nfloat endSectorAngle;\nint colorId;\n};","pie.frag":"precision highp float;\n#include \x3cutil/atan2.glsl\x3e\n#include \x3cmaterials/constants.glsl\x3e\n#include \x3cmaterials/utils.glsl\x3e\n#include \x3cmaterials/pie/pie.common.glsl\x3e\nuniform lowp vec4 colors[numberOfFields];\nuniform lowp vec4 defaultColor;\nuniform lowp vec4 othersColor;\nuniform lowp vec4 outlineColor;\nuniform float donutRatio;\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[numberOfFields]) {\nmediump int colorIndex \x3d int(filteredSectorToColorId[index].y);\nreturn colors[colorIndex];\n}\nconst int OTHER_SECTOR_ID \x3d 255;\n#ifdef HITTEST\nvec4 getColor() {\nfloat distanceSize \x3d length(v_offset) * v_size;\nfloat donutSize \x3d donutRatio * v_size;\nfloat alpha \x3d step(donutSize, distanceSize) * (1.0 - step(v_size, distanceSize));\nreturn v_color;\n}\n#else\nvec4 getColor() {\nfloat angle \x3d 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\nif (angle \x3c 0.0) {\nangle +\x3d 360.0;\n} else if (angle \x3e 360.0) {\nangle \x3d mod(angle, 360.0);\n}\nint numOfEntries \x3d int(v_numOfEntries);\nfloat maxSectorAngle \x3d v_maxSectorAngle;\nlowp vec4 fillColor \x3d (maxSectorAngle \x3e 0.0 || sectorThreshold \x3e 0.0) ? othersColor : defaultColor;\nlowp vec4 prevColor \x3d vec4(0.0);\nlowp vec4 nextColor \x3d vec4(0.0);\nfloat startSectorAngle \x3d 0.0;\nfloat endSectorAngle \x3d 0.0;\nif (angle \x3c maxSectorAngle) {\nfor (int index \x3d 0; index \x3c numberOfFields; ++index) {\nstartSectorAngle \x3d endSectorAngle;\nendSectorAngle \x3d v_filteredSectorToColorId[index].x;\nif (endSectorAngle \x3e angle) {\nfillColor \x3d getSectorColor(index, v_filteredSectorToColorId);\nprevColor \x3d sectorThreshold !\x3d 0.0 \x26\x26 index \x3d\x3d 0 \x26\x26 abs(360.0 - maxSectorAngle) \x3c EPSILON ? othersColor :\ngetSectorColor(index \x3e 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\nnextColor \x3d sectorThreshold !\x3d 0.0 \x26\x26 abs(endSectorAngle - maxSectorAngle) \x3c EPSILON ? othersColor :\ngetSectorColor(index \x3c numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\nbreak;\n}\nif (index \x3d\x3d numOfEntries - 1) {\nbreak;\n}\n}\n} else {\nprevColor \x3d getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\nnextColor \x3d getSectorColor(0, v_filteredSectorToColorId);\nstartSectorAngle \x3d maxSectorAngle;\nendSectorAngle \x3d 360.0;\n}\nlowp vec4 outlineColor \x3d outlineColor;\nfloat offset \x3d length(v_offset);\nfloat distanceSize \x3d offset * v_size;\nif (startSectorAngle !\x3d 0.0 || endSectorAngle !\x3d 360.0) {\nfloat distanceToStartSector \x3d (angle - startSectorAngle);\nfloat distanceToEndSector \x3d (endSectorAngle - angle);\nfloat sectorThreshold \x3d 0.6;\nfloat beginSectorAlpha \x3d smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\nfloat endSectorAlpha \x3d smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\nif (endSectorAlpha \x3e 0.0) {\nfillColor \x3d mix(nextColor, fillColor, endSectorAlpha);\n} else if (beginSectorAlpha \x3e 0.0) {\nfillColor \x3d mix(prevColor, fillColor, beginSectorAlpha);\n}\n}\nfloat donutSize \x3d donutRatio * (v_size - v_outlineWidth);\nfloat endOfDonut \x3d donutSize - v_outlineWidth;\nfloat aaThreshold \x3d 0.75;\nfloat innerCircleAlpha \x3d endOfDonut - aaThreshold \x3e 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\nfloat outerCircleAlpha \x3d 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\nfloat circleAlpha \x3d innerCircleAlpha * outerCircleAlpha;\nfloat startOfOutline \x3d v_size - v_outlineWidth;\nif (startOfOutline \x3e 0.0 \x26\x26 v_outlineWidth \x3e 0.25) {\nfloat outlineFactor \x3d smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\nfloat innerLineFactor \x3d donutSize - aaThreshold \x3e 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\nfillColor \x3d mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\n}\nreturn v_opacity * circleAlpha * fillColor;\n}\n#endif\nvoid main()\n{\nvec4 color \x3d getColor();\n#ifdef highlight\ncolor.a \x3d step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor \x3d color;\n}",
"pie.vert":"#include \x3cmaterials/constants.glsl\x3e\n#include \x3cmaterials/utils.glsl\x3e\n#include \x3cmaterials/barycentric.glsl\x3e\n#include \x3cmaterials/vcommon.glsl\x3e\n#include \x3cmaterials/vv.glsl\x3e\n#include \x3cmaterials/attributeData.glsl\x3e\n#include \x3cmaterials/pie/pie.common.glsl\x3e\n#include \x3cmaterials/hittest/common.glsl\x3e\nattribute float a_bitSet;\nattribute vec2  a_offset;\nattribute vec2  a_texCoords;\nattribute vec2  a_size;\nattribute float a_referenceSize;\nattribute vec2  a_zoomRange;\nint filterValue(in float sectorAngle,\nin int currentIndex,\ninout FilteredChartInfo filteredInfo,\ninout vec2 filteredSectorToColorId[numberOfFields]) {\nif (sectorAngle \x3e sectorThreshold * 360.0) {\nfilteredInfo.endSectorAngle +\x3d sectorAngle;\nfilteredSectorToColorId[filteredInfo.colorId] \x3d vec2(filteredInfo.endSectorAngle, currentIndex);\n++filteredInfo.colorId;\n}\nreturn 0;\n}\nint filterValues(inout vec2 filteredSectorToColorId[numberOfFields],\ninout FilteredChartInfo filteredInfo,\nin float sectorAngles[numberOfFields]) {\nfor (int index \x3d 0; index \x3c numberOfFields; ++index) {\nfloat sectorValue \x3d sectorAngles[index];\nfilterValue(sectorValue, index, filteredInfo, filteredSectorToColorId);\n}\nreturn filteredInfo.colorId;\n}\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float a_referenceSize, in float bitSet) {\nvec2 outSize \x3d baseSize;\n#ifdef VV_SIZE\nfloat r \x3d getSize(a_referenceSize, currentScale) / a_referenceSize;\noutSize.xy *\x3d r;\noffset.xy *\x3d r;\nfloat scaleSymbolProportionally \x3d getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\noutlineSize *\x3d scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\nreturn outSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\nfloat isMapAligned \x3d getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nvec3  offset       \x3d vec3(in_offset, 0.0);\nreturn getMatrix(isMapAligned) * offset;\n}\nfloat filterNaNValues(in float value) {\nreturn value !\x3d NAN_MAGIC_NUMBER \x26\x26 value \x3e 0.0 ? value : 0.0;\n}\nvoid main()\n{\nINIT;\nvec2  a_size   \x3d a_size;\nvec2  a_offset \x3d a_offset / 16.0;\nfloat outlineSize \x3d outlineWidth;\nfloat a_bitSet \x3d a_bitSet;\nfloat a_referenceSize \x3d a_referenceSize;\nvec2 a_texCoords \x3d a_texCoords / 4.0;\nvec2 markerSize \x3d getMarkerSize(a_offset, a_size, outlineSize, a_referenceSize, a_bitSet);\nfloat filterFlags \x3d getFilterFlags();\nvec3  pos         \x3d vec3(a_pos / 10.0, 1.0);\nv_opacity      \x3d getOpacity();\nv_id           \x3d norm(a_id);\nv_pos          \x3d displayViewScreenMat3 * pos + getOffset(a_offset, a_bitSet);\nv_offset       \x3d sign(a_texCoords - 0.5);\nv_size         \x3d max(markerSize.x, markerSize.y);\nv_outlineWidth \x3d outlineSize;\nfloat attributeData[10];\nvec4 attributeData3 \x3d getDataDriven0(a_id);\nattributeData[0] \x3d filterNaNValues(attributeData3.x);\nattributeData[1] \x3d filterNaNValues(attributeData3.y);\nattributeData[2] \x3d filterNaNValues(attributeData3.z);\nattributeData[3] \x3d filterNaNValues(attributeData3.w);\n#if (numberOfFields \x3e 4)\nvec4 attributeData4 \x3d getDataDriven1(a_id);\nattributeData[4] \x3d filterNaNValues(attributeData4.x);\nattributeData[5] \x3d filterNaNValues(attributeData4.y);\nattributeData[6] \x3d filterNaNValues(attributeData4.z);\nattributeData[7] \x3d filterNaNValues(attributeData4.w);\n#endif\n#if (numberOfFields \x3e 8)\nvec4 attributeData5 \x3d getDataDriven2(a_id);\nattributeData[8] \x3d filterNaNValues(attributeData5.x);\nattributeData[9] \x3d filterNaNValues(attributeData5.y);\n#endif\nfloat sum \x3d 0.0;\nfor (int i \x3d 0; i \x3c numberOfFields; ++i) {\nsum +\x3d attributeData[i];\n}\nfloat sectorAngles[numberOfFields];\nfor (int i \x3d 0; i \x3c numberOfFields; ++i) {\nsectorAngles[i] \x3d 360.0 * attributeData[i] / sum;\n}\nvec2 filteredSectorToColorId[numberOfFields];\nFilteredChartInfo filteredInfo \x3d FilteredChartInfo(0.0, 0);\nint numOfEntries \x3d filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\nv_numOfEntries \x3d float(numOfEntries);\nv_maxSectorAngle \x3d filteredInfo.endSectorAngle;\nv_filteredSectorToColorId \x3d filteredSectorToColorId;\n#ifdef HITTEST\nhighp vec3 out_pos \x3d vec3(0.0);\nv_color            \x3d vec4(0.0);\nhittestMarker(v_color, out_pos, viewMat3 * tileMat3 *  pos, v_size);\ngl_PointSize \x3d 1.0;\ngl_Position \x3d vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\ngl_Position \x3d vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},
shared:{line:{"common.glsl":"#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) \x26\x26 defined(PATTERN)\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_sampleAlphaOnly;\n#endif\nstruct LineData {\nlowp vec4 color;\nmediump vec2 normal;\nmediump float lineHalfWidth;\nlowp float opacity;\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nmediump vec4 tlbr;\nmediump vec2 patternSize;\n#endif\n#ifdef SDF\nmediump float lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nhighp float accumulatedDistance;\n#endif\n#endif\nhighp vec3 id;\n};",
"line.frag":"uniform lowp float u_blur;\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) \x26\x26 !defined(HIGHLIGHT)\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\nuniform highp float u_pixelRatio;\n#endif\n#endif\n#if defined(SDF) \x26\x26 !defined(HIGHLIGHT) \x26\x26 !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nlowp vec4 getLineColor(LineData line) {\nmediump float adjustedPatternWidth \x3d line.patternSize.x * 2.0 * line.lineWidthRatio;\nmediump float relativeTexX \x3d fract(line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY \x3d 0.5 + 0.25 * line.normal.y;\nmediump vec2 texCoord \x3d mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d \x3d rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist \x3d d * line.lineHalfWidth;\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\n}\n#elif defined(PATTERN) \x26\x26 !defined(HIGHLIGHT) \x26\x26 !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nlowp vec4 getLineColor(LineData line) {\nmediump float lineHalfWidth \x3d line.lineHalfWidth;\nmediump float adjustedPatternHeight \x3d line.patternSize.y * 2.0 * lineHalfWidth / line.patternSize.x;\nmediump float relativeTexY \x3d fract(line.accumulatedDistance / adjustedPatternHeight);\nmediump float relativeTexX \x3d 0.5 + 0.5 * line.normal.y;\nmediump vec2 texCoord \x3d mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nlowp vec4 color \x3d texture2D(u_texture, texCoord);\n#ifdef VV_COLOR\nif (v_sampleAlphaOnly \x3e 0.5) {\ncolor.rgb \x3d vec3(color.a);\n}\n#endif\nreturn line.opacity * line.color * color;\n}\n#else\nlowp vec4 getLineColor(LineData line) {\nreturn line.opacity * line.color;\n}\n#endif\nvec4 shadeLine(LineData line)\n{\nmediump float thinLineFactor \x3d max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nmediump float fragDist \x3d length(line.normal) * line.lineHalfWidth;\nlowp float alpha \x3d clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\nlowp vec4 out_color \x3d getLineColor(line) * alpha;\n#ifdef HIGHLIGHT\nout_color.a \x3d step(1.0 / 255.0, out_color.a);\n#endif\n#ifdef ID\nif (out_color.a \x3c 1.0 / 255.0) {\ndiscard;\n}\nout_color \x3d vec4(line.id, 0.0);\n#endif\nreturn out_color;\n}",
"line.vert":"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\n#ifdef VV_SIZE\nfloat refLineWidth \x3d 2.0 * referenceHalfWidth;\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\n#else\nreturn lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\nfloat halfWidth \x3d max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\nhalfWidth \x3d max(halfWidth, 2.0);\n#endif\nreturn halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\nfloat thinLineFactor \x3d max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nreturn thinLineFactor * halfWidth * offset;\n}\nLineData buildLine(\nout vec3 out_pos,\nin vec3 in_id,\nin vec2 in_pos,\nin vec4 in_color,\nin vec2 in_offset,\nin vec2 in_normal,\nin float in_accumulatedDist,\nin float in_lineHalfWidth,\nin float in_bitSet,\nin vec4 in_tlbr,\nin vec2 in_segmentDirection,\nin float in_referenceHalfWidth\n)\n{\nfloat aa        \x3d 0.5 * u_antialiasing;\nfloat baseWidth \x3d getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\nfloat halfWidth \x3d getLineHalfWidth(baseWidth, aa);\nfloat z         \x3d 2.0 * step(baseWidth, 0.0);\nvec2  dist      \x3d getDist(in_offset, halfWidth);\nvec3  offset    \x3d u_displayViewMat3 * vec3(dist, 0.0);\nvec3  pos       \x3d u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nvec4  color     \x3d in_color;\nfloat opacity   \x3d 1.0;\n#else\nvec4  color     \x3d getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\nfloat opacity   \x3d getOpacity();\n#ifdef SDF\nconst float SDF_PATTERN_HALF_WIDTH \x3d 15.5;\nfloat scaleDash \x3d getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\nfloat lineWidthRatio \x3d (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\n#endif\n#endif\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) \x26\x26 defined(PATTERN)\nv_sampleAlphaOnly \x3d getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\n#endif\nout_pos \x3d vec3(pos.xy, z);\nreturn LineData(\ncolor,\nin_normal,\nhalfWidth,\nopacity,\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nin_tlbr / u_mosaicSize.xyxy,\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\n#endif\n#ifdef SDF\nlineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\n#endif\n#endif\nnorm(in_id)\n);\n}"}},
"symbologyTypeUtils.glsl":"#if SYMBOLOGY_TYPE \x3d\x3d SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE \x3d\x3d SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#endif\n#if SYMBOLOGY_TYPE \x3d\x3d SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE \x3d\x3d SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\n#endif",text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec3 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;",
"hittest.glsl":"#include \x3cmaterials/hittest/common.glsl\x3e","text.frag":"precision mediump float;\n#include \x3cmaterials/text/common.glsl\x3e\nuniform lowp sampler2D u_texture;\n#ifdef HITTEST\nvec4 getColor() {\nreturn v_color;\n}\n#else\nvec4 getColor()\n{\nfloat SDF_CUTOFF \x3d (2.0 / 8.0);\nfloat SDF_BASE_EDGE_DIST \x3d 1.0 - SDF_CUTOFF;\nlowp float dist \x3d texture2D(u_texture, v_tex).a;\nmediump float edge \x3d SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\nedge /\x3d 2.0;\n#endif\nlowp float aa \x3d v_antialiasingWidth;\nlowp float alpha \x3d smoothstep(edge - aa, edge + aa, dist);\nreturn alpha * v_color * v_opacity;\n}\n#endif\nvoid main()\n{\ngl_FragColor \x3d getColor();\n}",
"text.vert":"precision highp float;\n#include \x3cmaterials/utils.glsl\x3e\n#include \x3cmaterials/vcommon.glsl\x3e\n#include \x3cmaterials/text/common.glsl\x3e\n#include \x3cmaterials/text/hittest.glsl\x3e\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_zoomRange;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHaloPass;\nuniform float u_isBackgroundPass;\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\nfloat r \x3d getSize(referenceSize) / referenceSize;\nbaseSize *\x3d r;\noffset.xy *\x3d r;\nreturn baseSize;\n#endif\nreturn baseSize;\n}\nvoid main()\n{\nINIT;\nfloat a_isBackground  \x3d a_aux.y;\nfloat a_referenceSize \x3d a_aux.z * a_aux.z / 256.0;\nfloat a_bitSet        \x3d a_aux.w;\nfloat a_fontSize      \x3d a_texFontSize.z;\nvec2  a_offset        \x3d a_vertexOffset * OFFSET_PRECISION;\nvec3  in_pos        \x3d vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat fontSize      \x3d getTextSize(a_offset, a_fontSize, a_referenceSize);\nfloat fontScale     \x3d fontSize / SDF_FONT_SIZE;\nvec3  offset        \x3d getRotation() * vec3(a_offset, 0.0);\nmat3  extrudeMatrix \x3d getBit(a_bitSet, 0) \x3d\x3d 1.0 ? u_displayViewMat3 : u_displayMat3;\nfloat isText \x3d 1.0 - a_isBackground;\nfloat isBackground \x3d u_isBackgroundPass * a_isBackground;\nvec4  nonHaloColor  \x3d (isBackground * a_color) + (isText * getColor(a_color, a_bitSet, 1));\nv_color   \x3d u_isHaloPass * a_haloColor + (1.0 - u_isHaloPass) * nonHaloColor;\nv_opacity \x3d getOpacity();\nv_id      \x3d norm(a_id);\nv_tex     \x3d a_texCoords / u_mosaicSize;\nv_pos     \x3d u_dvsMat3 * in_pos + extrudeMatrix * offset;\nfloat isHidden \x3d u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\nv_pos.z +\x3d 2.0 * isHidden;\nv_edgeDistanceOffset \x3d u_isHaloPass * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  \x3d 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n#ifdef HITTEST\nhighp vec3 out_pos  \x3d vec3(0.);\nv_color \x3d vec4(0.);\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\n+ u_tileMat3 * offset, fontSize / 2.);\ngl_PointSize \x3d 1.;\ngl_Position \x3d vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\n#else\ngl_Position \x3d  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n#endif\n}"},
"utils.glsl":"float rshift(in float u32, in int amount) {\nreturn floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\nfloat offset \x3d pow(2.0, float(bitIndex));\nreturn mod(floor(bitset / offset), 2.0);\n}\nconst int highlightReasonsLength \x3d 3;\nfloat getFilterBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex + highlightReasonsLength);\n}\nfloat getHighlightBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex);\n}\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\nfloat isAggregate \x3d getBit(bitset.b, 7);\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\nfloat r \x3d mod(rshift(u32, 0), 255.0);\nfloat g \x3d mod(rshift(u32, 8), 255.0);\nfloat b \x3d mod(rshift(u32, 16), 255.0);\nfloat a \x3d mod(rshift(u32, 24), 255.0);\nreturn vec4(r, g, b, a);\n}\nvec3 norm(in vec3 v) {\nreturn v /\x3d 255.0;\n}\nvec4 norm(in vec4 v) {\nreturn v /\x3d 255.0;\n}\nfloat max4(vec4 target) {\nreturn max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\nreturn (bytes - 127.0) / 127.0;\n}\nhighp float rand(in vec2 co) {\nhighp float a \x3d 12.9898;\nhighp float b \x3d 78.233;\nhighp float c \x3d 43758.5453;\nhighp float dt \x3d dot(co, vec2(a,b));\nhighp float sn \x3d mod(dt, 3.14);\nreturn fract(sin(sn) * c);\n}",
"vcommon.glsl":"#include \x3cmaterials/constants.glsl\x3e\n#include \x3cmaterials/utils.glsl\x3e\n#include \x3cmaterials/attributeData.glsl\x3e\n#include \x3cmaterials/vv.glsl\x3e\n#include \x3cmaterials/barycentric.glsl\x3e\nattribute vec2 a_pos;\nattribute highp vec3 a_id;\nuniform highp mat3 displayViewScreenMat3;\nuniform highp mat3 displayViewMat3;\nuniform highp mat3 displayMat3;\nuniform highp mat3 tileMat3;\nuniform highp mat3 viewMat3;\nuniform highp float pixelRatio;\nuniform mediump float zoomFactor;\nuniform mediump float antialiasing;\nuniform mediump float currentScale;\nuniform mediump float currentZoom;\nuniform mediump float metersPerSRUnit;\nvec4 VV_ADATA \x3d vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\ntarget.rgba \x3d getVisualVariableData(a_id);\n}\n#ifdef VV\n#define INIT loadVisualVariableData(VV_ADATA)\n#else\n#define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\nfloat isColorLocked   \x3d getBit(a_bitSet, index);\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\nreturn a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\nreturn 1.0;\n#endif\n}\nfloat getSize(in float in_size, in float currentScale) {\n#ifdef VV_SIZE\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE], currentScale);\n#else\nreturn in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\nreturn mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\nreturn ceil(getFilterData(a_id).x * 255.0);\n#else\nreturn getFilterData(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\nreturn getAnimation(a_id);\n}\nfloat getMinZoom() {\nvec4 data0 \x3d getFilterData(a_id) * 255.0;\nreturn data0.g;\n}\nmat3 getMatrixNoDisplay(float isMapAligned) {\nreturn isMapAligned * viewMat3 * tileMat3 + (1.0 - isMapAligned) * tileMat3;\n}\nmat3 getMatrix(float isMapAligned) {\nreturn isMapAligned * displayViewMat3 + (1.0 - isMapAligned) * displayMat3;\n}\nfloat checkHighlightBit(float filterFlags, int index) {\nreturn getHighlightBit(filterFlags, index);\n}\nfloat checkHighlight(float filterFlags) {\nfloat result \x3d checkHighlightBit(filterFlags, 0);\nfor (int i \x3d 1; i \x3c highlightReasonsLength; i++) {\nresult \x3d result + checkHighlightBit(filterFlags, i);\n}\nreturn step(0.1, result);\n}\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\npos.z +\x3d 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef inside\npos.z +\x3d 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(outside)\npos.z +\x3d 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(highlight)\n#if !defined(highlight_all)\npos.z +\x3d 2.0 * (1.0 - checkHighlight(filterFlags));\n#endif\n#endif\npos.z +\x3d 2.0 * (step(minMaxZoom.y, currentZoom) + (1.0 - step(minMaxZoom.x, currentZoom)));\nreturn pos;\n}",
"vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n#define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n#define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float colorValues[8];\nuniform vec4 colors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 minMaxValueAndSize;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float values[8];\nuniform float sizes[8];\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float values[8];\nuniform float sizes[8];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float unitMeterRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float opacityValues[8];\nuniform float opacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float rotationType;\n#endif\nbool isNan(float val) {\nreturn (val \x3d\x3d NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nfloat interpolationRatio \x3d (sizeValue  - minMaxValueAndSize.x) / (minMaxValueAndSize.y - minMaxValueAndSize.x);\ninterpolationRatio \x3d clamp(interpolationRatio, 0.0, 1.0);\nreturn minMaxValueAndSize.z + interpolationRatio * (minMaxValueAndSize.w - minMaxValueAndSize.z);\n}\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nfloat getVVScaleStopsSize(float currentScale) {\nfloat outSize;\nif (currentScale \x3c\x3d values[0]) {\noutSize \x3d sizes[0];\n} else {\nif (currentScale \x3e\x3d values[7]) {\noutSize \x3d sizes[7];\n} else {\nint index;\nindex \x3d -1;\nfor (int i \x3d 0; i \x3c 8; i++) {\nif (values[i] \x3e currentScale) {\nindex \x3d i;\nbreak;\n}\n}\nint prevIndex \x3d index - 1;\nfloat a \x3d currentScale - values[prevIndex];\nfloat b \x3d values[index] - values[prevIndex];\noutSize \x3d mix(sizes[prevIndex], sizes[index], a / b);\n}\n}\nreturn outSize;\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N \x3d 8;\nfloat getVVStopsSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nif (sizeValue \x3c\x3d values[0]) {\nreturn sizes[0];\n}\nfor (int i \x3d 1; i \x3c VV_SIZE_N; ++i) {\nif (values[i] \x3e\x3d sizeValue) {\nfloat f \x3d (sizeValue - values[i-1]) / (values[i] - values[i-1]);\nreturn mix(sizes[i-1], sizes[i], f);\n}\n}\nreturn sizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nreturn sizeValue * (metersPerSRUnit / unitMeterRatio);\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N \x3d 8;\nfloat getVVOpacity(float opacityValue) {\nif (isNan(opacityValue)) {\nreturn 1.0;\n}\nif (opacityValue \x3c\x3d opacityValues[0]) {\nreturn opacities[0];\n}\nfor (int i \x3d 1; i \x3c VV_OPACITY_N; ++i) {\nif (opacityValues[i] \x3e\x3d opacityValue) {\nfloat f \x3d (opacityValue - opacityValues[i-1]) / (opacityValues[i] - opacityValues[i-1]);\nreturn mix(opacities[i-1], opacities[i], f);\n}\n}\nreturn opacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat4(1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1);\n}\nfloat rotation \x3d rotationValue;\nif (rotationType \x3d\x3d 1.0) {\nrotation \x3d 90.0 - rotation;\n}\nfloat angle \x3d C_DEG_TO_RAD * rotation;\nfloat sinA \x3d sin(angle);\nfloat cosA \x3d cos(angle);\nreturn mat4(cosA, sinA, 0, 0,\n-sinA,  cosA, 0, 0,\n0,     0, 1, 0,\n0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat3(1, 0, 0,\n0, 1, 0,\n0, 0, 1);\n}\nfloat rotation \x3d rotationValue;\nif (rotationType \x3d\x3d 1.0) {\nrotation \x3d 90.0 - rotation;\n}\nfloat angle \x3d C_DEG_TO_RAD * -rotation;\nfloat sinA \x3d sin(angle);\nfloat cosA \x3d cos(angle);\nreturn mat3(cosA, -sinA, 0,\nsinA, cosA, 0,\n0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N \x3d 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\nif (isNan(colorValue) || isColorLocked \x3d\x3d 1.0) {\nreturn fallback;\n}\nif (colorValue \x3c\x3d colorValues[0]) {\nreturn colors[0];\n}\nfor (int i \x3d 1; i \x3c VV_COLOR_N; ++i) {\nif (colorValues[i] \x3e\x3d colorValue) {\nfloat f \x3d (colorValue - colorValues[i-1]) / (colorValues[i] - colorValues[i-1]);\nreturn mix(colors[i-1], colors[i], f);\n}\n}\nreturn colors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize, in float currentScale)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\nreturn getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\nfloat outSize \x3d getVVScaleStopsSize(currentScale);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_FIELD_STOPS)\nfloat outSize \x3d getVVStopsSize(vvSize, size);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\nreturn getVVUnitValue(vvSize, size);\n#else\nreturn size;\n#endif\n}"},
overlay:{overlay:{"overlay.frag":"precision lowp float;\nuniform lowp sampler2D u_texture;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nvec4 color \x3d texture2D(u_texture, v_uv);\ngl_FragColor \x3d color *  u_opacity;\n}","overlay.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_uv;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_perspective;\nvarying mediump vec2 v_uv;\nvoid main(void) {\nv_uv \x3d a_uv;\nfloat w \x3d 1.0 + dot(a_uv, u_perspective);\nvec3 pos \x3d u_dvsMat3 * vec3(a_pos, 1.0);\ngl_Position \x3d vec4(w * pos.xy, 0.0, w);\n}"}},
"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\ngl_FragColor \x3d texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\nfloat mirrorFactor \x3d 1.2 - factor;\nreturn mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\nvec4 color \x3d u_bloomStrength * (\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n);\ngl_FragColor \x3d clamp(color, 0.0, 1.0);\n}"},
gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize \x3d 1.0 / u_texSize;\nfloat fSigma \x3d float(SIGMA);\nfloat weightSum \x3d gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum \x3d texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i \x3d 1; i \x3c KERNEL_RADIUS; i ++) {\nfloat x \x3d float(i);\nfloat w \x3d gaussianPdf(x, fSigma);\nvec2 uvOffset \x3d u_direction * invSize * x;\nvec4 sample1 \x3d texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 \x3d texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum +\x3d (sample1 + sample2) * w;\nweightSum +\x3d 2.0 * w;\n}\ngl_FragColor \x3d pixelColorSum /weightSum;\n}"},
luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\nvec4 texel \x3d texture2D(u_texture, v_uv);\nvec3 luma \x3d vec3(0.299, 0.587, 0.114);\nfloat v \x3d dot(texel.xyz, luma);\nvec4 outputColor \x3d vec4(u_defaultColor.rgb, u_defaultOpacity);\nfloat alpha \x3d smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\ngl_FragColor \x3d mix(outputColor, texel, alpha);\n}"}},
blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize \x3d 1.0 / u_texSize;\nfloat fSigma \x3d u_sigma;\nfloat weightSum \x3d gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum \x3d texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i \x3d 1; i \x3c KERNEL_RADIUS; i ++) {\nfloat x \x3d float(i);\nfloat w \x3d gaussianPdf(x, fSigma);\nvec2 uvOffset \x3d u_direction * invSize * x;\nvec4 sample1 \x3d texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 \x3d texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum +\x3d (sample1 + sample2) * w;\nweightSum +\x3d 2.0 * w;\n}\ngl_FragColor \x3d pixelColorSum /weightSum;\n}"},
"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist \x3d 1.0;\nconst float sampleStrength \x3d 2.2;\nvoid main(void) {\nfloat samples[10];\nsamples[0] \x3d -0.08;\nsamples[1] \x3d -0.05;\nsamples[2] \x3d -0.03;\nsamples[3] \x3d -0.02;\nsamples[4] \x3d -0.01;\nsamples[5] \x3d  0.01;\nsamples[6] \x3d  0.02;\nsamples[7] \x3d  0.03;\nsamples[8] \x3d  0.05;\nsamples[9] \x3d  0.08;\nvec2 dir \x3d 0.5 - v_uv;\nfloat dist \x3d sqrt(dir.x * dir.x + dir.y * dir.y);\ndir \x3d dir / dist;\nvec4 color \x3d texture2D(u_colorTexture,v_uv);\nvec4 sum \x3d color;\nfor (int i \x3d 0; i \x3c 10; i++) {\nsum +\x3d texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n}\nsum *\x3d 1.0 / 11.0;\nfloat t \x3d dist * sampleStrength;\nt \x3d clamp(t, 0.0, 1.0);\ngl_FragColor \x3d mix(color, sum, t);\n}"}},
dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\nvec4 minColor \x3d texture2D(u_minColor, vec2(0.5));\nvec4 maxColor \x3d texture2D(u_maxColor, vec2(0.5));\nvec4 color \x3d texture2D(u_texture, v_uv);\nvec3 minColorUnpremultiply \x3d minColor.rgb / minColor.a;\nvec3 maxColorUnpremultiply \x3d maxColor.rgb / maxColor.a;\nvec3 colorUnpremultiply \x3d color.rgb / color.a;\nvec3 range \x3d maxColorUnpremultiply - minColorUnpremultiply;\ngl_FragColor \x3d vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}",
"min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\nvec2 srcPixel \x3d floor(gl_FragCoord.xy) * float(CELL_SIZE);\nvec2 onePixel \x3d vec2(1.0) / u_srcResolution;\nvec2 uv \x3d (srcPixel + 0.5) / u_srcResolution;\nvec4 minColor \x3d vec4(1.0);\nvec4 maxColor \x3d vec4(0.0);\nfor (int y \x3d 0; y \x3c CELL_SIZE; ++y) {\nfor (int x \x3d 0; x \x3c CELL_SIZE; ++x) {\nvec2 offset \x3d uv + vec2(x, y) * onePixel;\nminColor \x3d min(minColor, texture2D(u_minTexture, offset));\nmaxColor \x3d max(maxColor, texture2D(u_maxTexture, offset));\n}\n}\ngl_FragData[0] \x3d minColor;\ngl_FragData[1] \x3d maxColor;\n}"}},
"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nuniform vec2 u_shadowOffset;\nuniform highp mat3 u_displayViewMat3;\nvarying vec2 v_uv;\nvoid main() {\nvec3 offset \x3d u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\nvec4 layerColor \x3d texture2D(u_layerFBOTexture, v_uv);\nvec4 blurColor \x3d texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\ngl_FragColor \x3d ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"}},
"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel \x3d vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 \x3d mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 \x3d mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 \x3d mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 \x3d mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 \x3d mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 \x3d mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 \x3d mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 \x3d mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 \x3d mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\nG[0] \x3d g0,\nG[1] \x3d g1,\nG[2] \x3d g2,\nG[3] \x3d g3,\nG[4] \x3d g4,\nG[5] \x3d g5,\nG[6] \x3d g6,\nG[7] \x3d g7,\nG[8] \x3d g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i \x3d 0.0; i \x3c 3.0; i++) {\nfor (float j \x3d 0.0; j \x3c 3.0; j++) {\nsample \x3d texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\nI[int(i)][int(j)] \x3d length(sample);\n}\n}\nfor (int i \x3d 0; i \x3c 9; i++) {\nfloat dp3 \x3d dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] \x3d dp3 * dp3;\n}\nfloat M \x3d (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S \x3d (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor \x3d vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},
sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel \x3d vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 \x3d mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 \x3d mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] \x3d g0;\nG[1] \x3d g1;\nfor (float i \x3d 0.0; i \x3c 3.0; i++) {\nfor (float j \x3d 0.0; j \x3c 3.0; j++) {\nsample \x3d texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] \x3d length(sample);\n}\n}\nfor (int i \x3d 0; i \x3c 2; i++) {\nfloat dp3 \x3d dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] \x3d dp3 * dp3;\n}\ngl_FragColor \x3d vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},
"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel \x3d vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 \x3d mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 \x3d mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] \x3d g0;\nG[1] \x3d g1;\nfor (float i \x3d 0.0; i \x3c 3.0; i++) {\nfor (float j \x3d 0.0; j \x3c 3.0; j++) {\nsample \x3d texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] \x3d length(sample);\n}\n}\nfor (int i \x3d 0; i \x3c 2; i++) {\nfloat dp3 \x3d dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] \x3d dp3 * dp3;\n}\nvec4 color \x3d texture2D(u_colorTexture, v_uv);\ngl_FragColor \x3d vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},
filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\nvec4 color \x3d texture2D(u_colorTexture, v_uv);\nvec4 rgbw \x3d u_coefficients * vec4(color.a \x3e 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\nfloat a \x3d color.a;\ngl_FragColor \x3d vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\ngl_Position \x3d vec4(a_position, 0.0, 1.0);\nv_uv \x3d (a_position + 1.0) / 2.0;\n}"}},
raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include \x3cfiltering/bicubic.glsl\x3e\nvoid main() {\n#ifdef BICUBIC\nvec4 color \x3d sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\nvec4 color \x3d texture2D(u_texture, v_texcoord);\n#endif\ngl_FragColor \x3d vec4(color.rgb * u_opacity, color.a * u_opacity);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord \x3d a_pos;\ngl_Position \x3d vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},
common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include \x3craster/common/projection.glsl\x3e\n#endif\n#ifdef BICUBIC\n#include \x3cfiltering/bicubic.glsl\x3e\n#endif\n#ifdef BILINEAR\n#include \x3cfiltering/bilinear.glsl\x3e\n#endif\nvec2 getPixelLocation(vec2 coords) {\nvec2 targetLocation \x3d u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\ntargetLocation \x3d projectPixelLocation(targetLocation);\n#endif\nreturn targetLocation;\n}\nbool isOutside(vec2 coords){\nif (coords.t\x3e1.00001 ||coords.t\x3c-0.00001 || coords.s\x3e1.00001 ||coords.s\x3c-0.00001) {\nreturn true;\n} else {\nreturn false;\n}\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\nvec4 color \x3d sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\nvec4 color \x3d sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\nvec4 color \x3d texture2D(u_image, pixelLocation);\n#endif\nreturn color;\n}",
"common.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord \x3d a_pos * u_scale + u_offset;\ngl_Position \x3d vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\nvec4 pixelValue \x3d isFloat ? currentPixel * 255.0 : currentPixel;\nfloat maxI \x3d 255.0;\nfloat mid \x3d 128.0;\nfloat c \x3d u_contrastOffset;\nfloat b \x3d u_brightnessOffset;\nvec4 v;\nif (c \x3e 0.0 \x26\x26 c \x3c 100.0) {\nv \x3d (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n} else if (c \x3c\x3d 0.0 \x26\x26 c \x3e -100.0) {\nv \x3d (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n} else if (c \x3d\x3d 100.0) {\nv \x3d (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\nv \x3d (sign(v) + 1.0) / 2.0;\n} else if (c \x3d\x3d -100.0) {\nv \x3d vec4(mid, mid, mid, currentPixel.a);\n}\nvec3 rgb \x3d clamp(v.rgb / 255.0, 0.0, 1.0);\nreturn vec4(rgb, currentPixel.a);\n}",
"getSurfaceValues.glsl":"#include \x3craster/common/mirror.glsl\x3e\nvoid getSurfaceValues(sampler2D imageTexture, vec2 texCoord, vec2 srcImageSize, inout float values[10]) {\nvec2 onePixel \x3d 1.0 / srcImageSize;\nvec4 va \x3d texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, -1.0)));\nvec4 vb \x3d texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, -1.0)));\nvec4 vc \x3d texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, -1.0)));\nvec4 vd \x3d texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 0.0)));\nvec4 ve \x3d texture2D(imageTexture, mirror(texCoord));\nvec4 vf \x3d texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 0.0)));\nvec4 vg \x3d texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 1.0)));\nvec4 vh \x3d texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, 1.0)));\nvec4 vi \x3d texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 1.0)));\nfloat alpha \x3d va.a * vb.a * vc.a * vd.a * ve.a * vf.a * vg.a * vh.a * vi.a;\nvalues[0] \x3d va.r;\nvalues[1] \x3d vb.r;\nvalues[2] \x3d vc.r;\nvalues[3] \x3d vd.r;\nvalues[4] \x3d ve.r;\nvalues[5] \x3d vf.r;\nvalues[6] \x3d vg.r;\nvalues[7] \x3d vh.r;\nvalues[8] \x3d vi.r;\nvalues[9] \x3d alpha;\n}",
"inverse.glsl":"float invertValue(float value) {\nfloat s \x3d sign(value);\nreturn (s * s) / (value + abs(s) - 1.0);\n}","mirror.glsl":"vec2 mirror(vec2 pos) {\nvec2 pos1 \x3d abs(pos);\nreturn step(pos1, vec2(1.0, 1.0)) * pos1 + step(1.0, pos1) * (2.0 - pos1);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n#ifdef LOOKUP_PROJECTION\nvec4 pv \x3d texture2D(u_transformGrid, coords);\nreturn vec2(pv.r, pv.g);\n#endif\nvec2 index_image \x3d floor(coords * u_targetImageSize);\nvec2 oneTransformPixel \x3d vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\nvec2 index_transform \x3d floor(index_image / u_transformSpacing) / u_transformGridSize;\nvec2 pos \x3d fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\nvec2 srcLocation;\nvec2 transform_location \x3d index_transform + oneTransformPixel * 0.5;\nif (pos.s \x3c\x3d pos.t) {\nvec4 ll_abc \x3d texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\nvec4 ll_def \x3d texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\nsrcLocation.s \x3d dot(ll_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t \x3d dot(ll_def.rgb, vec3(pos, 1.0));\n} else {\nvec4 ur_abc \x3d texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\nvec4 ur_def \x3d texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\nsrcLocation.s \x3d dot(ur_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t \x3d dot(ur_def.rgb, vec3(pos, 1.0));\n}\nreturn srcLocation;\n}"},
flow:{"getFadeOpacity.glsl":"uniform float u_decayRate;\nuniform float u_fadeToZero;\nfloat getFadeOpacity(float x) {\nfloat cutOff \x3d mix(0.0, exp(-u_decayRate), u_fadeToZero);\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\n}","getFragmentColor.glsl":"vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\nfloat featheringStart \x3d clamp(0.5 - featheringSize / size, 0.0, 0.5);\nif (dist \x3e featheringStart) {\ncolor *\x3d 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\n}\nreturn color;\n}",
imagery:{"imagery.frag":"precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform float u_Min;\nuniform float u_Max;\nuniform float u_featheringSize;\n#include \x3craster/flow/vv.glsl\x3e\nfloat getIntensity(float v) {\nreturn u_Min + v * (u_Max - u_Min);\n}\nvoid main(void) {\nvec4 sampled \x3d texture2D(u_texture, v_texcoord);\nfloat intensity \x3d getIntensity(sampled.r);\ngl_FragColor \x3d getColor(intensity);\ngl_FragColor.a *\x3d getOpacity(sampled.r);\ngl_FragColor.a *\x3d sampled.a;\ngl_FragColor.rgb *\x3d gl_FragColor.a;\n}",
"imagery.vert":"attribute vec2 a_position;\nattribute vec2 a_texcoord;\nuniform mat3 u_dvsMat3;\nvarying vec2 v_texcoord;\nvoid main(void) {\nvec2 xy \x3d (u_dvsMat3 * vec3(a_position, 1.0)).xy;\ngl_Position \x3d vec4(xy, 0.0, 1.0);\nv_texcoord \x3d a_texcoord;\n}"},particles:{"particles.frag":"precision highp float;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\nvarying float v_size;\nuniform float u_featheringSize;\n#include \x3craster/flow/getFragmentColor.glsl\x3e\nvoid main(void) {\ngl_FragColor \x3d getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\n}",
"particles.vert":"attribute vec4 a_xyts0;\nattribute vec4 a_xyts1;\nattribute vec4 a_typeIdDurationSeed;\nattribute vec4 a_extrudeInfo;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nuniform float u_time;\nuniform float u_trailLength;\nuniform float u_flowSpeed;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\nvarying float v_size;\nuniform float u_featheringSize;\nuniform float u_introFade;\n#include \x3craster/flow/vv.glsl\x3e\n#include \x3craster/flow/getFadeOpacity.glsl\x3e\nvoid main(void) {\nvec2 position0 \x3d a_xyts0.xy;\nfloat t0 \x3d a_xyts0.z;\nfloat speed0 \x3d a_xyts0.w;\nvec2 position1 \x3d a_xyts1.xy;\nfloat t1 \x3d a_xyts1.z;\nfloat speed1 \x3d a_xyts1.w;\nfloat type \x3d a_typeIdDurationSeed.x;\nfloat id \x3d a_typeIdDurationSeed.y;\nfloat duration \x3d a_typeIdDurationSeed.z;\nfloat seed \x3d a_typeIdDurationSeed.w;\nvec2 e0 \x3d a_extrudeInfo.xy;\nvec2 e1 \x3d a_extrudeInfo.zw;\nfloat animationPeriod \x3d duration + u_trailLength;\nfloat scaledTime \x3d u_time * u_flowSpeed;\nfloat randomizedTime \x3d scaledTime + seed * animationPeriod;\nfloat t \x3d mod(randomizedTime, animationPeriod);\nfloat fUnclamped \x3d (t - t0) / (t1 - t0);\nfloat f \x3d clamp(fUnclamped, 0.0, 1.0);\nfloat clampedTime \x3d mix(t0, t1, f);\nfloat speed \x3d mix(speed0, speed1, f);\nvec2 extrude;\nvec2 position;\nfloat fadeOpacity;\nfloat introOpacity;\nif (type \x3d\x3d 2.0) {\nif (fUnclamped \x3c 0.0 || (fUnclamped \x3e 1.0 \x26\x26 t1 !\x3d duration)) {\ngl_Position \x3d vec4(0.0, 0.0, -2.0, 1.0);\nreturn;\n}\nvec2 ortho \x3d mix(e0, e1, f);\nvec2 parallel;\nparallel \x3d normalize(position1 - position0) * 0.5;\nif (id \x3d\x3d 1.0) {\nextrude \x3d ortho;\nv_texcoord \x3d vec2(0.5, 0.0);\n} else if (id \x3d\x3d 2.0) {\nextrude \x3d -ortho;\nv_texcoord \x3d vec2(0.5, 1.0);\n} else if (id \x3d\x3d 3.0) {\nextrude \x3d ortho + parallel;\nv_texcoord \x3d vec2(1.0, 0.0);\n} else if (id \x3d\x3d 4.0) {\nextrude \x3d -ortho + parallel;\nv_texcoord \x3d vec2(1.0, 1.0);\n}\nfadeOpacity \x3d getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity \x3d 1.0 - exp(-clampedTime);\nv_size \x3d getSize(speed);\nv_color \x3d getColor(speed);\nv_color.a *\x3d getOpacity(speed);\nposition \x3d mix(position0, position1, f);\n} else {\nif (fUnclamped \x3c 0.0) {\ngl_Position \x3d vec4(0.0, 0.0, -2.0, 1.0);\nreturn;\n}\nif (id \x3d\x3d 1.0) {\nextrude \x3d e0;\nv_texcoord \x3d vec2(0.5, 0.0);\nfadeOpacity \x3d getFadeOpacity((t - t0) / u_trailLength);\nintroOpacity \x3d 1.0 - exp(-t0);\nv_size \x3d getSize(speed0);\nv_color \x3d getColor(speed0);\nv_color.a *\x3d getOpacity(speed0);\nposition \x3d position0;\n} else if (id \x3d\x3d 2.0) {\nextrude \x3d -e0;\nv_texcoord \x3d vec2(0.5, 1.0);\nfadeOpacity \x3d getFadeOpacity((t - t0) / u_trailLength);\nintroOpacity \x3d 1.0 - exp(-t0);\nv_size \x3d getSize(speed0);\nv_color \x3d getColor(speed0);\nv_color.a *\x3d getOpacity(speed0);\nposition \x3d position0;\n} else if (id \x3d\x3d 3.0) {\nextrude \x3d mix(e0, e1, f);\nv_texcoord \x3d vec2(0.5, 0.0);\nfadeOpacity \x3d getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity \x3d 1.0 - exp(-clampedTime);\nv_size \x3d getSize(speed);\nv_color \x3d getColor(speed);\nv_color.a *\x3d getOpacity(speed);\nposition \x3d mix(position0, position1, f);\n} else if (id \x3d\x3d 4.0) {\nextrude \x3d -mix(e0, e1, f);\nv_texcoord \x3d vec2(0.5, 1.0);\nfadeOpacity \x3d getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity \x3d 1.0 - exp(-clampedTime);\nv_size \x3d getSize(speed);\nv_color \x3d getColor(speed);\nv_color.a *\x3d getOpacity(speed);\nposition \x3d mix(position0, position1, f);\n}\n}\nvec2 xy \x3d (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\ngl_Position \x3d vec4(xy, 0.0, 1.0);\nv_color.a *\x3d fadeOpacity;\nv_color.a *\x3d mix(1.0, introOpacity, u_introFade);\nv_color.rgb *\x3d v_color.a;\n}"},
streamlines:{"streamlines.frag":"precision highp float;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_color;\nvarying float v_size;\nuniform float u_time;\nuniform float u_trailLength;\nuniform float u_flowSpeed;\nuniform float u_featheringSize;\nuniform float u_introFade;\n#include \x3craster/flow/getFragmentColor.glsl\x3e\n#include \x3craster/flow/getFadeOpacity.glsl\x3e\nvoid main(void) {\nfloat t \x3d mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\nvec4 color \x3d v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\ncolor *\x3d mix(1.0, 1.0 - exp(-v_time), u_introFade);\ngl_FragColor \x3d getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\n}",
"streamlines.vert":"attribute vec3 a_positionAndSide;\nattribute vec3 a_timeInfo;\nattribute vec2 a_extrude;\nattribute float a_speed;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_color;\nvarying float v_side;\nvarying float v_size;\nuniform float u_featheringSize;\n#include \x3craster/flow/vv.glsl\x3e\nvoid main(void) {\nvec4 lineColor \x3d getColor(a_speed);\nfloat lineOpacity \x3d getOpacity(a_speed);\nfloat lineSize \x3d getSize(a_speed);\nvec2 position \x3d a_positionAndSide.xy;\nv_side \x3d a_positionAndSide.z;\nvec2 xy \x3d (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\ngl_Position \x3d vec4(xy, 0.0, 1.0);\nv_time \x3d a_timeInfo.x;\nv_totalTime \x3d a_timeInfo.y;\nv_timeSeed \x3d a_timeInfo.z;\nv_color \x3d lineColor;\nv_color.a *\x3d lineOpacity;\nv_color.rgb *\x3d v_color.a;\nv_size \x3d lineSize;\n}"},
"vv.glsl":"#define MAX_STOPS 8\n#ifdef VV_COLOR\nuniform float u_color_stops[MAX_STOPS];\nuniform vec4 u_color_values[MAX_STOPS];\nuniform int u_color_count;\n#else\nuniform vec4 u_color;\n#endif\n#ifdef VV_OPACITY\nuniform float u_opacity_stops[MAX_STOPS];\nuniform float u_opacity_values[MAX_STOPS];\nuniform int u_opacity_count;\n#else\nuniform float u_opacity;\n#endif\n#ifdef VV_SIZE\nuniform float u_size_stops[MAX_STOPS];\nuniform float u_size_values[MAX_STOPS];\nuniform int u_size_count;\n#else\nuniform float u_size;\n#endif\nuniform float u_featheringOffset;\nvec4 getColor(float x) {\n#ifdef VV_COLOR\nvec4 color \x3d u_color_values[0];\n{\nfor (int i \x3d 1; i \x3c MAX_STOPS; i++) {\nif (i \x3e\x3d u_color_count) {\nbreak;\n}\nfloat x1 \x3d u_color_stops[i - 1];\nif (x \x3c x1) {\nbreak;\n}\nfloat x2 \x3d u_color_stops[i];\nvec4 y2 \x3d u_color_values[i];\nif (x \x3c x2) {\nvec4 y1 \x3d u_color_values[i - 1];\ncolor \x3d y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\ncolor \x3d y2;\n}\n}\n}\n#else\nvec4 color \x3d u_color;\n#endif\nreturn color;\n}\nfloat getOpacity(float x) {\n#ifdef VV_OPACITY\nfloat opacity \x3d u_opacity_values[0];\n{\nfor (int i \x3d 1; i \x3c MAX_STOPS; i++) {\nif (i \x3e\x3d u_opacity_count) {\nbreak;\n}\nfloat x1 \x3d u_opacity_stops[i - 1];\nif (x \x3c x1) {\nbreak;\n}\nfloat x2 \x3d u_opacity_stops[i];\nfloat y2 \x3d u_opacity_values[i];\nif (x \x3c x2) {\nfloat y1 \x3d u_opacity_values[i - 1];\nopacity \x3d y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nopacity \x3d y2;\n}\n}\n}\n#else\nfloat opacity \x3d u_opacity;\n#endif\nreturn opacity;\n}\nfloat getSize(float x) {\n#ifdef VV_SIZE\nfloat size \x3d u_size_values[0];\n{\nfor (int i \x3d 1; i \x3c MAX_STOPS; i++) {\nif (i \x3e\x3d u_size_count) {\nbreak;\n}\nfloat x1 \x3d u_size_stops[i - 1];\nif (x \x3c x1) {\nbreak;\n}\nfloat x2 \x3d u_size_stops[i];\nfloat y2 \x3d u_size_values[i];\nif (x \x3c x2) {\nfloat y1 \x3d u_size_values[i - 1];\nsize \x3d y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nsize \x3d y2;\n}\n}\n}\n#else\nfloat size \x3d u_size;\n#endif\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\n}"},
hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include \x3craster/common/common.glsl\x3e\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include \x3craster/lut/colorize.glsl\x3e\n#include \x3craster/common/getSurfaceValues.glsl\x3e\nvec3 rgb2hsv(vec3 c) {\nvec4 K \x3d vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p \x3d c.g \x3c c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q \x3d c.r \x3c p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d \x3d q.x - min(q.w, q.y);\nfloat e \x3d 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\nvec4 K \x3d vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p \x3d abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\nval \x3d clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\nvec4 rgb \x3d colorize(vec4(val, val, val, 1.0), 255.0);\nvec3 hsv \x3d rgb2hsv(rgb.xyz);\nhsv.z \x3d hillshade;\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\nvec2 pixelLocation \x3d getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor \x3d vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel \x3d getPixel(pixelLocation);\nif (currentPixel.a \x3d\x3d 0.0) {\ngl_FragColor \x3d vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nfloat pv[10];\ngetSurfaceValues(u_image, pixelLocation, u_srcImageSize, pv);\nfloat alpha \x3d pv[9];\nfloat dzx \x3d (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * u_factor.s;\nfloat dzy \x3d (pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * u_factor.t;\nfloat dzd \x3d sqrt(1.0 + dzx * dzx + dzy * dzy);\nfloat hillshade \x3d 0.0;\nif (u_hillshadeType \x3d\x3d 0){\nfloat cosDelta \x3d u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\nfloat z \x3d (u_cosZs[0] + cosDelta) / dzd;\nif (z \x3c 0.0)  z \x3d 0.0;\nhillshade \x3d z;\n} else {\nfor (int k \x3d 0; k \x3c 6; k++) {\nfloat cosDelta \x3d u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\nfloat z \x3d (u_cosZs[k] + cosDelta) / dzd;\nif (z \x3c 0.0) z \x3d 0.0;\nhillshade \x3d hillshade + z * u_weights[k];\nif (k \x3d\x3d 5) break;\n}\n}\n#ifdef APPLY_COLORMAP\ngl_FragColor \x3d overlay(pv[4], u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\ngl_FragColor \x3d vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}"},
lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\nfloat clrIndex \x3d clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\nvec2 clrPosition \x3d vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\nvec4 color \x3d texture2D(u_colormap, clrPosition);\nvec4 result \x3d vec4(color.rgb, color.a * currentPixel.a);\nreturn result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include \x3craster/common/common.glsl\x3e\n#include \x3craster/lut/colorize.glsl\x3e\nvoid main() {\nvec2 pixelLocation \x3d getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor \x3d vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel \x3d getPixel(pixelLocation);\nvec4 result \x3d colorize(currentPixel, 1.0);\ngl_FragColor \x3d vec4(result.xyz, 1.0) * result.a * u_opacity;\n}"},
magdir:{"magdir.frag":"precision mediump float;\nvarying vec4 v_color;\nuniform lowp float u_opacity;\nvoid main() {\ngl_FragColor \x3d v_color * u_opacity;\n}","magdir.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nuniform float u_rotation;\nuniform vec4 u_colors[12];\nvarying vec4 v_color;\nvoid main()\n{\nfloat angle \x3d a_offset.y + u_rotation;\n#ifndef ROTATION_GEOGRAPHIC\nangle \x3d 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\n#endif\nvec2 offset \x3d vec2(cos(angle), sin(angle)) * a_offset.x;\n#ifdef DATA_RANGE\nfloat valuePercentage \x3d clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio \x3d u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage \x3d clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage \x3d (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 pos \x3d a_pos + offset * sizePercentage * u_symbolSize;\nv_color \x3d u_colors[int(a_vv.x)];\ngl_Position \x3d vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},
reproject:{"reproject.frag":"precision mediump float;\nvarying vec2 v_texcoord;\n#include \x3craster/common/common.glsl\x3e\nvoid main() {\nvec2 pixelLocation \x3d getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor \x3d vec4(0.0, 0.0, 0.0, 1.0);\nreturn;\n}\nvec4 currentPixel \x3d getPixel(pixelLocation);\ngl_FragColor \x3d vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\n}","reproject.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord \x3d a_position;\ngl_Position \x3d vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\n}"},
rfx:{aspect:{"aspect.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_cellSize;\nuniform vec2 u_srcImageSize;\n#include \x3craster/common/getSurfaceValues.glsl\x3e\nconst float pi \x3d 3.14159265359;\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha \x3d pv[9];\nfloat dzx \x3d (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) / (8.0 * u_cellSize[0]);\nfloat dzy \x3d -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) / (8.0 * u_cellSize[1]);\nalpha *\x3d sign(abs(dzx) + abs(dzy));\nfloat aspect_rad \x3d (dzx \x3d\x3d 0.0) ? (step(0.0, dzy) * 0.5 * pi + step(dzy, 0.0) * 1.5 * pi) : mod((2.5 * pi + atan(dzy, -dzx)), 2.0 * pi);\nfloat aspect \x3d aspect_rad * 180.0 / pi;\ngl_FragColor \x3d vec4(aspect, aspect, aspect, 1.0) * alpha;\n}"},
bandarithmetic:{"bandarithmetic.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\nuniform float u_adjustments[3];\n#include \x3craster/common/inverse.glsl\x3e\nvoid main() {\nvec4 pv \x3d texture2D(u_image, v_texcoord);\nvec3 pv2 \x3d u_bandIndexMat3 * pv.rgb;\nfloat nir \x3d pv2.r;\nfloat red \x3d pv2.g;\nfloat index;\n#ifdef NDXI\nindex \x3d (nir - red) * invertValue(nir + red);\n#elif defined(SR)\nindex \x3d nir * invertValue(red);\n#elif defined(CI)\nindex \x3d nir * invertValue(red) - 1.0;\n#elif defined(SAVI)\nindex \x3d (nir - red) * invertValue(nir + red + u_adjustments[0]) * (1.0 + u_adjustments[0]);\n#elif defined(TSAVI)\nfloat s \x3d u_adjustments[0];\nfloat a \x3d u_adjustments[1];\nfloat x \x3d u_adjustments[2];\nfloat y \x3d -a * s + x * (1.0 + s * s);\nindex \x3d (s * (nir - s * red - a)) * invertValue(a * nir + red + y);\n#elif defined(MSAVI)\nfloat nir2 \x3d 2.0 * nir + 1.0;\nindex \x3d 0.5 * (nir2 - sqrt(nir2 * nir2 - 8.0 * (nir - red)));\n#elif defined(GEMI)\nfloat eta \x3d (2.0 * (nir * nir - red * red) + 1.5 * nir + 0.5 * red) * invertValue(nir + red + 0.5);\nindex \x3d eta * (1.0 - 0.25 * eta) - (red - 0.125) * invertValue(1.0 - red);\n#elif defined(PVI)\nfloat a \x3d u_adjustments[0];\nfloat b \x3d u_adjustments[1];\nfloat y \x3d sqrt(1.0 + a * a);\nindex \x3d (nir - a * red - b) * invertValue(y);\n#elif defined(VARI)\nindex \x3d (pv2.g - pv2.r) * invertValue(pv2.g + pv2.r - pv2.b);\n#elif defined(MTVI)\nfloat green \x3d pv2.b;\nfloat v \x3d sqrt(pow((2.0 * nir + 1.0), 2.0) - (6.0 * nir - 5.0 * sqrt(red)) - 0.5);\nindex \x3d 1.5 * (1.2 * (nir - green) - 2.5 * (red - green)) * invertValue(v);\n#elif defined(RTVICORE)\nfloat green \x3d pv2.b;\nindex \x3d 100.0 * (nir - red) - 10.0 * (nir - green);\n#elif defined(EVI)\nfloat blue \x3d pv2.b;\nfloat denom \x3d nir + 6.0 * red - 7.5 * blue + 1.0;\nindex \x3d  (2.5 * (nir - red)) * invertValue(denom);\n#elif defined(WNDWI)\nfloat g \x3d pv2.r;\nfloat n \x3d pv2.g;\nfloat s \x3d pv2.s;\nfloat a \x3d u_adjustments[0];\nfloat denom \x3d g + a * n + (1.0 - a) * s;\nindex \x3d (g - a * n - (1 - a) * s) * invertValue(denom);\n#elif defined(BAI)\nindex \x3d invertValue(pow((0.1 - red), 2.0) + pow((0.06 - nir), 2.0));\n#else\ngl_FragColor \x3d pv;\nreturn;\n#endif\ngl_FragColor \x3d vec4(index, index, index, pv.a);\n}"},
compositeband:{"compositeband.frag":"precision mediump float;\nuniform sampler2D u_image;\nuniform sampler2D u_image1;\nuniform sampler2D u_image2;\n#ifdef ONE_CONSTANT\nuniform float u_image1Const;\n#ifdef TWO_CONSTANT\nuniform float u_image2Const;\n#endif\nuniform mat3 u_imageSwap;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\nvec4 pv0 \x3d texture2D(u_image, v_texcoord);\nfloat a \x3d pv0.r;\nfloat alpha \x3d pv0.a;\n#ifdef TWO_CONSTANT\nfloat b \x3d u_image1Const;\nfloat c \x3d u_image2Const;\nvec3 abc \x3d u_imageSwap * vec3(a, b, c);\na \x3d abc.s;\nb \x3d abc.t;\nc \x3d abc.p;\n#elif defined(ONE_CONSTANT)\nvec4 pv1 \x3d texture2D(u_image1, v_texcoord);\nfloat b \x3d pv1.r;\nfloat c \x3d u_image1Const;\nvec3 abc \x3d u_imageSwap * vec3(a, b, c);\na \x3d abc.s;\nb \x3d abc.t;\nc \x3d abc.p;\nalpha *\x3d pv1.a;\n#else\nvec4 pv1 \x3d texture2D(u_image1, v_texcoord);\nvec4 pv2 \x3d texture2D(u_image2, v_texcoord);\nfloat b \x3d pv1.r;\nfloat c \x3d pv2.r;\nalpha \x3d alpha * pv1.a * pv2.a;\n#endif\ngl_FragColor \x3d vec4(a, b, c, alpha);\n}"},
contrast:{"contrast.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#include \x3craster/common/contrastBrightness.glsl\x3e\nvoid main() {\nvec4 pv \x3d texture2D(u_image, v_texcoord);\nvec4 result \x3d adjustContrastBrightness(pv, false) ;\ngl_FragColor \x3d vec4(result.rgb * 255.0, result.a);\n}"},convolution:{"convolution.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_srcImageSize;\n#define KERNEL_SIZE_ROWS ROWS\n#define KERNEL_SIZE_COLS COLS\nuniform vec2 u_clampRange;\nuniform float u_kernel[25];\n#include \x3craster/common/mirror.glsl\x3e\nvoid main() {\nvec3 rgb \x3d vec3(0.0, 0.0, 0.0);\nvec2 resolution \x3d 1.0 / u_srcImageSize;\nfloat rowOffset \x3d -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\nfloat colOffset \x3d -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\nfloat alpha \x3d 1.0;\nfor (int row \x3d 0; row \x3c KERNEL_SIZE_ROWS; row++) {\nfloat pos_row \x3d rowOffset + float(row);\nfor (int col \x3d 0; col \x3c KERNEL_SIZE_COLS; col++) {\nvec2 pos \x3d v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\nvec4 pv \x3d texture2D(u_image, mirror(pos));\nrgb +\x3d pv.rgb * u_kernel[row * KERNEL_SIZE_COLS + col];\nalpha *\x3d pv.a;\n}\n}\nrgb \x3d clamp(rgb, u_clampRange.s, u_clampRange.t);\ngl_FragColor \x3d vec4(rgb * alpha, alpha);\n}"},
curvature:{"curvature.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform float u_zlFactor;\nuniform vec2 u_srcImageSize;\n#include \x3craster/common/getSurfaceValues.glsl\x3e\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha \x3d pv[9];\nfloat d \x3d ((pv[3] + pv[5]) * 0.5 - pv[4]);\nfloat e \x3d ((pv[1] + pv[7]) * 0.5 - pv[4]);\nfloat curvature \x3d 0.0;\n#ifdef STANDARD\ncurvature \x3d -u_zlFactor * (d + e);\ngl_FragColor \x3d vec4(curvature, curvature, curvature, alpha);\n#else\nfloat f \x3d (-pv[0] + pv[2] + pv[6] - pv[8]) / 4.0;\nfloat g \x3d (-pv[3] + pv[5]) / 2.0;\nfloat h \x3d (pv[1] - pv[7]) / 2.0;\nfloat g2 \x3d g * g;\nfloat h2 \x3d h * h;\n#ifdef PROFILE\ncurvature \x3d (u_zlFactor * (d * g2 + e * h2 + f * g * h)) / (g2 + h2);\n#else\ncurvature \x3d (-u_zlFactor * (d * h2 + e * g2 - f * g * h)) / (g2 + h2);\n#endif\n#endif\ngl_FragColor \x3d vec4(curvature, curvature, curvature, alpha);\n}"},
extractband:{"extractband.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\nvoid main() {\nvec4 pv \x3d texture2D(u_image, v_texcoord);\nvec3 pv2 \x3d u_bandIndexMat3 * pv.rgb;\ngl_FragColor \x3d vec4(pv2, pv.a);\n}"},focalstatistics:{"focalstatistics.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_srcImageSize;\n#define KERNEL_SIZE_ROWS ROWS\n#define KERNEL_SIZE_COLS COLS\nuniform vec2 u_clampRange;\n#include \x3craster/common/mirror.glsl\x3e\n#include \x3craster/common/inverse.glsl\x3e\nvoid main() {\nvec2 resolution \x3d 1.0 / u_srcImageSize;\nfloat rowOffset \x3d -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\nfloat colOffset \x3d -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\nfloat count \x3d 0.0;\n#ifdef STDDEV\nvec3 sum \x3d vec3(0.0, 0.0, 0.0);\nvec3 sum2 \x3d vec3(0.0, 0.0, 0.0);\n#endif\nvec4 currentPixel \x3d texture2D(u_image, v_texcoord);\nvec3 rgb \x3d currentPixel.rgb;\nfor (int row \x3d 0; row \x3c KERNEL_SIZE_ROWS; row++) {\nfloat pos_row \x3d rowOffset + float(row);\nfor (int col \x3d 0; col \x3c KERNEL_SIZE_COLS; col++) {\nvec2 pos \x3d v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\nvec4 pv \x3d texture2D(u_image, mirror(pos));\ncount +\x3d pv.a;\n#ifdef MIN\nrgb \x3d min(rgb, pv.rgb);\n#elif defined(MAX)\nrgb \x3d max(rgb, pv.rgb);\n#elif defined(MEAN)\nrgb +\x3d pv.rgb;\n#elif defined(STDDEV)\nsum +\x3d pv.rgb;\nsum2 +\x3d (pv.rgb * pv.rgb);\n#endif\n}\n}\n#ifdef MEAN\nrgb *\x3d invertValue(count);\n#elif defined(STDDEV)\nrgb \x3d sqrt((sum2 - sum * sum * invertValue(count)) * invertValue(count));\n#endif\nfloat alpha \x3d step(0.9999, count);\nrgb \x3d clamp(rgb, u_clampRange.s, u_clampRange.t);\n#ifdef FILL\nrgb \x3d (1.0 - currentPixel.a) * rgb + currentPixel.a * currentPixel.rgb;\n#endif\ngl_FragColor \x3d vec4(rgb * alpha, alpha);\n}"},
grayscale:{"grayscale.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec3 u_weights;\nvoid main() {\nvec4 pv \x3d texture2D(u_image, v_texcoord);\nfloat value \x3d dot(u_weights, pv.rgb);\ngl_FragColor \x3d vec4(value, value, value, pv.a);\n}"},local:{"local.frag":"precision mediump float;\nuniform sampler2D u_image;\nuniform sampler2D u_image1;\n#ifdef ONE_CONSTANT\nuniform float u_image1Const;\n#ifdef TWO_CONSTANT\nuniform float u_image2Const;\n#endif\nuniform mat3 u_imageSwap;\n#endif\nvarying vec2 v_texcoord;\nuniform vec2 u_domainRange;\n#include \x3craster/common/inverse.glsl\x3e\nvoid main() {\nvec4 pv0 \x3d texture2D(u_image, v_texcoord);\nfloat a \x3d pv0.r;\n#ifdef TWO_IMAGES\n#ifdef ONE_CONSTANT\nfloat b \x3d u_image1Const;\nvec3 abc \x3d u_imageSwap * vec3(a, b, 0);\na \x3d abc.s;\nb \x3d abc.t;\n#else\nvec4 pv1 \x3d texture2D(u_image1, v_texcoord);\nfloat b \x3d pv1.r;\n#endif\n#elif defined(CONDITIONAL)\n#ifdef TWO_CONSTANT\nfloat b \x3d u_image1Const;\nfloat c \x3d u_image2Const;\nvec3 abc \x3d u_imageSwap * vec3(a, b, c);\na \x3d abc.s;\nb \x3d abc.t;\nc \x3d abc.p;\n#elif defined(ONE_CONSTANT)\nvec4 pv1 \x3d texture2D(u_image1, v_texcoord);\nfloat b \x3d pv1.r;\nfloat c \x3d u_image1Const;\nvec3 abc \x3d u_imageSwap * vec3(a, b, c);\na \x3d abc.s;\nb \x3d abc.t;\nc \x3d abc.p;\n#else\nvec4 pv1 \x3d texture2D(u_image1, v_texcoord);\nvec4 pv2 \x3d texture2D(u_image2, v_texcoord);\nfloat b \x3d pv1.r;\nfloat c \x3d pv2.r;\n#endif\n#endif\nfloat result \x3d a;\nfloat alpha \x3d pv0.a;\n#ifdef PLUS\nresult \x3d a + b;\n#elif defined(MINUS)\nresult \x3d a - b;\n#elif defined(TIMES)\nresult \x3d a * b;\n#elif defined(DIVIDE)\nresult \x3d a * invertValue(b);\nalpha *\x3d float(abs(sign(b)));\n#elif defined(FLOATDIVIDE)\nresult \x3d a * invertValue(b);\nalpha *\x3d float(abs(sign(b)));\n#elif defined(FLOORDIVIDE)\nresult \x3d floor(a * invertValue(b));\nalpha *\x3d float(abs(sign(b)));\n#elif defined(SQUARE)\nresult \x3d a * a;\n#elif defined(SQRT)\nresult \x3d sqrt(a);\n#elif defined(POWER)\nresult \x3d pow(a, b);\n#elif defined(LN)\nresult \x3d a \x3c\x3d 0.0 ? 0.0: log(a);\nalpha *\x3d float(a \x3e 0.0);\n#elif defined(LOG_1_0)\nresult \x3d a \x3c\x3d 0.0 ? 0.0: log2(a) * invertValue(log2(10.0));\nalpha *\x3d float(a \x3e 0.0);\n#elif defined(LOG_2)\nresult \x3d a \x3c\x3d 0.0 ? 0.0: log2(a);\nalpha *\x3d float(a \x3e 0.0);\n#elif defined(EXP)\nresult \x3d exp(a);\n#elif defined(EXP_1_0)\nresult \x3d pow(10.0, a);\n#elif defined(EXP_2)\nresult \x3d pow(2.0, a);\n#elif defined(ROUNDDOWN)\nresult \x3d floor(a);\n#elif defined(ROUNDUP)\nresult \x3d ceil(a);\n#elif defined(INT)\nresult \x3d float(sign(a)) * floor(abs(a));\n#elif defined(MOD)\nresult \x3d mod(a, b);\n#elif defined(NEGATE)\nresult \x3d -a;\n#elif defined(ABS)\nresult \x3d abs(a);\n#elif defined(ACOS)\nresult \x3d abs(a) \x3e 1.0 ? 0.0: acos(a);\nalpha *\x3d step(abs(a), 1.00001);\n#elif defined(ACOSH)\nresult \x3d acosh(a);\n#elif defined(ASIN)\nresult \x3d abs(a) \x3e 1.0 ? 0.0: asin(a);\nalpha *\x3d step(abs(a), 1.00001);\n#elif defined(ASINH)\nresult \x3d asinh(a);\n#elif defined(ATAN)\nresult \x3d atan(a);\n#elif defined(ATANH)\nresult \x3d abs(a) \x3e 1.0 ? 0.0: atanh(a);\nalpha *\x3d step(abs(a), 1.0);\n#elif defined(ATAN_2)\nresult \x3d atan(a, b);\n#elif defined(COS)\nresult \x3d cos(a);\n#elif defined(COSH)\nresult \x3d cosh(a);\n#elif defined(SIN)\nresult \x3d sin(a);\n#elif defined(SINH)\nresult \x3d sinh(a);\n#elif defined(TAN)\nresult \x3d tan(a);\n#elif defined(TANH)\nresult \x3d tanh(a);\n#elif defined(BITWISEAND)\nresult \x3d a \x26 b;\n#elif defined(BITWISEOR)\nresult \x3d a | b;\n#elif defined(BITWISELEFTSHIFT)\nresult \x3d a \x3c\x3c b;\n#elif defined(BITWISERIGHTSHIFT)\nresult \x3d a \x3e\x3e b;\n#elif defined(BITWISENOT)\nresult \x3d ~a;\n#elif defined(BITWISEXOR)\nresult \x3d a ^ b;\n#elif defined(BOOLEANAND)\nresult \x3d float((a !\x3d 0.0) \x26\x26 (b !\x3d 0.0));\n#elif defined(BOOLEANNOT)\nresult \x3d float(a \x3d\x3d 0.0);\n#elif defined(BOOLEANOR)\nresult \x3d float((a !\x3d 0.0) || (b !\x3d 0.0));\n#elif defined(BOOLEANXOR)\nresult \x3d float((a !\x3d 0.0) ^^ (b !\x3d 0.0));\n#elif defined(GREATERTHAN)\nresult \x3d float(a \x3e b);\n#elif defined(GREATERTHANEQUAL)\nresult \x3d float(a \x3e\x3d b);\n#elif defined(LESSTHAN)\nresult \x3d float(a \x3c b);\n#elif defined(LESSTHANEQUAL)\nresult \x3d float(a \x3c\x3d b);\n#elif defined(EQUALTO)\nresult \x3d float(a \x3d\x3d b);\n#elif defined(NOTEQUAL)\nresult \x3d float(a !\x3d b);\n#elif defined(ISNULL)\nresult \x3d float(alpha \x3d\x3d 0.0);\nalpha \x3d 1.0;\n#elif defined(SETNULL)\nfloat maskValue \x3d float(a \x3d\x3d 0.0);\nresult \x3d maskValue * b;\nalpha *\x3d maskValue;\n#elif defined(CONDITIONAL)\nfloat weight \x3d float(abs(sign(a)));\nresult \x3d weight * b + (1.0 - weight) * c;\n#endif\nbool isInvalid \x3d result \x3c u_domainRange.s || result \x3e u_domainRange.t;\nresult \x3d isInvalid ? 0.0 : result;\nalpha *\x3d float(!isInvalid);\n#ifdef ROUND_OUTPUT\nresult \x3d floor(result + 0.5);\n#endif\ngl_FragColor \x3d vec4(result, result, result, alpha);\n}"},
mask:{"mask.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#define LEN_INCLUDED_RANGES 6\n#define LEN_NODATA_VALUES 6\nuniform highp float u_includedRanges[6];\nuniform highp float u_noDataValues[6];\nfloat maskFactor(float bandValue, float fromValue, float to) {\nfloat factor \x3d 1.0;\nfor (int i \x3d 0; i \x3c LEN_NODATA_VALUES; i++) {\nfactor *\x3d float(u_noDataValues[i] !\x3d bandValue);\n}\nfactor *\x3d step(fromValue, bandValue) * step(bandValue, to);\nreturn factor;\n}\nvoid main() {\nvec4 pv \x3d texture2D(u_image, v_texcoord);\nfloat redFactor \x3d maskFactor(pv.r, u_includedRanges[0], u_includedRanges[1]);\n#ifdef MULTI_BAND\nfloat greenFactor \x3d maskFactor(pv.g, u_includedRanges[2], u_includedRanges[3]);\nfloat blueFactor \x3d maskFactor(pv.b, u_includedRanges[4], u_includedRanges[5]);\nfloat maskFactor \x3d redFactor * greenFactor * blueFactor;\ngl_FragColor \x3d pv * maskFactor;\n#else\ngl_FragColor \x3d pv * redFactor;\n#endif\n}"},
ndvi:{"ndvi.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\n#include \x3craster/common/inverse.glsl\x3e\nvoid main() {\nvec4 pv \x3d texture2D(u_image, v_texcoord);\nvec3 pv2 \x3d u_bandIndexMat3 * pv.rgb;\nfloat nir \x3d pv2.r;\nfloat red \x3d pv2.g;\nfloat index \x3d (nir - red) * invertValue(nir + red);\n#ifdef SCALED\nindex \x3d floor((index + 1.0) * 100.0 + 0.5);\n#endif\ngl_FragColor \x3d vec4(index, index, index, pv.a);\n}"},
remap:{"remap.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#define LEN_REMAP_RANGES 18\n#define LEN_NODATA_RANGES 12\nuniform highp float u_rangeMaps[18];\nuniform highp float u_noDataRanges[12];\nuniform highp float u_unmatchMask;\nuniform vec2 u_clampRange;\nvoid main() {\nvec4 pv \x3d texture2D(u_image, v_texcoord);\nfloat factor \x3d 1.0;\nfloat bandValue \x3d pv.r;\nfor (int i \x3d 0; i \x3c LEN_NODATA_RANGES; i+\x3d2) {\nfloat inside \x3d 1.0 - step(u_noDataRanges[i], bandValue) * step(bandValue, u_noDataRanges[i+1]);\nfactor *\x3d inside;\n}\nfloat mapValue \x3d 0.0;\nfloat includeMask \x3d 0.0;\nfor (int i \x3d 0; i \x3c LEN_REMAP_RANGES; i+\x3d3) {\nfloat stepMask \x3d step(u_rangeMaps[i], bandValue) * step(bandValue, u_rangeMaps[i+1]);\nincludeMask \x3d (1.0 - stepMask) * includeMask + stepMask;\nmapValue \x3d (1.0 - stepMask) * mapValue + stepMask * u_rangeMaps[i+2];\n}\nbandValue \x3d factor * (mapValue + (1.0 - includeMask) * u_unmatchMask * pv.r);\nfloat bandMask \x3d factor * max(u_unmatchMask, includeMask);\nbandValue \x3d clamp(bandValue, u_clampRange.s, u_clampRange.t);\ngl_FragColor \x3d vec4(bandValue, bandValue, bandValue, bandMask * pv.a);\n}"},
slope:{"slope.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_cellSize;\nuniform float u_zFactor;\nuniform vec2 u_srcImageSize;\nuniform float u_pixelSizePower;\nuniform float u_pixelSizeFactor;\n#include \x3craster/common/getSurfaceValues.glsl\x3e\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha \x3d pv[9];\nfloat xf \x3d (u_zFactor + pow(u_cellSize[0], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[0]);\nfloat yf \x3d (u_zFactor + pow(u_cellSize[1], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[1]);\nfloat dzx \x3d (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * xf;\nfloat dzy \x3d -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * yf;\nfloat rise2run \x3d sqrt(dzx * dzx + dzy * dzy);\n#ifdef PERCENT_RISE\nfloat percentRise \x3d rise2run * 100.0;\ngl_FragColor \x3d vec4(percentRise, percentRise, percentRise, alpha);\n#else\nfloat degree \x3d atan(rise2run) * 57.2957795;\ngl_FragColor \x3d vec4(degree, degree, degree, alpha);\n#endif\n}"},
stretch:{"stretch.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying highp vec2 v_texcoord;\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, float gamma, float gammaCorrection) {\nval \x3d clamp(val, minCutOff, maxCutOff);\nfloat stretchedVal;\n#ifdef USE_GAMMA\nfloat tempf \x3d 1.0;\nfloat outRange \x3d maxOutput - minOutput;\nfloat relativeVal \x3d (val - minCutOff) / (maxCutOff - minCutOff);\ntempf -\x3d step(1.0, gamma) * sign(gamma - 1.0) * pow(1.0 / outRange, relativeVal * gammaCorrection);\nstretchedVal \x3d tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput;\nstretchedVal \x3d clamp(stretchedVal, minOutput, maxOutput);\n#else\nstretchedVal \x3d minOutput + (val - minCutOff) * factor;\n#endif\n#ifdef ROUND_OUTPUT\nstretchedVal \x3d floor(stretchedVal + 0.5);\n#endif\nreturn stretchedVal;\n}\nvoid main() {\nvec4 currentPixel \x3d texture2D(u_image, v_texcoord);\nfloat redVal \x3d stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_gamma[0], u_gammaCorrection[0]);\n#ifdef MULTI_BAND\nfloat greenVal \x3d stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal \x3d stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor \x3d vec4(redVal, greenVal, blueVal, currentPixel.a);\n#else\ngl_FragColor \x3d vec4(redVal, redVal, redVal, currentPixel.a);\n#endif\n}"},
vs:{"vs.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord \x3d a_pos;\ngl_Position \x3d vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},scalar:{"scalar.frag":"precision mediump float;\nuniform lowp float u_opacity;\nvarying vec2 v_pos;\nconst vec4 outlineColor \x3d vec4(0.2, 0.2, 0.2, 1.0);\nconst float outlineSize \x3d 0.02;\nconst float innerRadius \x3d 0.25;\nconst float outerRadius \x3d 0.42;\nconst float innerSquareLength \x3d 0.15;\nvoid main() {\nmediump float dist \x3d length(v_pos);\nmediump float fillalpha1 \x3d smoothstep(outerRadius, outerRadius + outlineSize, dist);\nfillalpha1 *\x3d (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\n#ifdef INNER_CIRCLE\nmediump float fillalpha2 \x3d smoothstep(innerRadius, innerRadius + outlineSize, dist);\nfillalpha2 *\x3d (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\n#else\nmediump float fillalpha2 \x3d (abs(v_pos.x) \x3c innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) \x3c innerSquareLength ? 1.0 : 0.0);\n#endif\ngl_FragColor \x3d (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\n}",
"scalar.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nvarying vec2 v_pos;\nvoid main()\n{\n#ifdef DATA_RANGE\nfloat valuePercentage \x3d clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio \x3d u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage \x3d clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage \x3d (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 size \x3d u_symbolSize * sizePercentage;\nvec2 pos \x3d a_pos + a_offset * size;\nv_pos \x3d a_offset;\ngl_Position \x3d vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},
stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include \x3craster/common/common.glsl\x3e\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include \x3craster/lut/colorize.glsl\x3e\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\nif (val \x3e\x3d maxCutOff) {\nreturn maxOutput;\n} else if (val \x3c\x3d minCutOff) {\nreturn minOutput;\n}\nfloat stretchedVal;\nif (useGamma) {\nfloat tempf \x3d 1.0;\nfloat outRange \x3d maxOutput - minOutput;\nfloat relativeVal \x3d (val - minCutOff) / (maxCutOff - minCutOff);\nif (gamma \x3e 1.0) {\ntempf -\x3d pow(1.0 / outRange, relativeVal * gammaCorrection);\n}\nstretchedVal \x3d (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n} else {\nstretchedVal \x3d minOutput + (val - minCutOff) * factor;\n}\nreturn stretchedVal;\n}\nvoid main() {\nvec2 pixelLocation \x3d getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor \x3d vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel \x3d getPixel(pixelLocation);\n#ifdef NOOP\ngl_FragColor \x3d vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\nreturn;\n#endif\nif (u_bandCount \x3d\x3d 1) {\nfloat grayVal \x3d stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\nvec4 result \x3d colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\ngl_FragColor \x3d vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\ngl_FragColor \x3d vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n} else {\nfloat redVal \x3d stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\nfloat greenVal \x3d stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal \x3d stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor \x3d vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n}\n}"}},
stencil:{"stencil.frag":"void main() {\ngl_FragColor \x3d vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nuniform mat3 u_worldExtent;\nvoid main() {\ngl_Position \x3d vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\n}"},test:{"TestShader.common.glsl":"#ifndef RETURN_RED\nvarying    vec4      v_color;\n#endif\nvarying    vec2      v_offset;","TestShader.frag":"precision highp float;\n#include \x3ctest/TestShader.common.glsl\x3e\nvoid main() {\nif (v_offset.x \x3e -.5 \x26\x26 v_offset.y \x3e -.5 \x26\x26 v_offset.x \x3c .5 \x26\x26 v_offset.y \x3c .5) {\ndiscard;\n}\n#ifdef RETURN_RED\ngl_FragColor \x3d vec4(1., 0., 0., 1.);\n#else\ngl_FragColor \x3d v_color;\n#endif\n}",
"TestShader.vert":"const float POS_PRECISION_FACTOR \x3d 10.;\nconst float OFFSET_PRECISION_FACTOR \x3d 10.;\nconst float SIZE_PRECISION_FACTOR \x3d 10.;\nattribute  vec2      a_pos_packed;\nattribute  vec2      a_offset_packed;\nattribute  float     a_size_packed;\n#ifdef DATA_DRIVEN_COLOR\nconst float u_dataDrivenColor_validValues[4] \x3d float[4](0., 0., 1., 0.);\nuniform    vec4      u_dataDrivenColor_colorFallback;\nuniform    vec4      u_dataDrivenColor_color;\n#endif\nuniform    float     u_view_zoomLevel;\n#include \x3ctest/TestShader.common.glsl\x3e\n#ifdef DATA_DRIVEN_COLOR\nvec4 getColor(float value) {\nint index \x3d -1;\nfor (int i \x3d 0; i \x3c 4; i++) {\nif (u_dataDrivenColor_validValues[i] \x3d\x3d value) {\nindex \x3d i;\nbreak;\n}\n}\nif (index \x3d\x3d -1) {\nreturn u_dataDrivenColor_colorFallback;\n}\nreturn u_dataDrivenColor_color;\n}\n#endif\nvoid main() {\nvec2  a_pos \x3d a_pos_packed / POS_PRECISION_FACTOR;\nvec2  a_offset \x3d a_offset_packed / OFFSET_PRECISION_FACTOR;\nfloat a_size \x3d a_size_packed / SIZE_PRECISION_FACTOR;\nvec4 color \x3d vec4(1., 0., 0., 1.);\n#ifdef DATA_DRIVEN_COLOR\ncolor \x3d getColor(1.);\n#endif\nvec2 offsetScaled \x3d a_offset * a_size;\nvec4 pos \x3d vec4(a_pos.xy + offsetScaled, 0., 1.);\ngl_Position \x3d pos;\n#ifndef RETURN_RED\nv_color \x3d color;\n#endif\nv_offset \x3d a_offset;\n}"},
tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\nlowp vec4 color \x3d texture2D(u_texture, v_tex);\ncolor.rgb *\x3d color.a;\ngl_FragColor \x3d color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\nmediump vec2 offset \x3d u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\nvec3 v_pos \x3d u_dvsMat3 * vec3(offset, 1.0);\ngl_Position \x3d vec4(v_pos.xy, 0.0, 1.0);\nv_tex \x3d a_pos;\n}"},
util:{"atan2.glsl":"float atan2(in float y, in float x) {\nfloat t0, t1, t2, t3, t4;\nt3 \x3d abs(x);\nt1 \x3d abs(y);\nt0 \x3d max(t3, t1);\nt1 \x3d min(t3, t1);\nt3 \x3d 1.0 / t0;\nt3 \x3d t1 * t3;\nt4 \x3d t3 * t3;\nt0 \x3d         - 0.013480470;\nt0 \x3d t0 * t4 + 0.057477314;\nt0 \x3d t0 * t4 - 0.121239071;\nt0 \x3d t0 * t4 + 0.195635925;\nt0 \x3d t0 * t4 - 0.332994597;\nt0 \x3d t0 * t4 + 0.999995630;\nt3 \x3d t0 * t3;\nt3 \x3d (abs(y) \x3e abs(x)) ? 1.570796327 - t3 : t3;\nt3 \x3d x \x3c 0.0 ?  3.141592654 - t3 : t3;\nt3 \x3d y \x3c 0.0 ? -t3 : t3;\nreturn t3;\n}",
"encoding.glsl":"const vec4 rgba2float_factors \x3d vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}"}}});