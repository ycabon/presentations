// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ./DictionaryMatcher ./IntervalMatcher ./LabelMatcher ./MapMatcher ./Matcher".split(" "),function(e,p,q,r,t,k){async function f(a,b,c,d){switch(c.type){case "simple":case "heatmap":case "dot-density":case "pie-chart":return k.FeatureMatcher.from(a,b,c,d);case "interval":return q.IntervalMatcher.fromIntervalSchema(a,b,c,d);case "dictionary":return p.DictionaryMatcher.fromDictionaryRenderer(a,c,d);case "label":return r.LabelMatcher.fromLabelSchema(a,b,c,d);case "map":return t.MapMatcher.fromMatcherSchema(a,
b,c,d);case "subtype":return l.fromSubtypes(a,b,c,d);case "cluster":return m.fromClusterSchema(a,b,c,d);default:throw Error("Impl");}}class l extends k.FeatureMatcher{constructor(a,b){super();this._subMatchers=a;this._subtypeField=b}static async fromSubtypes(a,b,c,d){const g=new Map,h=[];for(const n in c.renderers){const u=parseInt(n,10),w=f(a,b,c.renderers[n],d).then(v=>g.set(u,v));h.push(w)}await Promise.all(h);return new l(g,c.subtypeField)}match(a,b){var c=a.readAttribute(this._subtypeField);
return(c=this._subMatchers.get(c))?c.match(a,b):null}}class m extends k.FeatureMatcher{static async fromClusterSchema(a,b,c,d){const [g,h]=await Promise.all([f(a,b,c.feature,d),f(a,b,c.cluster,d)]);return new m(g,h)}constructor(a,b){super();this._featureMatcher=a;this._clusterMatcher=b}match(a,b){return 1===a.readAttribute("cluster_count")?this._featureMatcher.match(a,b):this._clusterMatcher.match(a,b)}}e.ClusterMatcher=m;e.SubtypeMatcher=l;e.createMatcher=f;Object.defineProperty(e,Symbol.toStringTag,
{value:"Module"})});