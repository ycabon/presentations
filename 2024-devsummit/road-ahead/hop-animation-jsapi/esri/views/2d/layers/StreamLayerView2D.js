// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("../../../chunks/tslib.es6 ../../../core/Error ../../../core/handleUtils ../../../core/reactiveUtils ../../../core/accessorSupport/decorators/property ../../../core/has ../../../core/Logger ../../../core/RandomLCG ../../../core/accessorSupport/decorators/subclass ../../../rest/support/FeatureSet ./FeatureLayerView2D ../../layers/StreamLayerView".split(" "),function(e,l,m,h,f,b,u,v,n,p,q,r){b=class extends r(q){constructor(){super(...arguments);this.pipelineConnectionStatus="disconnected";this.pipelineErrorString=
null}initialize(){this.addHandles([h.watch(()=>this.layer.customParameters,a=>this._worker.streamMessenger.updateCustomParameters(a)),this.layer.on("send-message-to-socket",a=>this._worker.streamMessenger.sendMessageToSocket(a)),this.layer.on("send-message-to-client",a=>{this._worker.streamMessenger.sendMessageToClient(a);this._isUserPaused&&"type"in a&&"clear"===a.type&&this.incrementSourceRefreshVersion()}),h.watch(()=>this.layer.purgeOptions,()=>this._update()),h.watch(()=>this.suspended,this._onSuspendedChange.bind(this))],
"constructor");this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new l("stream-controller",this.pipelineErrorString):null}on(a,c){if(Array.isArray(a))return m.handlesGroup(a.map(t=>this.on(t,c)));const d=["data-received","message-received"].includes(a);d&&this._worker.streamMessenger.enableEvent(a,!0);const g=super.on(a,c),k=this;return m.makeHandle(()=>{g.remove();d&&(k._worker.closed||k.hasEventListener(a)||k._worker.streamMessenger.enableEvent(a,!1))})}queryLatestObservations(a,
c){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new l("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return this._worker.features.executeQueryForLatestObservations(this._cleanUpQuery(a),c).then(d=>{d=p.fromJSON(d);d.features.forEach(g=>{g.layer=this.layer;g.sourceLayer=this.layer});return d})}detach(){super.detach();this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){null!=
this._refreshInterval&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this._worker.streamMessenger.disconnect();this._doPause()}_doConnect(){this._worker.streamMessenger.connect();this.resume()}_doClear(){this._worker.streamMessenger.clear();null==this._refreshInterval&&this.incrementSourceRefreshVersion()}_createClientOptions(){const a=this;return{...super._createClientOptions(),
get container(){return a.featureContainer},setProperty:c=>{this.set(c.propertyName,c.value)}}}};e.__decorate([f.property()],b.prototype,"pipelineConnectionStatus",void 0);e.__decorate([f.property()],b.prototype,"pipelineErrorString",void 0);e.__decorate([f.property({readOnly:!0})],b.prototype,"connectionError",null);e.__decorate([f.property({readOnly:!0})],b.prototype,"_streamConnectionStatus",null);return b=e.__decorate([n.subclass("esri.views.2d.layers.StreamLayerView2D")],b)});