// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("../../../../core/has ../../../../core/maybe ../../../../core/promiseUtils ../../../../core/accessorSupport/diffUtils ../../../../core/support/UpdatingHandles ../../../../geometry/SpatialReference ../../../../layers/support/FieldsIndex ../../engine/webgl/mesh/MultiTileMeshData ../../engine/webgl/mesh/factories/FeatureMeshFactory ../../engine/webgl/mesh/factories/ResourceProxy ./processor/BinningStrategy ./processor/ClusterStrategy ./processor/FeatureUpdateStrategy ./support/AttributeStore ./support/ComputedAttributeStorage ../support/UpdateTracking2D ../../../support/QueueProcessor".split(" "),
function(l,n,g,k,p,q,r,t,u,v,w,x,y,z,A,B,C){class D{constructor(a,b){this._connection=a;this._source=b;this._version=1;this._updatingHandles=new p.UpdatingHandles;this._queue=new C.QueueProcessor({concurrency:1,process:c=>this._process(c)});this._proxy=new v.ResourceProxy({fetch:(c,d)=>this._connection.layerView.fetch(c,d),fetchDictionary:(c,d)=>this._connection.layerView.fetchDictionary(c,d)});this._attributeStore=new z.AttributeStore({type:"remote",initialize:c=>g.ignoreAbortErrors(this._connection.container.initializeAttributeView(c)),
update:c=>g.ignoreAbortErrors(this._connection.container.updateAttributeView(c)),render:()=>g.ignoreAbortErrors(this._connection.container.requestRender())});this._updateTracking=new B.UpdateTracking2D({debugName:"Processor"});this._updateTracking.addUpdateTracking("AttributeStore",this._attributeStore.updateTracking)}destroy(){this._proxy.destory();this._strategy?.destroy();this._attributeStore.destroy();this._updateTracking.destroy()}get aggregateQueryEngine(){return this._strategy?.aggregateQueryEngine}get updateTracking(){return this._updateTracking}getDisplayFeatures(a){return this._strategy?
this._strategy.getDisplayFeatures(a):{features:[],aggregates:[]}}getFeatureObjectIdsForAggregate(a){return this._strategy?this._strategy.getFeatureObjectIdsForAggregate(a):[]}setHighlight(a){this._strategy?this._attributeStore.setHighlight(a.map(({objectId:b,highlightFlags:c})=>({objectId:b,highlightFlags:c,displayId:this._strategy?.getDisplayIds([b])[0]}))):this._attributeStore.setHighlight(a.map(({objectId:b,highlightFlags:c})=>({objectId:b,highlightFlags:c,displayId:-1})))}onSubscribe(a){this._strategy?.onSubscribe(a)}onUnsubscribe(a){this._strategy?.onUnsubscribe(a)}async update(a,
b,c,d,f){const e=a.processor,h=k.diff(this._schema,e);if(h||d){l("esri-2d-update-debug")&&console.debug(`Version[${this._version}] SymbolProcessor.update`,{changes:h,schema:e});this._schema=e;var E=a.source.service;a=q.fromJSON(a.source.dataFilter.outSpatialReference);var m=new A.ComputedAttributeStorage({fields:new r,spatialReference:a});await this._attributeStore.update(e.storage,m,E,a,b);this._strategy?.invalidateAttributeData();if(d||k.hasDiff(h,"mesh")){k.hasDiff(h,"mesh.strategy")&&await this._updateStrategy(e.mesh.strategy,
a,f);this._updateSortKey(m,"sortKey"in e.mesh?e.mesh.sortKey:null);if(k.hasDiff(h,"mesh.factory")||"dictionary"===e.mesh.factory.symbology.type)this._factory=await u.FeatureMeshFactory.create(m,this._proxy,e.mesh.factory,c);this._invalidate();this._version=b;this._attributeStore.incrementDisplayIdGeneration();return this._connection.container.updateRenderState(this._version)}}}async applyOverride(a){if(this._strategy){var b=this._strategy.applyOverride(a);for await(const c of b)try{await this._process(c)}catch(d){}this._source.applyOverride(a)}}async updateChunks(){return this._updatingHandles.addPromise(this._doUpdateChunks())}async _doUpdateChunks(){if(this._strategy){var a=
this._strategy.updateChunks(),b=[];for await(const c of a)a=this._queue.push(c).catch(d=>g.throwIfNotAbortError(d)),b.push(a);try{await Promise.all(b)}catch(c){}}}async _updateStrategy(a,b,c){this._strategy?.destroy();switch(a.type){case "feature":this._strategy=new y.FeatureUpdateStrategy(this._source,this._attributeStore);break;case "binning":this._strategy=await w.BinningStrategy.create(a,b,this._source,this._attributeStore);break;case "cluster":this._strategy=await x.ClusterStrategy.create(this._connection,
a,b,this._source,this._attributeStore)}for(const d of c)this._strategy.onSubscribe(d)}async _updateSortKey(a,b){this._sortInfo=n.destroyMaybe(this._sortInfo?.computed);null!=b&&(a=b.byRenderer?null:await a.createComputedField(b),this._sortInfo={...b,computed:a})}_invalidate(){this._strategy&&this._strategy.invalidate()}async _process(a){const b=a.subscription;l("esri-2d-update-debug")&&console.debug(`Version[${this._version}] Tile[${b.tile.key.id}, end=${a.end}] Processor._process`);await this._fetchResources(a);
g.throwIfAborted(b.signal);var c=await this._write(a,b.tile.arcadeEvaluationOptions);const {message:d,transferList:f}=c.serialize(b.tile.tileInfoView.tileInfo.isWrappable);c=a.createMessage(d,this._version);g.throwIfAborted(b.signal);await this._connection.container.onMessage(c,{signal:b.signal,transferList:f});l("esri-2d-update-debug")&&console.debug(`Version[${this._version}] Tile[${b.tile.key.id}, end=${a.end}] Processor._process.await`)}async _fetchResources(a){await this._fetchMatcherResources(a);
await this._fetchWriterResources(a)}async _fetchMatcherResources(a){if(a.reader)return this._factory.enqueueMatcherRequests(this._proxy,a.reader)}async _fetchWriterResources(a){if(a.reader){var b=a.reader.getCursor();for(a=a.subscription.tile.arcadeEvaluationOptions;b.next();)this._factory.enqueueWriterRequests(this._proxy,b,a);await this._proxy.fetchEnqueuedResources()}}async _write(a,b){const c=a.subscription.tile;a=a.reader?.getCursor();var d=a?.getSize()??0;d=new t.MultiTileMeshData(c.key.id,
!0,d);if(!a)return d;const f=c.arcadeEvaluationOptions;for(;a.next();){const e=this._getSortKeyValue(a,b);d.entityStart(a.getDisplayId(),e);this._factory.write(d,this._proxy,a,f,c.level);d.entityEnd()}return d}_getSortKeyValue(a,b){if(!this._sortInfo)return 0;const {computed:c,order:d,byRenderer:f}=this._sortInfo;a=f?this._factory.getSortKey(a,b):c?.read(a,b);return null==a||isNaN(a)?0:a*("asc"===d?-1:1)}}return D});