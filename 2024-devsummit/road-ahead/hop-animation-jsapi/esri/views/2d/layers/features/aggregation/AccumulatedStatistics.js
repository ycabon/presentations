// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define(["exports","../../../arcade/callExpressionWithCursor"],function(h,r){function t(a){switch(a.statisticType){case "min":return new k(a);case "max":return new l(a);case "avg":return new m(a);case "avg_angle":return new n(a);case "sum":return new f(a);case "mode":return new p(a);case "count":return new f(a)}}const q=Math.PI/180;class g{static create(a){return new g(a.map(b=>t(b)))}constructor(a){this._statistics=a}values(){return this._statistics.values()}insert(a,b){for(const c of this._statistics)c.insert(a,
b)}merge(a){for(let b=0;b<this._statistics.length;b++){const c=this._statistics[b],e=a._statistics[b];if(c.field!==e.field)throw Error("InternalError: Tried to merge incompatible statistics");c.merge(e)}}clone(){return new g(this._statistics.map(a=>a.clone()))}}class d{constructor(a){this.field=a}insert(a,b){this.field.computed&&(a=this.field.computed.read(a,b),r.isBadArcadeResult(a)||this._insertValue(a))}}class k extends d{constructor(){super(...arguments);this.type="min";this.value=Number.MAX_VALUE}_insertValue(a){this.value=
Math.min(this.value,a)}merge(a){this.value=Math.min(this.value,a.value)}clone(){const a=new k(this.field);a.value=this.value;return a}}class l extends d{constructor(){super(...arguments);this.type="max";this.value=Number.MIN_VALUE}_insertValue(a){this.value=Math.max(this.value,a)}merge(a){this.value=Math.max(this.value,a.value)}clone(){const a=new l(this.field);a.value=this.value;return a}}class f extends d{constructor(){super(...arguments);this.type="sum";this.value=0}_insertValue(a){this.value+=
a}merge(a){this.value+=a.value}clone(){const a=new f(this.field);a.value=this.value;return a}}class m extends d{constructor(){super(...arguments);this.type="avg";this._count=this._total=0}get value(){return this._total/this._count}_insertValue(a){this._total+=a;this._count+=1}merge(a){this._total+=a._total;this._count+=a._count}clone(){const a=new m(this.field);a._total=this._total;a._count=this._count;return a}}class n extends d{constructor(){super(...arguments);this.type="avg_angle";this._count=
this._y=this._x=0}get value(){return 180/Math.PI*Math.atan2(this._y/this._count,this._x/this._count)}_insertValue(a){this._x+=Math.cos(a*q);this._y+=Math.sin(a*q);this._count+=1}merge(a){this._x+=a._x;this._y+=a._y;this._count+=a._count}clone(){const a=new n(this.field);a._x=this._x;a._y=this._y;a._count=this._count;return a}}class p extends d{constructor(){super(...arguments);this._frequencies=new Map}get value(){let a=0,b;for(const [c,e]of this._frequencies.entries())e>a&&(a=e,b=c);return b}_insertValue(a){const b=
this._frequencies.get(a);null==b?this._frequencies.set(a,1):this._frequencies.set(a,b+1)}merge(a){for(const [b,c]of a._frequencies.entries())a=this._frequencies.get(b),null==a?this._frequencies.set(b,c):this._frequencies.set(b,a+c)}clone(){const a=new p(this.field);a._frequencies=new Map(this._frequencies);return a}}h.AccumulatedStatistics=g;Object.defineProperty(h,Symbol.toStringTag,{value:"Module"})});