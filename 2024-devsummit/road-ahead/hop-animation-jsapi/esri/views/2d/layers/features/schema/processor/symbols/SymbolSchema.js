// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../../../../symbols ../../../../../../../core/screenUtils ../../../../../../../renderers/support/heatmapUtils ../../../../../../../symbols/cim/CIMSymbolHelper ../../../../../../../symbols/cim/enums ../../../../../../../symbols/cim/SDFHelper ../../../../../engine/webgl/alignmentUtils ../../../../../engine/webgl/color ../../../../../engine/webgl/definitions ../../../../../engine/webgl/shaderGraph/techniques/TechniqueRegistry ../schemaUtils ../VisualVariablesSchema ./ComplexSymbolSchema ../../../../../../../symbols/SimpleFillSymbol".split(" "),
function(w,V,D,L,r,z,M,N,O,A,k,B,t,u,P){async function H(a,b){if(!a)return[];switch(a.type){case "simple-fill":return I(a,b);case "picture-fill":{var {outline:c}=a;const {uniforms:l,schemaOptions:E}=b;var {store:f}=E,e=[];const J=r.CIMSymbolHelper.createPictureFillRasterizationParam(a);if(J){var {width:d,height:h,xoffset:v,yoffset:n,xscale:p,yscale:m}=a;a={color:[255,255,255,255],sprite:J,height:h,aspectRatio:d/h,offsetX:v,offsetY:n,scaleX:p,scaleY:m,angle:0,applyRandomOffset:!1,sampleAlphaOnly:!1,
scaleProportionally:!1,effects:null,scaleInfo:null};"solid"===c?.style?a=[f.ensureInstance(k.Techniques.complexOutlineFill,{geometry:{visualVariableColor:l.visualVariableColor,visualVariableOpacity:l.visualVariableOpacity,visualVariableSizeScaleStops:l.visualVariableSizeOutlineScaleStops,visualVariableSizeMinMaxValue:null,visualVariableSizeStops:null,visualVariableSizeUnitValue:null}},{zoomRange:!1}).createMeshInfo({params:{...a,...F(c,!!l.visualVariableSizeOutlineScaleStops)}})]:(f=f.ensureInstance(k.Techniques.complexFill,
{geometry:{visualVariableColor:l.visualVariableColor,visualVariableOpacity:l.visualVariableOpacity}},{zoomRange:!1}),e.push(f.createMeshInfo({params:a})),c&&e.push(...x(c,b,!0)),a=e)}else a=[]}return a;case "simple-marker":return Q(a,b);case "picture-marker":{const {uniforms:l,schemaOptions:E}=b;({store:b}=E);b=b.ensureInstance(k.Techniques.marker,{geometry:{visualVariableColor:l.visualVariableColor,visualVariableOpacity:l.visualVariableOpacity,visualVariableSizeMinMaxValue:l.visualVariableSizeMinMaxValue,
visualVariableSizeScaleStops:l.visualVariableSizeScaleStops,visualVariableSizeStops:l.visualVariableSizeStops,visualVariableSizeUnitValue:l.visualVariableSizeUnitValue,visualVariableRotation:l.visualVariableRotation}},{zoomRange:!1});a=(c=r.CIMSymbolHelper.createPictureMarkerRasterizationParam(a))?[b.createMeshInfo({params:{type:"picture",color:[255,255,255,255],height:a.height,width:a.width,offsetX:a.xoffset,offsetY:a.yoffset,angle:a.angle,outlineColor:null,outlineSize:0,referenceSize:a.height,sprite:c,
overrideOutlineColor:!1,hasSizeVV:u.hasSizeVVUniform(l),placement:null,effects:null,transforms:null,scaleInfo:null,minPixelBuffer:t.getMaxSizeVVSize(l)}})]:[]}return a;case "simple-line":return x(a,b,!1);case "text":const {uniforms:g,schemaOptions:G}=b;({store:b}=G);return[b.ensureInstance(k.Techniques.text,{geometry:{visualVariableColor:g.visualVariableColor,visualVariableOpacity:g.visualVariableOpacity,visualVariableRotation:g.visualVariableRotation,visualVariableSizeMinMaxValue:g.visualVariableSizeMinMaxValue,
visualVariableSizeScaleStops:g.visualVariableSizeScaleStops,visualVariableSizeStops:g.visualVariableSizeStops,visualVariableSizeUnitValue:g.visualVariableSizeUnitValue}},{zoomRange:!1,clipAngle:!1,referenceSymbol:!1}).createMeshInfo({params:{boxBackgroundColor:a.backgroundColor?.toArray(),boxBorderLineColor:a.borderLineColor?.toArray(),boxBorderLineSize:a.borderLineSize??0,color:a.color?.toArray()??[0,0,0,0],offsetX:a.xoffset,offsetY:a.yoffset,postAngle:a.angle,fontSize:a.font.size,decoration:a.font.decoration,
haloColor:a.haloColor?.toArray()??[0,0,0,0],haloFontSize:a.haloSize??0,lineWidth:a.lineWidth,lineHeightRatio:a.lineHeight,horizontalAlignment:a.horizontalAlignment,verticalAlignment:a.verticalAlignment,useCIMAngleBehavior:!1,glyphs:{type:"text-rasterization-param",resource:{type:"text",font:a.font.toJSON(),textString:a.text,symbol:r.CIMSymbolHelper.createCIMTextSymbolfromTextSymbol(a)},overrides:[]},referenceSize:null,effects:null,placement:null,scaleInfo:null,transforms:null,minPixelBuffer:t.getMaxSizeVVSize(g),
repeatLabel:null,repeatLabelDistance:null,allowOverrun:null,labelPosition:null,isLineLabel:!1}})];case "label":const {schemaOptions:y,uniforms:q}=b;({store:e}=y);b=a.symbol;const {allowOverrun:C,repeatLabel:R,repeatLabelDistance:S}=a;c={maxScale:a.maxScale??0,minScale:a.minScale??0};e=e.ensureInstance(k.Techniques.label,{geometry:{visualVariableColor:null,visualVariableOpacity:null,visualVariableRotation:q.visualVariableRotation,visualVariableSizeMinMaxValue:q.visualVariableSizeMinMaxValue,visualVariableSizeScaleStops:q.visualVariableSizeScaleStops,
visualVariableSizeStops:q.visualVariableSizeStops,visualVariableSizeUnitValue:q.visualVariableSizeUnitValue}},{zoomRange:!0,clipAngle:!0,referenceSymbol:!0});const [T,U]=N.getAlignmentFromPlacement(a.labelPlacement);return[e.createMeshInfo({params:{boxBackgroundColor:b.backgroundColor?.toArray(),boxBorderLineColor:b.borderLineColor?.toArray(),boxBorderLineSize:b.borderLineSize??0,color:b.color?.toArray()??[0,0,0,0],offsetX:b.xoffset,offsetY:b.yoffset,postAngle:b.angle,fontSize:b.font.size,decoration:b.font.decoration,
haloColor:b.haloColor?.toArray()??[0,0,0,0],haloFontSize:b.haloSize??0,lineWidth:b.lineWidth,lineHeightRatio:b.lineHeight,horizontalAlignment:T,verticalAlignment:U,repeatLabel:R,repeatLabelDistance:D.pt2px(S),allowOverrun:C,labelPosition:a.labelPosition,scaleInfo:c,minPixelBuffer:t.getMaxSizeVVSize(q),useCIMAngleBehavior:!1,glyphs:{type:"text-rasterization-param",resource:{type:"text",font:b.font.toJSON(),textString:b.text,symbol:r.CIMSymbolHelper.createCIMTextSymbolfromTextSymbol(b),primitiveName:"label-override"},
overrides:[{type:"CIMPrimitiveOverride",valueExpressionInfo:{type:"CIMExpressionInfo",expression:a.labelExpressionInfo?.expression??a.labelExpression,returnType:"String"},primitiveName:"label-override",propertyName:"textString",defaultValue:""}]},referenceSize:null,effects:null,placement:null,transforms:null,isLineLabel:!1}})];case "cim":return u.createComplexSymbolInstances(a.data,b);case "web-style":return a=await a.fetchCIMSymbol(),u.createComplexSymbolInstances(a.data,b);default:throw Error(`symbol not supported ${a.type}`);
}}function K(a){if("path"===a.style){if(null==a.path)throw Error("Symbol with a style of type path must define a path");return{type:"sprite-rasterization-param",overrides:[],resource:{type:"path",path:a.path,asFill:!0}}}const b=r.CIMSymbolHelper.fromSimpleMarker(a);if("outline"in a&&a.outline&&(a=a.outline.style,"solid"!==a&&"none"!==a)){if(!b||!b.symbolLayers)throw Error("Error handling marker! ");return{type:"sprite-rasterization-param",resource:b.symbolLayers[0],overrides:[]}}return{type:"sprite-rasterization-param",
resource:M.getSDFInfo(b),overrides:[]}}async function Q(a,b){const {uniforms:c,schemaOptions:f}=b;var {store:e}=f;if("path"===a.style)return a=r.CIMSymbolHelper.fromSimpleMarker(a),u.createComplexSymbolInstances({type:"CIMSymbolReference",symbol:a},b);b=e.ensureInstance(k.Techniques.marker,{geometry:{visualVariableColor:c.visualVariableColor,visualVariableOpacity:c.visualVariableOpacity,visualVariableSizeMinMaxValue:c.visualVariableSizeMinMaxValue,visualVariableSizeScaleStops:c.visualVariableSizeScaleStops,
visualVariableSizeStops:c.visualVariableSizeStops,visualVariableSizeUnitValue:c.visualVariableSizeUnitValue,visualVariableRotation:c.visualVariableRotation}},{zoomRange:!1});e=K(a);let d=a.color?.toArray()??[0,0,0,0];"CIMVectorMarker"===e.resource.type&&(d=[255,255,255,255]);const h=a.size,v=null!=c.visualVariableColor&&("cross"===a.style||"x"===a.style);return[b.createMeshInfo({params:{type:"simple",color:d,height:h,width:h*("triangle"===a.style?124/116:1),offsetX:a.xoffset,offsetY:a.yoffset,angle:a.angle,
outlineColor:a.outline?.color?.toArray()??[0,0,0,0],outlineSize:a.outline?.width??1,referenceSize:h,sprite:e,overrideOutlineColor:v,hasSizeVV:u.hasSizeVVUniform(c),placement:null,effects:null,transforms:null,scaleInfo:null,minPixelBuffer:t.getMaxSizeVVSize(c)}})]}function F(a,b){const c=a.width;return{outlineColor:a.color?.toArray()||[0,0,0,1],width:c,referenceWidth:c,capType:a.cap??"round",joinType:a.join??"round",miterLimit:a.miterLimit,hasSizeVV:b}}function I(a,b){var {style:c}=a;if(c&&"none"!==
c&&"solid"!==c){{const {uniforms:d,schemaOptions:h}=b;var {store:f}=h;c=a.color?.toArray()??[0,0,0,0];var e={type:"sprite-rasterization-param",resource:{type:"fill-style",style:a.style},overrides:[]};"solid"===a.outline?.style?a=[f.ensureInstance(k.Techniques.patternOutlineFill,{geometry:{visualVariableColor:d.visualVariableColor,visualVariableOpacity:d.visualVariableOpacity,visualVariableSizeScaleStops:d.visualVariableSizeOutlineScaleStops,visualVariableSizeMinMaxValue:null,visualVariableSizeStops:null,
visualVariableSizeUnitValue:null}},{zoomRange:!1}).createMeshInfo({params:{color:c,...F(a.outline,!!d.visualVariableSizeOutlineScaleStops),sprite:e,scaleInfo:null,effects:null}})]:(c=[],f=f.ensureInstance(k.Techniques.patternFill,{geometry:{visualVariableColor:d.visualVariableColor,visualVariableOpacity:d.visualVariableOpacity}},{zoomRange:!1}).createMeshInfo({params:{color:a.color?.toArray()??[0,0,0,0],sprite:e,scaleInfo:null,effects:null}}),c.push(f),a.outline&&c.push(...x(a.outline,b,!0)),a=c)}return a}{const {uniforms:d,
schemaOptions:h}=b;({store:f}=h);e=a.color?.toArray()??[0,0,0,0];"solid"===a.outline?.style?a=[f.ensureInstance(k.Techniques.outlineFill,{geometry:{visualVariableColor:d.visualVariableColor,visualVariableOpacity:d.visualVariableOpacity,visualVariableSizeScaleStops:d.visualVariableSizeOutlineScaleStops,visualVariableSizeMinMaxValue:null,visualVariableSizeStops:null,visualVariableSizeUnitValue:null}},{zoomRange:!1}).createMeshInfo({params:{color:"none"!==a.style?e:[0,0,0,0],...F(a.outline,!!d.visualVariableSizeOutlineScaleStops),
scaleInfo:null,effects:null}})]:(c=[],f=f.ensureInstance(k.Techniques.fill,{geometry:{visualVariableColor:d.visualVariableColor,visualVariableOpacity:d.visualVariableOpacity}},{zoomRange:!1}).createMeshInfo({params:{color:e,scaleInfo:null,effects:null}}),c.push(f),a.outline&&c.push(...x(a.outline,b,!0)),a=c)}return a}function x(a,b,c){const {color:f,style:e,width:d,cap:h,join:v}=a;var {schemaOptions:n}=b,{store:p}=n;n=[];var m=c?{...t.noVisualVariables,visualVariableSizeScaleStops:b.uniforms.visualVariableSizeOutlineScaleStops}:
b.uniforms;c={geometry:{visualVariableColor:m.visualVariableColor,visualVariableOpacity:m.visualVariableOpacity,visualVariableSizeMinMaxValue:m.visualVariableSizeMinMaxValue,visualVariableSizeScaleStops:m.visualVariableSizeScaleStops,visualVariableSizeStops:m.visualVariableSizeStops,visualVariableSizeUnitValue:m.visualVariableSizeUnitValue}};m={color:null!=f&&"none"!==e?f.toArray():[0,0,0,0],width:d,referenceWidth:d,capType:h,joinType:v,miterLimit:a.miterLimit,hasSizeVV:u.hasSizeVVUniform(m),effects:null,
scaleInfo:null};null==e||"solid"===e||"none"===e?(p=p.ensureInstance(k.Techniques.line,c,{zoomRange:!1}).createMeshInfo({params:m}),n.push(p)):(p=p.ensureInstance(k.Techniques.texturedLine,c,{zoomRange:!1}).createMeshInfo({params:{...m,shouldScaleDash:!0,shouldSampleAlphaOnly:!1,isSDF:!0,sprite:{type:"sprite-rasterization-param",resource:{type:"dash",dashTemplate:r.slsDashToTemplateArray(e,h),capStyle:r.capTypeToEnum(h)},overrides:[]}}}),n.push(p));if(null!=a.marker){p=n.push;c=a.marker;const {uniforms:g,
schemaOptions:G}=b;({store:b}=G);b=b.ensureInstance(k.Techniques.marker,{geometry:{visualVariableColor:g.visualVariableColor,visualVariableOpacity:g.visualVariableOpacity,visualVariableSizeMinMaxValue:g.visualVariableSizeMinMaxValue,visualVariableSizeScaleStops:g.visualVariableSizeScaleStops,visualVariableSizeStops:g.visualVariableSizeStops,visualVariableSizeUnitValue:g.visualVariableSizeUnitValue,visualVariableRotation:g.visualVariableRotation}},{zoomRange:!1});m=K(c);const y=6*a.width,q=c.color?.toArray()??
a.color?.toArray()??[0,0,0,0],C="cross"===c.style||"x"===c.style;switch(c.placement){case "begin-end":c=z.ExtremityPlacement.Both;break;case "begin":c=z.ExtremityPlacement.JustBegin;break;case "end":c=z.ExtremityPlacement.JustEnd;break;default:c=z.ExtremityPlacement.None}c={type:"cim-marker-placement-info",placement:{type:"CIMMarkerPlacementAtExtremities",angleToLine:!0,offset:0,extremityPlacement:c,offsetAlongLine:0},overrides:[]};a=[b.createMeshInfo({params:{type:"simple",color:q,height:y,width:y,
offsetX:0,offsetY:0,angle:0,outlineColor:q,outlineSize:C?a.width:0,referenceSize:y/6,sprite:m,overrideOutlineColor:C&&null!=g.visualVariableColor,hasSizeVV:u.hasSizeVVUniform(g),placement:c,transforms:null,effects:null,scaleInfo:null,minPixelBuffer:t.getMaxSizeVVSize(g)}})];p.call(n,...a)}return n}w.createDotDensityMeshSchemas=async function(a,b){var {schemaOptions:c}=b;({store:c}=c);var f=Array(A.dotDensityMaxFields),e=Array(A.dotDensityMaxFields/4);for(var d=0;d<A.dotDensityMaxFields;d++){const h=
d<a.attributes.length?a.attributes[d].color:null;f[d]=[0,0,0,0];O.writeColor(f[d],h)}for(d=0;d<A.dotDensityMaxFields/4;d++)e[d]=[0,0,0,0],e[d][0]=4*d<a.attributes.length?1:0,e[d][1]=4*d+1<a.attributes.length?1:0,e[d][2]=4*d+2<a.attributes.length?1:0,e[d][3]=4*d+3<a.attributes.length?1:0;f=c.ensureInstance(k.Techniques.dotDensity,{isActive:e,colors:f,dotValue:a.dotValue,dotScale:a.referenceScale,blending:a.dotBlendingEnabled,dotSize:a.dotSize,seed:a.seed},{}).createMeshInfo({params:{effects:null}});
c=[];a.backgroundColor&&(e=new P({color:a.backgroundColor,outline:null}),e=await H(e,b),c.push(...e));c.push(f);a.outline&&(a=x(a.outline,b,!0),c.push(...a));return c};w.createHeatmapMeshSchemas=async function(a,b){({store:b}=b);const {radius:c,minDensity:f,maxDensity:e,referenceScale:d,field:h,valueExpression:v,colorStops:n}=a;a=L.generateGradient(n);return[b.ensureInstance(k.Techniques.heatmap,{radius:D.pt2px(c),minDensity:f,maxDensity:e,referenceScale:d,isFieldActive:!(!h&&!v),gradient:a,gradientHash:a.join(",")},
{}).createMeshInfo({params:{effects:null}})]};w.createLineInstance=x;w.createPieChartMeshSchemas=function(a,b){var {store:c}=b;const f=a.outline?.width||1,e=t.createVisualVariableUniforms(a);c=c.ensureInstance(k.Techniques.pieChart,{geometry:{outlineWidth:Math.round(D.pt2px(f)),defaultColor:B.premultiplyColor(a.defaultColor),outlineColor:B.premultiplyColor(a.outline?.color),othersColor:B.premultiplyColor(a.othersCategory?.color),donutRatio:a.holePercentage,sectorThreshold:a.othersCategory?.threshold||
0,colors:a.attributes.map(d=>B.premultiplyColor(d.color)),visualVariableOpacity:e.visualVariableOpacity,visualVariableSizeMinMaxValue:e.visualVariableSizeMinMaxValue,visualVariableSizeScaleStops:e.visualVariableSizeScaleStops,visualVariableSizeStops:e.visualVariableSizeStops,visualVariableSizeUnitValue:e.visualVariableSizeUnitValue,hittestUniforms:null},numberOfFields:a.attributes.length},{}).createMeshInfo({params:{size:a.size,outlineWidth:f,effects:null,scaleInfo:null}});return[...(a.backgroundFillSymbol?
I(a.backgroundFillSymbol,{schemaOptions:b,path:"",uniforms:t.noVisualVariables}):[]),c]};w.createSymbolMeshSchemas=H;Object.defineProperty(w,Symbol.toStringTag,{value:"Module"})});