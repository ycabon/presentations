// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../../../core/Error ../../../../../../rest/support/Query ./ALoadStrategy ./support/queryAdapters ../../../../../support/QueueProcessor".split(" "),function(g,h,k,l,m,n){class p extends l.ALoadStrategy{constructor(a,b,d,c,f){super(d);this._serviceInfo=a;this._queryInfo=b;this._metadata=c;this._eventLog=f;this._queue=new n.QueueProcessor({concurrency:8,process:async e=>this._adapter.executeQuery(e.query.inner,{signal:e.options?.signal,query:e.query.customParameters})});this._adapter=
m.createQueryAdapter(a,c)}async updateFields(a){this._queryInfo.updateFields(a);a=Array.from(this._store.chunks()).map(async b=>{const d=k.fromJSON(b.queryInfo.queryJSON);if(d)try{return await this._tryUpdateFields(b.reader,d),null}catch(c){return c}});a=(await Promise.all(a)).filter(b=>b);if(a.length)throw new h("featurelayer-query","Encountered errors when downloading fields",{errors:a});}async queryOverride({edits:a}){const b=[],d=[];for(const c of a.removed)null==c.objectId||-1===c.objectId?d.push(c.globalId):
b.push(c.objectId);d.length&&b.push(...this._mapGlobalIdsToObjectIds(d));a=a.addOrModified.map(({objectId:c})=>c);a=this._queryInfo.createQuery({objectIds:a});return{reader:await this._fetch(a),removed:b}}_mapGlobalIdsToObjectIds(a){const b=new Set(a),d="globalIdField"in this._serviceInfo?this._serviceInfo.globalIdField:null;if(null==d)throw Error("InternalError: Recieved an edit with globalIds, but not supported by the service");const c=[];this._store.forEachUnsafe(f=>{const e=f.readAttribute(d);
b.has(e)&&c.push(f.getObjectId())});return c}async _fetch(a,b){b=await this._enqueue(a,b);await this._tryUpdateFields(b,a.inner);return b}async _tryUpdateFields(a,b){if(b=this._queryInfo.createPatchFieldsQuery(b,a.fields))b=await this._enqueue(b,this._options),a.joinAttributes(b)}async _enqueue(a,b){this._eventLog.onEvent({type:"fetchStart"});return this._queue.push({query:a,options:b}).finally(()=>{this._eventLog.onEvent({type:"fetchEnd",done:0===this._queue.length})})}}g.AFetchLoadStrategy=p;Object.defineProperty(g,
Symbol.toStringTag,{value:"Module"})});