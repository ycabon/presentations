// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../../../core/Evented ../../../../../../core/handleUtils ../../../../../../core/has ../../../../../../core/maybe ../../../../../../layers/graphics/data/StreamFeatureManager ../../../../../../layers/graphics/sources/connections/createConnection ../StreamConnectionState ../StreamFeatureStore ./ALoadStrategy ./chunks/StreamSourceChunk".split(" "),function(l,m,n,y,p,q,r,t,u,v,w){class x extends v.ALoadStrategy{constructor(a,b,c,d,e){super(c);this._service=a;this._dataFilter=b;
this._streamOptions=d;this._connectionState=new t.StreamConnectionState;this.events=new m;const {objectIdField:f,timeInfo:g}=a;({purgeOptions:a}=b);this._stagingStore=new u.StreamFeatureStore(e,h=>this.events.emit("features-updated",h));this._manager=new q.StreamFeatureManager(this._stagingStore,f,g,a);this.connect()}destroy(){super.destroy();this.disconnect()}get about(){return{willQueryAllFeatures:!1,willQueryFullResolutionGeometry:!1}}get connectionStatus(){return this._connectionState.connectionStatus}get errorString(){return this._connectionState?.errorString}async refresh(){this._manager.checkForUpdates();
this._chunk&&this._store.remove(this._chunk);this._chunk=new w.StreamSourceChunk(this._stagingStore.reader);this._store.insert(this._chunk);this.events.emit("tick")}async updateFields(a){throw Error("Updating available fields not supported for StreamLayer");}async load(a){}unload(a){}disconnect(){this._connection=p.destroyMaybe(this._connection);this._connectionState.connection=null;this._handlesGroup?.remove()}connect(){if(null==this._connection){var {geometryType:a,source:b,spatialReference:c}=
this._service,{maxReconnectionAttempts:d,maxReconnectionInterval:e,geometryDefinition:f,definitionExpression:g,customParameters:h}=this._dataFilter;this._connection=r.createConnection(b,c,this._streamOptions.outSR,a,g,f,d,e,h);this._handlesGroup=n.handlesGroup([this._connection.on("data-received",k=>this._onFeature(k)),this._connection.on("message-received",k=>this._onWebSocketMessage(k))]);this._connectionState.connection=this._connection}}clear(){this._manager.checkForUpdates();this._stagingStore.clear()}updateCustomParameters(a){this._connection?.updateCustomParameters(a)}sendMessageToSocket(a){this._connection?.sendMessageToSocket(a)}sendMessageToClient(a){this._connection?.sendMessageToClient(a)}_onWebSocketMessage(a){if("type"in
a)switch(a.type){case "delete":if(a.objectIds)for(const b of a.objectIds)this._manager.removeById(b);if(a.trackIds)for(const b of a.trackIds)this._manager.removeByTrackId(b);break;case "clear":this.clear()}this.events.emit("message-received",a)}_onFeature(a){try{this._manager.add(a),this.events.emit("data-received",a)}catch(b){}}}l.StreamLoadStrategy=x;Object.defineProperty(l,Symbol.toStringTag,{value:"Module"})});