// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../../core/Error ../../../../../core/has ../../../../../core/Logger ../../../../../core/accessorSupport/diffUtils ../../../../../layers/support/FieldsIndex ../../../engine/highlightReasons ../../../engine/webgl/definitions ../../../engine/webgl/DisplayId ../../../engine/webgl/Utils ../../../engine/webgl/shaderGraph/techniques/shaders/constants ../../../engine/webgl/util/debug ./AttributeStoreCommandQueue ./DisplayIdGenerator ./FeatureFilter ../../../../webgl/enums".split(" "),
function(q,z,k,A,B,C,r,p,l,D,E,w,F,G,H,m){function x(a,b){if(!a||!b)return a;switch(b){case "radius":case "distance":return 2*a;case "area":return Math.sqrt(a)}return a}const t=()=>A.getLogger("esri.views.layers.2d.features.support.AttributeStore"),u=w.createDebugLogger(w.DEBUG_ATTR_UPDATES,t());var v=k("esri-shared-array-buffer"),y=k("esri-atomics");class I{constructor(a,b,c,d){this.size=0;this.texelSize=4;this.dirtyEnd=this.dirtyStart=0;const {pixelType:e,layout:g,textureOnly:f}=d;this.textureOnly=
f||!1;this.pixelType=e;this._ctype=b;this.layout=g;this._resetRange();this._shared=a;this.size=c;f||(this.data=this._initData(e,c,a,b))}get buffer(){return this.data?.buffer}unsetComponentAllTexels(a,b){const c=this.data;for(let d=0;d<this.size*this.size;d++)c[d*this.texelSize+a]&=~b;this.dirtyStart=0;this.dirtyEnd=this.size*this.size-1}setComponentAllTexels(a,b){const c=this.data;for(let d=0;d<this.size*this.size;d++)c[d*this.texelSize+a]|=255&b;this.dirtyStart=0;this.dirtyEnd=this.size*this.size-
1}setComponent(a,b,c){const d=this.data;for(const e of c)d[e*this.texelSize+a]|=b,this.dirtyStart=Math.min(this.dirtyStart,e),this.dirtyEnd=Math.max(this.dirtyEnd,e)}setComponentTexel(a,b,c){this.data[c*this.texelSize+a]|=b;this.dirtyStart=Math.min(this.dirtyStart,c);this.dirtyEnd=Math.max(this.dirtyEnd,c)}unsetComponentTexel(a,b,c){this.data[c*this.texelSize+a]&=~b;this.dirtyStart=Math.min(this.dirtyStart,c);this.dirtyEnd=Math.max(this.dirtyEnd,c)}getData(a,b){a=l.getDisplayIdTexel(a);return this.data[a*
this.texelSize+b]}setData(a,b,c){a=l.getDisplayIdTexel(a);0===(this.layout&1<<b)?t().error("mapview-attributes-store","Tried to set a value for a texel's readonly component"):null!=this.data&&(this.data[a*this.texelSize+b]=c,this.dirtyStart=Math.min(this.dirtyStart,a),this.dirtyEnd=Math.max(this.dirtyEnd,a))}lock(){this.pixelType===m.PixelType.UNSIGNED_BYTE&&this._shared&&y&&"local"!==this._ctype&&Atomics.store(this.data,0,1)}unlock(){this.pixelType===m.PixelType.UNSIGNED_BYTE&&this._shared&&y&&"local"!==
this._ctype&&Atomics.store(this.data,0,0)}expand(a){this.size=a;this.textureOnly||(a=this._initData(this.pixelType,a,this._shared,this._ctype),a.set(this.data),this.data=a)}toMessage(){const a=this.dirtyStart,b=this.dirtyEnd;var c=this.texelSize;if(a>b)return null;this._resetRange();const d=this.pixelType,e=this.layout,g=this.data;c=!this._shared&&"local"!==this._ctype&&g.slice(a*c,(b+1)*c)||null;return{start:a,end:b,data:c,pixelType:d,layout:e}}_initData(a,b,c,d){c=c&&"local"!==d?SharedArrayBuffer:
ArrayBuffer;a=D.getPixelArrayCtor(a);b=new a(new c(b*b*4*a.BYTES_PER_ELEMENT));for(a=0;a<b.length;a+=4)b[a+1]=255;return b}_resetRange(){this.dirtyStart=2147483647;this.dirtyEnd=0}}class J{constructor(a){this._client=a;this._filters=[];this._blocks=[];this._attributeComputeInfo=null;this._abortController=new AbortController;this._size=p.attributeStoreInitialSize;this._idsToHighlight=new Map;this._initialized=this._referencesGeometry=this._referencesScale=!1;this.version=0;this._idGenerator=new G.DisplayIdGenerator;
this._commandQueue=new F.AttributeStoreCommmandQueue({process:b=>{switch(b.type){case "update":return this._doSendUpdate();case "initialize":return this._doEnsureInititialized()}}})}destroy(){this._abortController.abort();this._commandQueue.destroy()}_initialize(){if(null==this._blockDescriptors){var a=m.PixelType.FLOAT;u(`Creating AttributeStore ${v?"with":"without"} shared memory`);this._blockDescriptors=[{pixelType:m.PixelType.UNSIGNED_BYTE,layout:1},{pixelType:m.PixelType.UNSIGNED_BYTE,layout:15,
textureOnly:!0},{pixelType:m.PixelType.UNSIGNED_BYTE,layout:15,textureOnly:!0},{pixelType:a,layout:15},{pixelType:a,layout:15},{pixelType:a,layout:15},{pixelType:a,layout:15}];this._blocks=this._blockDescriptors.map(()=>null)}}get referencesScale(){return this._referencesScale}get referencesGeometry(){return this._referencesGeometry}get _signal(){return this._abortController.signal}get hasHighlight(){return 0<this._idsToHighlight.size}get updateTracking(){return this._commandQueue.updateTracking}incrementDisplayIdGeneration(){this._idGenerator.incrementGeneration()}createDisplayIdForObjectId(a){return this._idGenerator.createIdForObjectId(a)}releaseDisplayIdForObjectId(a){return this._idGenerator.releaseIdForObjectId(a)}async update(a,
b,c,d,e=0){const g=B.diff(this._schema,a);this.version=e;if(g&&(k("esri-2d-update-debug")&&console.debug(`Version[${e}] AttributeStore.update`,{changed:g}),this._schema=a,this._attributeComputeInfo=null,this._initialize(),null!=a))if(c&&(this._filters=await Promise.all(a.filters.map(f=>f?H.create({geometryType:c.geometryType,hasM:!1,hasZ:!1,timeInfo:c.timeInfo,fieldsIndex:new C(c.fields),spatialReference:d??c.spatialReference,filterJSON:f}):null))),"subtype"===a.type){this._attributeComputeInfo={isSubtype:!0,
subtypeField:a.subtypeField,map:new Map};this._referencesGeometry=this._referencesScale=!1;for(const f in a.bindings)await Promise.all(a.bindings[f].map(async n=>{n=await this._bind(b,n,parseInt(f,10));this._referencesGeometry=this._referencesGeometry||(n?.referencesGeometry()??!1);this._referencesScale=this._referencesScale||(n?.referencesScale()??!1)}))}else this._attributeComputeInfo={isSubtype:!1,map:new Map},await Promise.all(a.bindings.map(async f=>{f=await this._bind(b,f);this._referencesGeometry=
this._referencesGeometry||(f?.referencesGeometry()??!1);this._referencesScale=this._referencesScale||(f?.referencesScale()??!1)}))}async setHighlight(a){const b=this._getBlock(0);b.lock();b.unsetComponentAllTexels(0,(1<<r.highlightReasons.length)-1);for(const {displayId:c,highlightFlags:d}of a){if(null==c)continue;const e=l.getDisplayIdTexel(c);b.setComponent(0,d,[e])}b.unlock();this._idsToHighlight.clear();for(const {objectId:c,highlightFlags:d}of a)this._idsToHighlight.set(c,d);await this.sendUpdates()}setData(a,
b,c,d){const e=l.getDisplayIdTexel(a);this._ensureSizeForTexel(e);this._getBlock(b).setData(a,c,d)}getData(a,b,c){return this._getBlock(b).getData(a,c)}getHighlightFlags(a){return this._idsToHighlight.get(a)||0}unsetAttributeData(a){a=l.getDisplayIdTexel(a);this._getBlock(0).setData(a,0,0)}setAttributeData(a,b,c){const d=l.getDisplayIdTexel(a);this._ensureSizeForTexel(d);this._getBlock(0).setData(d,0,this.getFilterFlags(b));a=this._attributeComputeInfo;let e=null;a&&(e=a.isSubtype?a.map.get(b.readAttribute(a.subtypeField)):
a.map,e?.size&&e.forEach((g,f)=>{const n=1*f%4;f=this._getBlock(Math.floor(1*f/4)+p.AttributeDataType.VV);let h=g.field?.read(b,c);g.valueRepresentation&&(h=x(h,g.valueRepresentation));if(null===h||isNaN(h)||Infinity===h||-Infinity===h)h=E.nanMagicNumber;f.setData(d,n,h)}))}async _doSendUpdate(){var a=this._blocks.map(c=>null!=c?c.toMessage():null);const b={blocks:a,version:this.version};a.some(c=>c)&&(k("esri-2d-log-updating")&&console.log("AttributeStore: _doSendUpdate.start"),a=this._client.update(b,
this._signal),await this._client.render(),await a,k("esri-2d-log-updating")&&console.log("AttributeStore: _doSendUpdate.end"))}async sendUpdates(){await this._commandQueue.push({type:"initialize"});return this._commandQueue.push({type:"update"})}_ensureSizeForTexel(a){for(;a>=this._size*this._size&&!this._expand(););}async _bind(a,b,c){a=await a.createComputedField(b);const {valueRepresentation:d}=b,e=this._attributeComputeInfo;if(e.isSubtype){const g=e.map.get(c)??new Map;g.set(b.binding,{field:a,
valueRepresentation:d});e.map.set(c,g)}else e.map.set(b.binding,{field:a,valueRepresentation:d});return a}async _doEnsureInititialized(){if(!this._initialized){this._initialized=!0;this._getBlock(p.AttributeDataType.Animation);this._getBlock(p.AttributeDataType.GPGPU);var a={shared:v&&"local"!==this._client.type,size:this._size,blocks:this._blocks.map(b=>null!=b?{textureOnly:b.textureOnly,buffer:b.buffer,pixelType:b.pixelType}:null)};k("esri-2d-log-updating")&&console.log("AttributeStore: _doEnsureInitialized.start",
{message:a});await this._client.initialize(a,this._signal);k("esri-2d-log-updating")&&console.log("AttributeStore: _doEnsureInitialized.end")}}_getBlock(a){var b=this._blocks[a];if(null!=b)return b;u(`Initializing AttributeBlock at index ${a}`);b=new I(v,this._client.type,this._size,this._blockDescriptors[a]);this._blocks[a]=b;this._initialized=!1;return b}_expand(){if(this._size<this._schema.capabilities.maxTextureSize){const a=this._size<<=1;u("Expanding block size to",a,this._blocks);for(const b of this._blocks)b?.expand(a);
this._initialized=!1;this._size=a;return 0}t().error(new z("mapview-limitations","Maximum number of onscreen features exceeded."));return-1}isVisible(a){return!!(this._getBlock(0).getData(a,0)&1<<r.highlightReasons.length)}getFilterFlags(a){let b=0;for(var c=0;c<this._filters.length;c++){var d=this._filters[c];d=!(1<<c)||null==d||d.check(a);b|=(d?1:0)<<c}c=0;this._idsToHighlight.size&&(a=a.getObjectId(),c=this.getHighlightFlags(a));return b<<r.highlightReasons.length|c}}q.AttributeStore=J;q.getVisualVariableSizeValueRepresentationRatio=
x;Object.defineProperty(q,Symbol.toStringTag,{value:"Module"})});