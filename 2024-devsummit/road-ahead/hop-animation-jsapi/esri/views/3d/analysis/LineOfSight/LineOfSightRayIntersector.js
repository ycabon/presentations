// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/tslib.es6 ../../../../geometry ../../../../core/Accessor ../../../../core/screenUtils ../../../../core/accessorSupport/decorators/property ../../../../core/has ../../../../core/Logger ../../../../core/RandomLCG ../../../../core/accessorSupport/decorators/subclass ../../../../chunks/vec32 ../../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../../geometry/support/ray ../../../../geometry/support/vectorStacks ../../../../layers/graphics/dehydratedFeatures ./LineOfSightIntersectionResult ../../layers/i3s/Intersector ../../support/geometryUtils/ray ../../terrain/Intersector ../../webgl-engine/lib/Intersector ../../webgl-engine/lib/IntersectorInterfaces ../../webgl-engine/lib/intersectorUtilsConversions ../../../../geometry/Point".split(" "),
function(k,q,K,w,x,u,L,M,N,y,f,h,m,z,A,r,B,C,D,E,n,F,G){k.LineOfSightRayIntersector=class extends w{constructor(b){super(b);this._terrainIntersectionOptionsLayerUids=new Set(["terrain"])}initialize(){this.intersector=E.newIntersector(this.view.state.viewingMode);this.intersector.options.hud=!1;this.intersector.options.store=n.StoreResults.MIN}getScreenPointIntersection(b){b=x.screenPointObjectToArray(b,z.sv2d.get());b=C.fromScreen(this.view.state.camera,b,t);return this._getRayIntersection(b)}_getRayIntersection(b,
e){if(null==b||null==this.view.sceneIntersectionHelper)return null;var {intersector:c}=this;c.options.store=n.StoreResults.MIN;this.view.sceneIntersectionHelper.intersectToolIntersectorRay(b,c,e);var a=c.results.min;c=h.create();if(!a.getIntersectionPoint(c)||null!=e?.maxDistance&&f.squaredDistance(c,b.origin)>e.maxDistance**2)return null;e=this.view.renderCoordsHelper.fromRenderCoords(c,new G({spatialReference:this.view.spatialReference}));const g=h.clone(a.normal);if(B.isI3sIntersectorResult(a))return new r.LineOfSightIntersectionResult({type:n.IntersectorType.OBJECT,
id:`${a.target.layerUid}/${a.target.nodeIndex}/${a.target.componentIndex}`,mapPoint:e,renderPoint:c,normal:g,ray:m.copy(b),graphic:null});if(D.isTerrainIntersectorResult(a))return new r.LineOfSightIntersectionResult({type:n.IntersectorType.TERRAIN,id:a.target.lij.slice(),mapPoint:e,renderPoint:c,normal:g,ray:m.copy(b),graphic:null});a=F.toGraphic(a,this.view);if(null!=a){const p=a.layer;var d=a.sourceLayer;if(d)switch(d.type){case "scene":d=A.getObjectId(a,d.objectIdField);break;default:d=a.uid}else d=
a.uid;return new r.LineOfSightIntersectionResult({type:n.IntersectorType.OBJECT,id:`${p?.uid}/${d}`,mapPoint:e,renderPoint:c,normal:g,ray:m.copy(b),graphic:a})}return null}updateFromGroundIntersection(b,e,c){var a=H;const g=I,d=J,p=v;f.copy(g,b);this.view.renderCoordsHelper.worldUpAtPosition(g,d);f.normalize(d,d);var l=this.view.basemapTerrain.visibleElevationBounds;l=(0<=e?1:-1)*((l?Math.abs(l.max-l.min):100)+Math.abs(e));f.scale(p,d,l);f.add(a,g,p);m.fromPoints(a,g,t);a=this._getRayIntersection(t,
{include:this._terrainIntersectionOptionsLayerUids,maxDistance:l});if(null!=a)return b=v,f.scale(b,d,e),f.add(c,a.renderPoint,b),h.clone(a.normal);f.copy(c,b);return null}};q.__decorate([u.property()],k.LineOfSightRayIntersector.prototype,"view",void 0);q.__decorate([u.property()],k.LineOfSightRayIntersector.prototype,"intersector",void 0);k.LineOfSightRayIntersector=q.__decorate([y.subclass("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],k.LineOfSightRayIntersector);const H=h.create(),
I=h.create(),J=h.create(),v=h.create(),t=m.create();Object.defineProperty(k,Symbol.toStringTag,{value:"Module"})});