// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../core/colorUtils ../../../core/Handles ../../../core/mathUtils ../../../core/reactiveUtils ../../../core/libs/gl-matrix-2/math/vec2 ../../../chunks/vec32 ../../../chunks/vec42 ../../../core/libs/gl-matrix-2/factories/vec4f64 ../../../geometry/support/Ellipsoid ./AtmosphereType ./atmosphereUtils ./ChapmanAtmosphereTechnique ./ChapmanAtmosphereTechniqueConfiguration ../webgl/ManagedFBO ../webgl-engine/lib/DefaultVertexBufferLayouts ../webgl-engine/lib/glUtil3D ../webgl-engine/lib/textureUtils ../../../chunks/AtmosphereCompositing.glsl ../webgl-engine/shaders/AtmosphereCompositingTechnique ../../webgl/enums ../../../webscene/background/ColorBackground".split(" "),
function(q,v,w,f,l,x,m,y,z,g,A,e,k,r,B,C,D,t,E,F,G,H){class I{constructor(a,b){this._view=a;this._context=b;this.type=A.AtmosphereType.Realistic;this._handles=new w;this._compositingPassParameters=new E.AtmosphereCompositingPassParameters;this._atmosphereConfiguration=new r.ChapmanAtmosphereTechniqueConfiguration;this._passParameters=new k.ChapmanAtmospherePassParameters;this._rootTileElevationMin=NaN;this._lowerBoundEarthRadius=g.earth.radius;this._fadeHaze=0;this._updateRadius(g.earth.radius);a=
this._context.renderContext.rctx;this._updateRootTileElevationBounds();this._handles.add([l.watch(()=>this._view?.basemapTerrain?.rootTileElevationBounds,()=>this._view?.basemapTerrain?this._updateRootTileElevationBounds():null),l.watch(()=>this._view?.basemapTerrain?.visibleElevationBounds,()=>this._view?.basemapTerrain?this._updateVisibleElevationBounds():null),l.watch(()=>this._view?.environment.background,c=>{c=c instanceof H?v.unitRGBAFromColor(c.color):z.ZEROS;m.set(this._passParameters.backgroundColor,
c[0]*c[3],c[1]*c[3],c[2]*c[3])},l.syncAndInitial)]);b=new r.ChapmanAtmosphereTechniqueConfiguration;b.haze=!1;this._atmosphereTechnique=this._context.techniqueRepository.acquire(k.ChapmanAtmosphereTechnique,b);b.haze=!0;this._atmosphereHazeTechnique=this._context.techniqueRepository.acquire(k.ChapmanAtmosphereTechnique,b);b.reduced=!0;b.haze=!1;this._atmosphereReducedTechnique=this._context.techniqueRepository.acquire(k.ChapmanAtmosphereTechnique,b);b.haze=!0;this._atmosphereHazeReducedTechnique=
this._context.techniqueRepository.acquire(k.ChapmanAtmosphereTechnique,b);this._vao=D.createQuadVAO(a,C.Pos2Tex)}destroy(){this._handles.destroy();this._atmosphereTechnique.release();this._atmosphereHazeTechnique.release();this._atmosphereReducedTechnique.release();this._atmosphereHazeReducedTechnique.release();this._vao.dispose()}render(a,b){this._render(a,b?this._atmosphereTechnique:this._atmosphereReducedTechnique,a.offscreenRenderingHelper.depthTexture,b,!1)}renderHaze(a,b,c){this._fadeHaze=b;
this._render(a,c?this._atmosphereHazeTechnique:this._atmosphereHazeReducedTechnique,a.bindParameters.linearDepth?.getTexture(),c,!0)}_render(a,b,c,d,n){if(null!=c){var p=a.offscreenRenderingHelper;this._update(a.bindParameters.camera);this._passParameters.depthTexture=c;var u=a.rctx.bindTechnique(b,a.bindParameters,this._passParameters);if(d)p.renderDepthDetached(()=>this._renderCommon(u,a));else{b=a.rctx.getViewport();d=m.length(a.bindParameters.camera.eye)-g.earth.radius;if(d<e.atmosphereHeight){d=
Math.min(1,Math.max(0,d/e.atmosphereHeight));var h=n?f.lerp(.4,.5,d):f.lerp(.2,.3,d)}else d=Math.min(1,Math.max(0,(d-e.atmosphereHeight)/(15*e.atmosphereHeight))),h=n?f.lerp(.5,1,d):f.lerp(.3,.6,d);d=t.applyTextureResizeModulo(Math.round(h*a.bindParameters.camera.fullViewport[2]));h=t.applyTextureResizeModulo(Math.round(h*a.bindParameters.camera.fullViewport[3]));a.rctx.setViewport(0,0,d,h);d=p.renderToCachedFBO(null,"chapman",()=>this._renderCommon(u,a),[0,0,0,1],B.ColorFormat.RGBA,null,d,h);a.rctx.setViewport(b.x,
b.y,b.width,b.height);this._compositingPassParameters.color=d.getTexture();this._compositingPassParameters.depth=c;this._atmosphereConfiguration.haze=n;c=this._context.techniqueRepository.acquire(F.AtmosphereCompositingTechnique,this._atmosphereConfiguration);a.rctx.bindTechnique(c,a.bindParameters,this._compositingPassParameters);p.renderDepthDetached(()=>a.rctx.screen.draw());c.release();d.release()}}}_renderCommon(a,b){null!=this._vao&&(b.rctx.bindVAO(this._vao),a.assertCompatibleVertexAttributeLocations(this._vao),
b.rctx.drawArrays(G.PrimitiveType.TRIANGLE_STRIP,0,4))}_adjustRadiusForTesselation(a){return a*Math.cos(Math.PI/16/16)}_updateRootTileElevationBounds(){const a=this._view.basemapTerrain.rootTileElevationBounds.min;a!==this._rootTileElevationMin&&(this._rootTileElevationMin=a,this._lowerBoundEarthRadius=g.earth.radius,this._updateVisibleElevationBounds())}_updateVisibleElevationBounds(){const a=this._adjustRadiusForTesselation(g.earth.radius+this._view.basemapTerrain.visibleElevationBounds.min);a<
this._lowerBoundEarthRadius&&this._updateRadius(a)}_updateRadius(a){this._lowerBoundEarthRadius=a;x.set(this._passParameters.radii,a,a+e.atmosphereHeight);this._passParameters.innerFadeDistance=2*Math.sqrt((2*a-e.innerAtmosphereDepth)*e.innerAtmosphereDepth)}_update(a){if(a){a=m.squaredLength(a.eye);var b=Math.sqrt(a),c=a-this._passParameters.radii[1]*this._passParameters.radii[1],d=f.clamp((b-this._passParameters.radii[0])/e.atmosphereHeight,0,1);y.set(this._passParameters.heightParameters,b,a,c,
d);this._passParameters.altitudeFade=e.computeInnerAltitudeFade(b-this._lowerBoundEarthRadius);this._passParameters.hazeStrength=f.lerp(f.lerp(.6,1,f.smoothstep(9500,10500,b-g.earth.radius)),1,this._fadeHaze)}}static isSupported(a){return a.renderContext.rctx.capabilities.depthTexture}}q.ChapmanAtmosphere=I;Object.defineProperty(q,Symbol.toStringTag,{value:"Module"})});