// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../core/mathUtils ../../../../chunks/vec32 ../../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../../chunks/vec42 ../../../../core/libs/gl-matrix-2/factories/vec4f64 ../../../../geometry/projection/projectVectorToVector ../../../../geometry/support/aaBoundingBox ../../../../geometry/support/vectorStacks ./Object3DVisualElement ../../layers/graphics/elevationAlignmentUtils ../../layers/graphics/ElevationContext ../../support/engineContent/sdfPrimitives ../../webgl-engine/lib/GeometryUtil ../../webgl-engine/lib/VertexAttribute ../../webgl-engine/materials/HUDMaterial".split(" "),
function(l,r,t,u,e,m,n,v,p,w,x,y,h,z,k,A){class B extends w.Object3DVisualElement{constructor(a){super(a);this._geometry=this._texture=this._material=null;this._size=3;this._color=m.fromValues(1,0,1,1);this._pixelSnappingEnabled=!0;this._primitive="square";this._outlineSize=1;this._outlineColor=m.fromValues(1,1,1,1);this._elevationInfo=null;this.applyProperties(a)}get geometry(){return this._geometry}set geometry(a){this._geometry=a;this.recreateGeometry()}get size(){return this._size}set size(a){if(a!==
this._size){const b=this._preferredTextureSize;this._size=a;b<this._preferredTextureSize?this.recreate():this._updateSizeAttribute()}}get color(){return this._color}set color(a){e.exactEquals(a,this._color)||(e.copy(this._color,a),this._updateMaterial())}get pixelSnappingEnabled(){return this._pixelSnappingEnabled}set pixelSnappingEnabled(a){this._pixelSnappingEnabled!==a&&(this._pixelSnappingEnabled=a,this._updateMaterial())}get primitive(){return this._primitive}set primitive(a){this._primitive!==
a&&(this._primitive=a,this.recreate())}get outlineSize(){return this._outlineSize}set outlineSize(a){a!==this._outlineSize&&(this._outlineSize=a,this._updateMaterial())}get outlineColor(){return this._outlineColor}set outlineColor(a){e.exactEquals(a,this._outlineColor)||(e.copy(this._outlineColor,a),this._updateMaterial())}get elevationInfo(){return this._elevationInfo}set elevationInfo(a){this._elevationInfo=a;this.recreateGeometry()}_updateMaterial(){this._material&&this._material.setParameters(this._materialParameters)}_updateSizeAttribute(){const a=
this.object;if(null!=a){var b=a.geometries[0];if(null!=b){b=b.getMutableAttribute(k.VertexAttribute.SIZE).data;var c=this._geometrySize;b[0]=c;b[1]=c;a.geometryVertexAttributeUpdated(a.geometries[0],k.VertexAttribute.SIZE)}}}get _materialParameters(){return{color:this._color,textureIsSignedDistanceField:!0,sampleSignedDistanceFieldTexelCenter:h.requiresHalfTexelOffset(this._primitive),distanceFieldBoundingBox:C,occlusionTest:!1,outlineColor:this._outlineColor,outlineSize:this._outlineSize,textureId:this._texture?.id,
polygonOffset:!1,shaderPolygonOffset:0,drawInSecondSlot:!0,depthEnabled:!1,pixelSnappingEnabled:this.pixelSnappingEnabled,isDecoration:this.isDecoration}}get _geometrySize(){return this._size/d}createExternalResources(){this._texture=h.createTexture(this._primitive,this._preferredTextureSize);this._material=new A.HUDMaterial(this._materialParameters);const a=this.view._stage;this._texture.load(a.renderView.renderingContext);a.add(this._texture)}destroyExternalResources(){this._texture&&(this.view._stage.remove(this._texture),
this._texture.dispose(),this._texture=null);this._material=null}createGeometries(a){const b=this._createRenderGeometry();null!=b&&a.addGeometry(b)}forEachExternalMaterial(a){this._material&&a(this._material)}get _preferredTextureSize(){return r.clamp(2*this._geometrySize,16,128)}calculateMapBounds(a){var b=this.object?.geometries[0];if(!b)return!1;b=b.attributes.get(k.VertexAttribute.POSITION).data;n.projectVectorToVector(b,this.view.renderCoordsHelper.spatialReference,q,this.view.spatialReference);
v.expandWithBuffer(a,q);return!0}_createRenderGeometry(){const {geometry:a,_material:b}=this;if(null==a||null==b)return null;const {renderCoordsHelper:c,elevationProvider:D}=this.view;var f=x.evaluateElevationAlignmentAtPoint(a,D,y.ElevationContext.fromElevationInfo(this.elevationInfo),c),g=t.set(p.sv3d.get(),a.x,a.y,f);f=p.sv3d.get();n.projectVectorToVector(g,a.spatialReference,f,c.spatialReference);g=this._geometrySize;return z.createPointGeometry(b,null,f,null,[g,g],[0,0,0,1])}}const d=h.defaultSymbolSizeRatio,
C=[d/2,d/2,1-d/2,1-d/2],q=u.create();l.PointVisualElement=B;Object.defineProperty(l,Symbol.toStringTag,{value:"Module"})});