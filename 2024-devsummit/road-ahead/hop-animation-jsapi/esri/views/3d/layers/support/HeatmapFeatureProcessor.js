// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/tslib.es6 ../../../../core/Accessor ../../../../core/arrayUtils ../../../../core/byteSizeEstimations ../../../../core/handleUtils ../../../../core/Logger ../../../../core/reactiveUtils ../../../../core/screenUtils ../../../../core/accessorSupport/decorators/property ../../../../core/has ../../../../core/accessorSupport/decorators/subclass ../../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../../core/support/UpdatingHandles ../../../../geometry/projection/projectPointToVector ../../../../geometry/support/Indices ../../../../geometry/support/scaleUtils ../../../../layers/graphics/dehydratedFeatures ../../../../layers/graphics/featureConversionUtils ../../../../layers/graphics/OptimizedFeature ../../../../layers/graphics/OptimizedGeometry ../../../../layers/graphics/data/FeatureStore ../../../../layers/support/fieldUtils ../../../../renderers/support/heatmapUtils ../interfaces ../graphics/DisplayFeatureLimit ../graphics/GraphicsCorePerformanceInfo ./FeatureVisibilityFilter ../../terrain/OverlayRenderer ../../webgl-engine/lib/Attribute ../../webgl-engine/lib/ContentObjectType ../../webgl-engine/lib/DrapedHeatmapRenderer ../../webgl-engine/lib/Geometry ../../webgl-engine/lib/ModelDirtyTypes ../../webgl-engine/lib/RenderGeometry ../../webgl-engine/lib/UpdatePolicy ../../webgl-engine/lib/VertexAttribute ../../webgl-engine/materials/HeatmapDensityMaterial ../../../support/layerViewUtils ../../../webgl/enums ../../../webgl/heatmapTextureUtils".split(" "),
function(b,c,C,D,q,u,r,m,E,d,ba,F,G,H,I,J,K,v,w,L,x,M,N,O,P,Q,R,S,T,y,U,V,W,t,X,Y,z,A,B,n,Z){b.HeatmapFeatureProcessor=class extends C{constructor(a){super(a);this.type="heatmap";this.preferredUpdatePolicy=Y.UpdatePolicy.ASYNC;this.dataExtent=null;this.drapeSourceType=P.DrapeSourceType.Features;this._renderGeometries=new Map;this._fieldTotal=0;this._drapeSourceRenderer=null;this._dataType=n.PixelType.HALF_FLOAT;this._pixelFormat=n.PixelFormat.RGBA;this._updatingHandles=new H.UpdatingHandles;this.initializePromise=
Promise.resolve()}initialize(){this._featureStore=new M({geometryType:"esriGeometryPoint",hasZ:this.hasZ,hasM:this.hasM});const {dataType:a,samplingMode:e,pixelFormat:g,internalFormat:f}=Z.loadHeatmapTextureConfiguration(this._renderView.renderingContext,r.getLogger(this));this._dataType=a;this._pixelFormat=g;const k=a!==n.PixelType.FLOAT;this._drapeSourceRenderer=this.view.basemapTerrain.overlayManager.registerDrapeSource(this,V.DrapedHeatmapRenderer,{...this._rendererParameters,dataType:a,samplingMode:e,
pixelFormat:g,internalFormat:f});this._material=new A.HeatmapDensityMaterial({usesHalfFloats:k});this._materialWithField=new A.HeatmapDensityMaterial({usesHalfFloats:k,isAttributeDriven:!0});this._filterVisibility=new S.FeatureVisibilityFilter({context:{layerView:this.owner,featureStore:this.featureStore,getFeatureCount:()=>this._loadedPointGraphics.length,setAllFeaturesVisibility:h=>this._setAllFeaturesVisibility(h),clearFeaturesVisibility:()=>this._setAllFeaturesVisibility(!0),updateFeatureVisibilities:h=>
this._updateFeatureVisibilities(h)}});this._updatingHandles.addOnCollectionChange(()=>this._loadedPointGraphics,h=>this._onLoadedFeaturesChange(h),m.initial);this._updatingHandles.addWhen(()=>this._materialParameters,h=>this._forEachMaterial(l=>l.setParameters(h)),m.initial);this._updatingHandles.add(()=>this._rendererParameters,h=>this._drapeSourceRenderer.set(h));this._updatingHandles.add(()=>this._heatmapRendererField,()=>{this._recreate()},m.sync);this._updatingHandles.add(()=>({fieldName:this._heatmapRendererFieldName,
numeric:this._heatmapRendererFieldIsNumeric}),({fieldName:h,numeric:l})=>{if(null!=h&&l){let p=0;this._featureStore.forEach(aa=>p+=aa.attributes[h]??0);this._fieldTotal=p}else this._fieldTotal=this._featureStore.numFeatures},m.initial);this.addHandles([m.watch(()=>({fieldName:this._heatmapRendererFieldName,field:this._heatmapRendererField}),({fieldName:h,field:l})=>{h&&!l&&r.getLogger(this).warn(`Heatmap renderer field '${h}' for layer '${this.layer.title??this.layer.id}' not found`)}),m.watch(()=>
({field:this._heatmapRendererField,numeric:this._heatmapRendererFieldIsNumeric}),({field:h,numeric:l})=>{null==h||l||r.getLogger(this).warn(`Heatmap renderer field '${h.name}' for layer '${this.layer.title??this.layer.id}' does not contain numeric values and cannot be used to drive the heatmap density`)}),u.makeHandle(()=>this.view.basemapTerrain.overlayManager.unregisterDrapeSource(this))])}destroy(){this._renderGeometries.clear();this._materialWithField=this._material=null;this._featureStore.clear();
this._featureStore=null;this._updatingHandles.destroy()}get layer(){return this.owner.layer}get featureStore(){return this._featureStore}get updating(){return this._updatingHandles.updating||this.filterVisibility.updating}get updatingRemaining(){return 0}get suspendInfo(){return{}}get legendEnabled(){return!0}get filterVisibility(){return this._filterVisibility}get displayFeatureLimit(){var a=this.owner?.view?.quality??1;const e=this.owner?.view?.qualitySettings;a=e?Math.ceil(e.heatmap.maxTotalNumberOfFeatures*
a):0;return new Q.DisplayFeatureLimit(6*a,a)}get hasZ(){return"hasZ"in this.layer&&this.layer.hasZ}get hasM(){return"hasM"in this.layer&&this.layer.hasM}get view(){return this.owner.view}get fullOpacity(){return this.owner.fullOpacity}get updatePolicy(){return this.owner.updatePolicy}get scaleVisibilitySuspended(){if(!this._isScaleRangeActive)return!1;const {minScale:a,maxScale:e}=this.layer.effectiveScaleRange,{scale:g}=this.view;return!B.scaleBoundsPredicate(g,a??0,e??0)}get usedMemory(){const a=
Math.ceil((this._overlayRenderer?.overlays[0]?.resolution??0)*this._densityMapPixelRatio)??0;return a*a*(this._pixelFormat===n.PixelFormat.RED?1:4)*(this._dataType===n.PixelType.FLOAT?4:2)+this.usedMemoryPerFeature*this._featureStore.numFeatures}get usedMemoryPerFeature(){var a=this._loadedPointGraphics.find(()=>!0);if(null==a)return 0;a=q.estimateAttributesObjectSize(a);const e=q.estimateNumberByteSize(),g=6*q.estimateFixedArraySize([0,0,0],e),f=6*q.estimateFixedArraySize([0,0],e);return g+f+(this._heatmapRendererFieldIsNumeric?
6*e:0)+a}get loadedFeatures(){return this._featureStore.numFeatures}get unprocessedMemoryEstimate(){return 0}get performanceInfo(){return new R.GraphicsCorePerformanceInfo(this._visibleFeatures,0,0)}get renderer(){return this._heatmapRenderer}get _overlayRenderer(){return this.view.basemapTerrain.overlayManager.renderer}get _overlaySpatialReference(){return this._overlayRenderer.spatialReference}get _rendererParameters(){return{...this._radiusParameter,...this._densityParameters,...this._colorRampParameter,
...this._pixelRatioParameter}}get _materialParameters(){return{...this._radiusParameter,...this._resolutionForScaleParameter}}get _densityParameters(){const a=this._heatmapRenderer;if(null==a)return null;const {minDensity:e,maxDensity:g}=a;return{minDensity:e,maxDensity:g,fieldTotal:this._fieldTotal}}get _radiusParameter(){const a=this._heatmapRenderer;return a?{searchRadius:E.pt2px(this._clampSearchRadius(a.radius))}:null}get _resolutionForScaleParameter(){var a=this._heatmapRenderer;if(!a)return null;
({referenceScale:a}=a);return{resolutionForScale:0===a?0:K.getResolutionForScale(a,this.view.spatialReference)}}get _colorRampParameter(){const a=this._heatmapRenderer;return a?{colorRampData:O.generateGradient(a.colorStops)}:null}get _pixelRatioParameter(){return{pixelRatio:this._densityMapPixelRatio}}get _densityMapPixelRatio(){return this.owner?.view?.qualitySettings.heatmap.pixelRatio??1}get _renderView(){return this.view._stage.renderView}get _featuresArePoints(){return"point"===this.layer.geometryType}get _loadedPointGraphics(){return this.owner.loadedGraphics}get _heatmapRenderer(){const a=
this.layer.renderer;return"heatmap"===a?.type?a:null}get _heatmapRendererFieldName(){return this._heatmapRenderer?.field}get _heatmapRendererField(){const a=this._heatmapRendererFieldName;return null!=a?this.layer.fieldsIndex.get(a):null}get _heatmapRendererFieldIsNumeric(){const a=this._heatmapRendererField;return null==a?!1:N.isNumericField(a)}get _isScaleRangeActive(){const {layer:a}=this;if(!("effectiveScaleRange"in a))return!1;const {minScale:e,maxScale:g}=a.effectiveScaleRange;return B.isScaleRangeActive(e,
g)}get _visibleFeatures(){let a=0;this._renderGeometries.forEach(e=>{e.visible&&++a});return a}async whenGraphicBounds(){return null}computeAttachmentOrigin(){return null}highlight(){return u.makeHandle()}maskOccludee(){return u.makeHandle()}setObjectIdVisibility(){}refreshFilter(){this.filterVisibility.reapply()}_onLoadedFeaturesChange(a){if(this._featuresArePoints){var {objectIdField:e}=this.layer;this._featureStore.removeManyById(a.removed.map(f=>v.getObjectId(f,e)));this._featureStore.addMany(a.added.map(f=>
{const {attributes:k,centroid:h,geometry:l}=f,p=new L.OptimizedFeature(w.convertFromPoint(new x,l),k,h?w.convertFromPoint(new x,h):null,v.getObjectId(f,e));p.displayId=f.uid;return p}));var g=a.added;a=a.removed;this._fieldTotal+=this._computeFieldTotalChange(g,a);a=a.map(({uid:f})=>{const k=this._renderGeometries.get(f);this._renderGeometries.delete(f);return k}).filter(D.isSome);g=g.map(f=>{const k=this._pointGraphicToRenderGeometry(f);this._renderGeometries.set(f.uid,k);return k});0<a.length&&
this._drapeSourceRenderer.removeGeometries(a,t.DirtyOperation.REMOVE);0<g.length&&this._drapeSourceRenderer.addGeometries(g,t.DirtyOperation.ADD);if(0<g.length||0<a.length)this.filterVisibility.reapply(),this._renderView.requestRender()}}_recreate(){if(this._loadedPointGraphics){var a=this._loadedPointGraphics.toArray();this._onLoadedFeaturesChange({added:a,removed:a})}}_pointGraphicToRenderGeometry(a){const e=this._heatmapRendererFieldName,g=null!=e?this._materialWithField:this._material;var f=G.create();
I.projectPointToVector(a.geometry,f,this._overlaySpatialReference);f[2]=T.drapedZ;const k=J.getContinuousIndexArray(1);f=[[z.VertexAttribute.POSITION,new y.Attribute(f,k,f.length)]];const h=this._heatmapRendererFieldIsNumeric;null!=e&&f.push([z.VertexAttribute.FEATUREATTRIBUTE,new y.Attribute([h?a.attributes[e]??0:0],k,1)]);a=new X.RenderGeometry(new W.Geometry(g,f,null,U.ContentObjectType.Point),{layerUid:this.layer.uid,graphicUid:a.uid});a.visible=this.filterVisibility.defaultVisibility;return a}_forEachMaterial(a){a(this._material);
a(this._materialWithField)}_computeFieldTotalChange(a,e){if(null==this._heatmapRendererFieldName||!this._heatmapRendererFieldIsNumeric)return a.length-e.length;const g=this._heatmapRendererFieldName,f=(k,h)=>k+(h.attributes[g]??0);return a.reduce(f,0)-e.reduce(f,0)}_clampSearchRadius(a){112<a&&r.getLogger(this).warnOnce("SceneView supports a maximum radius of 112 pt for HeatmapRenderer.");return Math.min(a,112)}_updateFeatureVisibilities(a){const e=[];this._featureStore.forEach(({objectId:g,displayId:f})=>
{g=a(g);(f=this._renderGeometries.get(f))&&f.visible!==g&&(e.push(f),f.visible=g)});this._drapeSourceRenderer.modifyGeometries(e,t.DirtyState.VISIBILITY)}_setAllFeaturesVisibility(a){const e=[];for(const g of this._renderGeometries.values())g.visible!==a&&(e.push(g),g.visible=a);this._drapeSourceRenderer.modifyGeometries(e,t.DirtyState.VISIBILITY)}get test(){return{visibleFeatureCount:this._visibleFeatures}}};c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"type",void 0);c.__decorate([d.property({constructOnly:!0})],
b.HeatmapFeatureProcessor.prototype,"owner",void 0);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"layer",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"featureStore",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"updating",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"updatingRemaining",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"suspendInfo",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,
"legendEnabled",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"filterVisibility",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"displayFeatureLimit",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"preferredUpdatePolicy",void 0);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"hasZ",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"hasM",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,
"dataExtent",void 0);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"view",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"fullOpacity",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"updatePolicy",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"drapeSourceType",void 0);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"scaleVisibilitySuspended",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,
"renderer",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_featureStore",void 0);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_filterVisibility",void 0);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_overlayRenderer",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_overlaySpatialReference",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_rendererParameters",null);c.__decorate([d.property()],
b.HeatmapFeatureProcessor.prototype,"_materialParameters",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_densityParameters",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_radiusParameter",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_resolutionForScaleParameter",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_colorRampParameter",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,
"_pixelRatioParameter",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_densityMapPixelRatio",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_renderGeometries",void 0);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_material",void 0);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_materialWithField",void 0);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_renderView",null);c.__decorate([d.property()],
b.HeatmapFeatureProcessor.prototype,"_featuresArePoints",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_loadedPointGraphics",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_heatmapRenderer",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_heatmapRendererFieldName",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_heatmapRendererField",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,
"_heatmapRendererFieldIsNumeric",null);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_fieldTotal",void 0);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_drapeSourceRenderer",void 0);c.__decorate([d.property()],b.HeatmapFeatureProcessor.prototype,"_isScaleRangeActive",null);b.HeatmapFeatureProcessor=c.__decorate([F.subclass("esri.views.3d.layers.support.HeatmapFeatureProcessor")],b.HeatmapFeatureProcessor);b.maxRadiusPt=112;Object.defineProperty(b,Symbol.toStringTag,
{value:"Module"})});