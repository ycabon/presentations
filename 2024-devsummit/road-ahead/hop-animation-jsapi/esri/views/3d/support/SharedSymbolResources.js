// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../core/arrayUtils ../../../core/Handles ../../../core/handleUtils ../../../core/maybe ../../../core/reactiveUtils ../../../geometry/ellipsoidUtils ../layers/graphics/ObjectResourceCache ./index ./StreamTextureCollection ../webgl-engine/lib/screenSizePerspectiveUtils".split(" "),function(e,h,k,f,l,d,m,n,p,q,g){class r{constructor(a){this.streamDataRequester=null;this._graphicsOwners=[];this.cimSymbolRasterizer=this._screenSizePerspectiveHandles=null;this._viewState=a.viewState;
this._view=a.view;this._pointsOfInterest=a.pointsOfInterest;this.streamDataRequester=a.resourceController.createStreamDataRequester(p.ClientType.SYMBOLOGY);this.objectResourceCache=new n.ObjectResourceCache((t,u)=>a.resourceController.memoryController.newCache(t,u));this.textures=new q.StreamTextureCollection(this.streamDataRequester,a.view._stage,a.resourceController.scheduler);const b=m.getReferenceEllipsoid(this._view.spatialReference).radius;this.screenSizePerspectiveSettings=g.getSettings(a.viewingMode,
b);this.screenSizePerspectiveSettingsLabels=g.getLabelSettings(a.viewingMode,b)}destroy(){this.textures.destroy();this.streamDataRequester=null}addGraphicsOwner(a){if(!a)return f.makeHandle();this._graphicsOwners.push(a);const b=d.watch(()=>a.layer?.screenSizePerspectiveEnabled,()=>this._updateScreenSizePerspectiveEnabled());this._updateScreenSizePerspectiveEnabled();return f.makeHandle(()=>{b.remove();h.removeUnordered(this._graphicsOwners,a);this._updateScreenSizePerspectiveEnabled()})}_updateScreenSizePerspectiveEnabled(){var a=
this._graphicsOwners.some(b=>!0===b.layer?.screenSizePerspectiveEnabled);a&&!this._screenSizePerspectiveHandles?(this._screenSizePerspectiveHandles=new k,a=()=>this._updateScreenSizePerspectiveSettings(),this._screenSizePerspectiveHandles.add([d.watch(()=>this._pointsOfInterest.centerOnSurfaceInfrequent.distance,a,d.sync),this._viewState.events.on("camera-projection-changed",a)]),this._updateScreenSizePerspectiveSettings()):a||(this._screenSizePerspectiveHandles=l.destroyMaybe(this._screenSizePerspectiveHandles))}_updateScreenSizePerspectiveSettings(){c.distance=
this._pointsOfInterest.centerOnSurfaceInfrequent.distance;c.fovY=this._viewState.camera.fovY;this.screenSizePerspectiveSettings.update(c);this.screenSizePerspectiveSettingsLabels.update(c);this._view._stage.renderView.requestRender()}get test(){return{screenSizePerspectiveHandles:this._screenSizePerspectiveHandles}}}const c={distance:0,fovY:0};e.SharedSymbolResources=r;Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});