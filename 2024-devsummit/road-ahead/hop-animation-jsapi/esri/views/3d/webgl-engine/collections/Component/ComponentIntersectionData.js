// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../core/mathUtils","../../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../../geometry/support/aaBoundingBox","../../materials/internal/MaterialUtil"],function(G,L,E,I,M){function N(a,d,e){let b=0,g=Infinity;for(let f=0;3>f;++f){var c=a[f];if(d[f]<c){if(1E-6>=e[f])return!1;b=Math.max(b,(c-d[f])/e[f])}else-1E-6>=e[f]&&(g=Math.min(g,(c-d[f])/e[f]));if(b>g)return!1;c=a[f+3];if(d[f]>c){if(-1E-6<=e[f])return!1;b=Math.max(b,(c-d[f])/e[f])}else 1E-6<=e[f]&&(g=
Math.min(g,(c-d[f])/e[f]));if(b>g)return!1}return!0}function O(a,d,e,b,g,c){let f=b;for(;e<f;){var h=a[e];d[6*h+g+3]<=c?++e:(--f,a[e]=a[f],a[f]=h)}h=e;for(f=b;h<f;)b=a[f-1],d[6*b+g]>=c?--f:(a[f-1]=a[h],a[h]=b,++h);return{next:e,mid:h}}function P(a,d,e,b){if(b<=e)return I.fromValues(NaN,NaN,NaN,NaN,NaN,NaN);var g=6*a[e];for(var c=0;3>c;++c)A[c]=d[g+0+c],B[c]=d[g+3+c];for(e+=1;e<b;++e)for(g=6*a[e],c=0;3>c;++c)A[c]=Math.min(A[c],d[g+0+c]),B[c]=Math.max(B[c],d[g+3+c]);return I.fromValues(A[0],A[1],A[2],
B[0],B[1],B[2])}function Q(a){var d=a[3]-a[0];const e=a[4]-a[1],b=a[5]-a[2];d=d>e?d>b?0:e>b?1:2:e>b?1:b>d?2:0;return{axis:d,midValue:(a[d]+a[d+3])/2}}function R(a,d,e,b,g){e-=d;const c=new Float32Array(6*e);for(let h=0;h<e;++h){var f=3*(h+d);const q=a[f]*g,l=a[f+1]*g;f=a[f+2]*g;for(let n=0;3>n;++n){const p=b[q+n],k=b[l+n],m=b[f+n];c[6*h+n]=Math.min(p,k,m);c[6*h+3+n]=Math.max(p,k,m)}}return c}function S(a,d,e,b){const g=b-e;var c=0;for(var f=e;f<b;++f)for(var h=0;3>h;++h)c=Math.max(d[3*f+h],c);b=65535>=
c?new Uint16Array(3*g):new Uint32Array(3*g);for(c=0;c<g;++c)for(f=3*(a[c]+e),h=0;3>h;++h)b[3*c+h]=d[f+h];return b}class J{constructor(a,d,e,b,g){this.aabb=a;this.axis=d;this.d=e;this.midStartIndex=b;this.rightStartIndex=g}}class C{constructor(a,d,e,b){this.globalTriangleVertexIndices=a;this.firstTriangleIndex=d;this.positions=b;this._rayDirection=E.create();this.bspNodeTree=[];const g=e-d,c=65535>=g?new Uint16Array(g):new Uint32Array(g);this.indices=c;for(let l=0;l<g;++l)c[l]=l;const f=R(a,d,e,b.data,
b.stride),h=L.clamp(Math.log2(g/40),2,10),q=(l,n,p)=>{var k=P(c,f,l,n);const m=n-l;if(40>=m)return l=new J(k,void 0,0,l,n),this.bspNodeTree.push(l),l;const {axis:r,midValue:t}=Q(k),w=O(c,f,l,n,r,t),v=(x,y)=>{if(!(p>h)){var u=y-x;if(!(40>u||u>=.8*m))return q(x,y,p+1)}};k=new J(k,r,t,w.next,w.mid);this.bspNodeTree.push(k);k.leftNode=v(l,w.next);k.rightNode=v(w.mid,n);return k};q(0,g,0);this.triangleVertexIndices=S(c,a,d,e)}intersectRayTriangleRange(a,d){if(!(a>=d)){var e=this.triangleVertexIndices,
b=this.positions.data,g=this.positions.stride,c=this._rayOrigin,f=c[0],h=c[1];c=c[2];var q=this._rayDirection,l=q[0],n=q[1];q=q[2];for(let H=a,F=3*a;H<d;++H){var p=e[F]*g,k=b[p],m=b[p+1],r=b[p+2],t=e[F+1]*g;p=b[t];var w=b[t+1];t=b[t+2];var v=e[F+2]*g,x=b[v],y=b[v+1];v=b[v+2];F+=3;p-=k;w-=m;t-=r;x-=k;y-=m;v-=r;var u=n*v-y*q,D=q*x-v*l;const K=l*y-x*n,z=p*u+w*D+t*K;if(!(Math.abs(z)<=Number.EPSILON)){k=f-k;m=h-m;r=c-r;u=k*u+m*D+r*K;if(0<z){if(0>u||u>z)continue}else if(0<u||u<z)continue;D=m*t-w*r;r=r*
p-t*k;m=k*w-p*m;k=l*D+n*r+q*m;if(0<z){if(0>k||u+k>z)continue}else if(0<k||u+k<z)continue;m=(x*D+y*r+v*m)/z;0<=m&&(r=this.indices[H]+this.firstTriangleIndex,p=M.computeNormal(p,w,t,x,y,v,T),this._callback(m,p,r,!1))}}C.numFacesTested+=d-a}}intersectRay(a,d,e){C.numFacesTested=0;a=E.fromValues(a[0],a[1],a[2]);var b=E.fromValues(d[0],d[1],d[2]);d=b[0]-a[0];const g=b[1]-a[1];b=b[2]-a[2];1E-6>d*d+g*g+b*b||(this._rayOrigin=a,a=this._rayDirection,a[0]=d,a[1]=g,a[2]=b,a=this.triangleVertexIndices.length/
3,this._callback=e,this.intersectRayBSP(this.bspNodeTree[0],0,a))}intersectRayBSP(a,d,e){const b=this._rayOrigin,g=this._rayDirection;if(N(a.aabb,b,g)){var c=a.axis,f=a.d;if(b[c]<f||0>g[c]){const h=a.midStartIndex;if(d<h){const q=a.leftNode;void 0!==q?this.intersectRayBSP(q,d,h):this.intersectRayTriangleRange(d,h)}}this.intersectRayTriangleRange(a.midStartIndex,a.rightStartIndex);if(b[c]>f||0<g[c])d=a.rightStartIndex,d<e&&(a=a.rightNode,void 0!==a?this.intersectRayBSP(a,d,e):this.intersectRayTriangleRange(d,
e))}}get estimatedMemoryUsage(){return this.triangleVertexIndices.byteLength+this.indices.byteLength}}C.numFacesTested=0;const T=E.create(),A=[Infinity,Infinity,Infinity],B=[-Infinity,-Infinity,-Infinity];G.ComponentIntersectionData=C;G.componentMinimalSizeForIntersectionData=200;Object.defineProperty(G,Symbol.toStringTag,{value:"Module"})});