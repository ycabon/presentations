// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../../../chunks/tslib.es6 ../../../../../../core/has ../../../../../../core/maybe ../../../../../../core/libs/gl-matrix-2/math/mat3 ../../../../../../core/libs/gl-matrix-2/factories/mat3f32 ../../../../../../core/libs/gl-matrix-2/factories/mat3f64 ../../../../../../chunks/vec32 ../../../../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../../../../chunks/vec42 ../../../../../../core/libs/gl-matrix-2/factories/vec4f64 ../../../../layers/support/symbolColorUtils ../../../../terrain/OverlayContent ./ComponentTechnique ./ComponentTechniqueConfiguration ./shader/ComponentData.glsl ./shader/VertexDiscardByOpacity.glsl ../../../core/material/MaterialBase ../../../core/renderPasses/AllRenderPasses ../../../core/shaderLibrary/ShaderOutput ../../../core/shaderLibrary/attributes/NormalAttribute.glsl ../../../core/shaderLibrary/shading/Normals.glsl ../../../core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl ../../../core/shaderLibrary/util/AlphaCutoff ../../../core/shaderLibrary/util/EllipsoidMode ../../../core/util/TwoVectorPosition ../../../lib/basicInterfaces ../../../lib/TransparencyPassType ../../../materials/pbrUtils".split(" "),
function(f,e,J,K,B,L,M,C,D,E,F,G,y,N,n,H,p,d,q,r,z,I,t,O,P,Q,x,R,S){class g extends d.MaterialBase{constructor(b,h){super();this.toMapSpace=h;this.baseColor=F.fromValues(1,1,1,1);this.hasParametersFromSource=this.usePBR=!1;this.mrrFactors=D.fromArray(S.defaultAdvancedMRRFactors);this.emissiveFactor=D.fromValues(0,0,0);this.normalTexture=this.occlusionTexture=this.emissionTexture=this.metallicRoughnessTexture=this.baseColorTexture=null;this.objectOpacity=1;this.commonMaterialParameters=new u;this.componentParameters=
new v;this.textureAlphaCutoff=O.defaultMaskAlphaCutoff;this.alphaDiscardMode=x.AlphaDiscardMode.Opaque;this.polygonOffsetEnabled=this.isIntegratedMesh=!1;this.ellipsoidMode=P.EllipsoidMode.Earth;this.hasOccludees=!1;this._techniqueConfiguration=new n.ComponentTechniqueConfiguration;h=new Q.TwoVectorPosition(b.position);const c=L.clone(b.rotationScale);B.invert(c,c);this.transformNormalGlobalFromModel=M.clone(B.transpose(c,c));this.transformWorldFromModelTL=h.low;this.transformWorldFromModelTH=h.high;
this.transformWorldFromModelRS=b.rotationScale}dispose(){this._technique=K.releaseMaybe(this._technique);this.normalTexture=this.occlusionTexture=this.emissionTexture=this.metallicRoughnessTexture=this.baseColorTexture=null}get texture(){return null!=this.baseColorTexture?this.baseColorTexture.glTexture:null}get textureMetallicRoughness(){return null!=this.metallicRoughnessTexture?this.metallicRoughnessTexture.glTexture:null}get textureEmissive(){return null!=this.emissionTexture?this.emissionTexture.glTexture:
null}get textureOcclusion(){return null!=this.occlusionTexture?this.occlusionTexture.glTexture:null}get textureNormal(){return null!=this.normalTexture?this.normalTexture.glTexture:null}prepareTechnique(b,h,c,k){const a=this._techniqueConfiguration;a.hasVertexColors=k.colors;a.hasNormals=k.hasNormals;a.textureCoordinateType=k.textureCoordinates;a.hasMetallicRoughnessTexture=null!=this.metallicRoughnessTexture;a.hasEmissionTexture=null!=this.emissionTexture;a.hasOcclusionTexture=null!=this.occlusionTexture;
a.hasNormalTexture=null!=this.normalTexture;a.transparencyPassType=h.identifier===q.RenderPassIdentifier.Material&&null!=c.transparencyPassType?c.transparencyPassType:R.TransparencyPassType.NONE;a.multipassEnabled=h.identifier===q.RenderPassIdentifier.Material&&c.multipassEnabled;a.cullAboveGround=h.identifier===q.RenderPassIdentifier.Material?c.multipassTerrain.cullAboveGround:!1;a.ellipsoidMode=this.ellipsoidMode;a.componentData=this.componentParameters.type;a.cullFace=this.commonMaterialParameters.cullFace;
a.doubleSidedMode=this.commonMaterialParameters.doubleSided?I.NormalsDoubleSidedMode.View:I.NormalsDoubleSidedMode.None;a.hasColorTexture=null!=this.baseColorTexture;const m=this._computeWhichMaterialPass();a.blendingEnabled=m===l.Transparent||m===l.OpaqueAndTransparent;a.alphaDiscardMode=this.alphaDiscardMode;a.integratedMeshMode=this.isIntegratedMesh?null!=c.overlay?.getTexture(y.OverlayContent.ColorNoRasterImage)?null!=c.overlay?.getTexture(y.OverlayContent.WaterNormal)?n.IntegratedMeshMode.ColorOverlayWithWater:
n.IntegratedMeshMode.ColorOverlay:n.IntegratedMeshMode.NoOverlay:n.IntegratedMeshMode.None;a.hasPolygonOffset=this.polygonOffsetEnabled;a.pbrMode=a.integratedMeshMode===n.IntegratedMeshMode.ColorOverlayWithWater?t.PBRMode.WaterOnIntegratedMesh:this.usePBR?this.hasParametersFromSource?J("enable-feature:im-shading")&&this.isIntegratedMesh?t.PBRMode.Simplified:t.PBRMode.Schematic:t.PBRMode.Normal:t.PBRMode.Disabled;a.normalType=k.needsNormals?a.hasNormals?z.NormalType.Compressed:z.NormalType.ScreenDerivative:
z.NormalType.Ground;a.hasSlicePlane=null!=c.slicePlane&&this.commonMaterialParameters.hasSlicePlane;if(h.identifier===q.RenderPassIdentifier.ShadowMap)a.output=r.ShaderOutput.Shadow,a.vertexDiscardMode=p.VertexDiscardMode.None;else if(h.identifier===q.RenderPassIdentifier.Highlight)a.output=r.ShaderOutput.Highlight,a.vertexDiscardMode=p.VertexDiscardMode.None;else{a.vertexDiscardMode=m===l.OpaqueAndTransparent?h.transparent?p.VertexDiscardMode.Opaque:p.VertexDiscardMode.Transparent:p.VertexDiscardMode.None;
a.output=h.output;a.receiveAmbientOcclusion=!1;a.receiveShadows=!1;switch(h.output){case r.ShaderOutput.Color:a.receiveAmbientOcclusion=null!=c.ssao;a.hasOccludees=c.hasOccludees;a.receiveShadows=c.shadowMap.ready;a.hasScreenSpaceReflections=null!=c.ssr.lastFrameColor;a.hasCloudsReflections=null!=c.cloudsFade.data;break;case r.ShaderOutput.Alpha:a.hasOccludees=c.hasOccludees;break;case r.ShaderOutput.ObjectAndLayerIdColor:a.objectAndLayerIdColor=!0}a.snowCover=this.hasSnowCover(c)}this._technique=
b.releaseAndAcquire(N.ComponentTechnique,a,this._technique);this._setClean();return this._technique}hasSnowCover(b){return null!=b.weather&&b.weatherVisible&&"snowy"===b.weather.type&&"enabled"===b.weather.snowCover}submit(b,h,c){if(0!==this.objectOpacity){var k=c.renderable.geometry,a=c.components;c=c.renderable.meta.cameraDepthSquared;var m=a.geometryRanges,A=a.highlightRanges;a=a.defaultShadowMapRanges;switch(this._computeWhichMaterialPass()){case l.Opaque:b.materialOpaque.submitDraw(this,k,m,
c);break;case l.Transparent:b.materialTransparent.submitDraw(this,k,m,c);break;case l.OpaqueAndTransparent:b.materialOpaque.submitDraw(this,k,m,c);b.materialTransparent.submitDraw(this,k,m,c);break;case l.IntegratedMesh:b.materialIntegratedMesh.submitDraw(this,k,m,c),null!=h.overlay?.getTexture(y.OverlayContent.Highlight)&&b.highlightIntegratedMesh.submitDraw(this,k,m,c)}(h=this.componentParameters.castShadows!==f.ComponentParameterSummary.None)&&b.shadowMap.submitDraw(this,k,m,c);null!=A&&(b.highlight.submitDraw(this,
k,A,c),h&&b.highlightShadowMap.submitDraw(this,k,A,c));h&&null!=a&&b.defaultShadowMap.submitDraw(this,k,a,c)}}_computeWhichMaterialPass(){return this.isIntegratedMesh?l.IntegratedMesh:1>this.objectOpacity?l.Transparent:this.componentParameters.opaqueOverride===f.ComponentParameterSummary.All?l.Opaque:1>this.baseColor[3]||this.alphaDiscardMode===x.AlphaDiscardMode.Blend||this.alphaDiscardMode===x.AlphaDiscardMode.MaskBlend?l.Transparent:this.componentParameters.transparent===f.ComponentParameterSummary.None?
l.Opaque:this.componentParameters.transparent===f.ComponentParameterSummary.All?l.Transparent:l.OpaqueAndTransparent}}e.__decorate([d.parameter({vectorOps:E.vec4})],g.prototype,"baseColor",void 0);e.__decorate([d.parameter()],g.prototype,"usePBR",void 0);e.__decorate([d.parameter()],g.prototype,"hasParametersFromSource",void 0);e.__decorate([d.parameter({vectorOps:C.vec3})],g.prototype,"mrrFactors",void 0);e.__decorate([d.parameter({vectorOps:C.vec3})],g.prototype,"emissiveFactor",void 0);e.__decorate([d.parameter({dispose:!0})],
g.prototype,"baseColorTexture",void 0);e.__decorate([d.parameter({dispose:!0})],g.prototype,"metallicRoughnessTexture",void 0);e.__decorate([d.parameter({dispose:!0})],g.prototype,"emissionTexture",void 0);e.__decorate([d.parameter({dispose:!0})],g.prototype,"occlusionTexture",void 0);e.__decorate([d.parameter({dispose:!0})],g.prototype,"normalTexture",void 0);e.__decorate([d.parameter()],g.prototype,"objectOpacity",void 0);e.__decorate([d.parameterBlock()],g.prototype,"commonMaterialParameters",
void 0);e.__decorate([d.parameterBlock()],g.prototype,"componentParameters",void 0);e.__decorate([d.parameter()],g.prototype,"textureAlphaCutoff",void 0);e.__decorate([d.parameter()],g.prototype,"alphaDiscardMode",void 0);e.__decorate([d.parameter()],g.prototype,"isIntegratedMesh",void 0);e.__decorate([d.parameter()],g.prototype,"polygonOffsetEnabled",void 0);e.__decorate([d.parameter()],g.prototype,"ellipsoidMode",void 0);e.__decorate([d.parameter()],g.prototype,"hasOccludees",void 0);var l;(function(b){b[b.Opaque=
0]="Opaque";b[b.Transparent=1]="Transparent";b[b.OpaqueAndTransparent=2]="OpaqueAndTransparent";b[b.IntegratedMesh=3]="IntegratedMesh"})(l||={});class u extends d.MaterialParameterBlock{constructor(){super(...arguments);this.doubleSided=!1;this.cullFace=x.CullFaceOptions.Back;this.hasSlicePlane=!0}}e.__decorate([d.parameter()],u.prototype,"doubleSided",void 0);e.__decorate([d.parameter()],u.prototype,"cullFace",void 0);e.__decorate([d.parameter()],u.prototype,"hasSlicePlane",void 0);class v extends d.MaterialParameterBlock{constructor(){super(...arguments);
this.externalColor=F.fromValues(1,1,1,1);this.externalColorMixMode=G.ColorMixModeEnum.Multiply;this.castShadows=f.ComponentParameterSummary.All}get transparent(){return 1>this.externalColor[3]?f.ComponentParameterSummary.All:f.ComponentParameterSummary.None}get opaqueOverride(){return this.externalColorMixMode===G.ColorMixModeEnum.Replace&&1===this.externalColor[3]?f.ComponentParameterSummary.All:f.ComponentParameterSummary.None}get visible(){return 0<this.externalColor[3]?f.ComponentParameterSummary.All:
f.ComponentParameterSummary.None}get type(){return H.ComponentDataType.Uniform}}e.__decorate([d.parameter({vectorOps:E.vec4})],v.prototype,"externalColor",void 0);e.__decorate([d.parameter()],v.prototype,"externalColorMixMode",void 0);e.__decorate([d.parameter()],v.prototype,"castShadows",void 0);f.ComponentParameterSummary=void 0;(function(b){b[b.All=0]="All";b[b.Some=1]="Some";b[b.None=2]="None"})(f.ComponentParameterSummary||(f.ComponentParameterSummary={}));class w extends d.MaterialParameterBlock{constructor(){super(...arguments);
this.texture=null;this.castShadows=this.opaqueOverride=this.transparent=f.ComponentParameterSummary.None}get type(){return H.ComponentDataType.Varying}}e.__decorate([d.parameter()],w.prototype,"texture",void 0);e.__decorate([d.parameter()],w.prototype,"transparent",void 0);e.__decorate([d.parameter()],w.prototype,"opaqueOverride",void 0);e.__decorate([d.parameter()],w.prototype,"castShadows",void 0);f.CommonMaterialParameters=u;f.ComponentMaterial=g;f.ComponentParametersUniform=v;f.ComponentParametersVarying=
w;Object.defineProperty(f,Symbol.toStringTag,{value:"Module"})});