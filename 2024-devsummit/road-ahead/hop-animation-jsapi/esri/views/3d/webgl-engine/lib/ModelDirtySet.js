// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("../../../../chunks/tslib.es6 ../../../../core/Accessor ../../../../core/MapUtils ../../../../core/uid ../../../../core/accessorSupport/decorators/property ../../../../core/has ../../../../core/Logger ../../../../core/RandomLCG ../../../../core/accessorSupport/decorators/subclass ./ModelDirtyTypes ./Util".split(" "),function(t,n,u,w,v,A,B,C,x,d,r){class y{constructor(a,b,c,e){this.operation=a;this.geometry=b;this.states=c;this.sync=e}}n=class extends n{constructor(a){super(a);this._residentGeomRecords=
new Map;this._dirtyGeomRecords=new Map;this.dirty=!1}commitLayer(a,b){const c=this._dirtyGeomRecords.get(a);c&&(c.forEach((e,f)=>{const h=this._ensureGeomRecord(a,f);e.forEach(({geometry:g,operation:k,states:l},m)=>{let p=!1;if(k===d.DirtyOperation.UPDATE){const q=h.get(m);if(q){if(l&d.DirtyState.TRANSFORMATION){const z=this.model.getObject(f);this.model.updateRenderGeometryTransformation(z,g,q)&&(p=!0)}p||b.updates.push({renderGeometry:q,updateType:l})}else r.assert(!1,"ModelDirtySet.commitLayer: invalid update")}if(k===
d.DirtyOperation.REMOVE||p)(l=h.get(m))?(b.removes.push(l),h.delete(m)):k===d.DirtyOperation.REMOVE&&r.assert(!1,"ModelDirtySet.commitLayer: invalid remove");if(k===d.DirtyOperation.ADD||p)k=this.model.getObject(f),null!=k&&(g=this.model.getRenderGeometry(k,g),b.adds.push(g),h.set(m,g))});0===h.size&&this._residentGeomRecords.get(a).delete(f)}),0===this._residentGeomRecords.get(a).size&&this._residentGeomRecords.delete(a),this._dirtyGeomRecords.delete(a),this.dirty=this._hasDirtyGeometryRecords)}commitSyncUpdates(a,
b){const c=this._dirtyGeomRecords.get(a);c&&c.forEach((e,f)=>{const h=this._ensureGeomRecord(a,f);e.forEach(({geometry:g,operation:k,states:l,sync:m},p)=>{let q=!1;k===d.DirtyOperation.UPDATE&&m&&((k=h.get(p))?(l&d.DirtyState.TRANSFORMATION&&(m=this.model.getObject(f),this.model.updateRenderGeometryTransformation(m,g,k)&&(q=!0)),q||b.updates.push({renderGeometry:k,updateType:l})):r.assert(!1,"ModelDirtySet.commitSyncUpdates: invalid update"))})})}getResidentRenderGeometries(a,b){(a=this._residentGeomRecords.get(a))&&
a.forEach(c=>c.forEach(e=>b.push(e)))}_objectStateChanged(a,b){for(const c of b.geometries)this._updateOrCreateDirtyRecord(b,c,null,d.DirtyOperation.UPDATE,a)}visibilityChanged(a){this._objectStateChanged(d.DirtyState.VISIBILITY,a)}highlightChanged(a){this._objectStateChanged(d.DirtyState.HIGHLIGHT,a)}occlusionChanged(a){this._objectStateChanged(d.DirtyState.OCCLUDEE,a)}attributesChanged({object:a,geometry:b,sync:c}){this._updateOrCreateDirtyRecord(a,b,null,d.DirtyOperation.UPDATE,d.DirtyState.GEOMETRY,
c)}layerAdded(a){a.objects.forAll(b=>this._layerObjectAdded(a,b))}layerRemoved(a){a.objects.forAll(b=>this._layerObjectRemoved(a,b))}layerObjectAdded(a){this._layerObjectAdded(a.layer,a.object)}_layerObjectAdded(a,b){a=a.id;for(const c of b.geometries)this._geometryAdded(b,c,a)}layerObjectRemoved(a){this._layerObjectRemoved(a.layer,a.object)}layerObjectsAdded(a){for(const b of a.objects)this._layerObjectAdded(a.layer,b)}layerObjectsRemoved(a){for(const b of a.objects)this._layerObjectRemoved(a.layer,
b)}_layerObjectRemoved(a,b){a=a.id;for(const c of b.geometries)this._geometryRemoved(b,c,a)}transformationChanged(a){const b=this._getParentLayerId(a);this._ensureGeomRecord(b,a.id).forEach(c=>{this._updateOrCreateDirtyRecord(a,c.geometry,b,d.DirtyOperation.UPDATE,d.DirtyState.TRANSFORMATION)})}shaderTransformationChanged(a){const b=this._getParentLayerId(a);this._ensureGeomRecord(b,a.id).forEach(c=>{c.objectShaderTransformationChanged(a.shaderTransformation)})}geometryAdded(a){this._geometryAdded(a.object,
a.geometry)}_geometryAdded(a,b,c=null){this._updateOrCreateDirtyRecord(a,b,c,d.DirtyOperation.ADD)}geometryRemoved(a){this._geometryRemoved(a.object,a.geometry)}_geometryRemoved(a,b,c=null){this._updateOrCreateDirtyRecord(a,b,c,d.DirtyOperation.REMOVE)}_updateOrCreateDirtyRecord(a,b,c,e,f=d.DirtyState.NONE,h=!1){c=c??this._getParentLayerId(a);const g=b.id;a=this._ensureDirtyRecord(c,a.id);(c=a.get(g))?(b=c.operation,b===d.DirtyOperation.REMOVE&&e===d.DirtyOperation.ADD&&c.states!==d.DirtyState.NONE?
c.operation=d.DirtyOperation.UPDATE:b===d.DirtyOperation.REMOVE&&e===d.DirtyOperation.ADD||b===d.DirtyOperation.ADD&&e===d.DirtyOperation.REMOVE?a.delete(g):(b!==d.DirtyOperation.UPDATE||e!==d.DirtyOperation.REMOVE&&e!==d.DirtyOperation.UPDATE?r.assert((b===d.DirtyOperation.REMOVE||b===d.DirtyOperation.ADD)&&e===d.DirtyOperation.UPDATE,"ModelDirtySet.objectGeometryAdded: inconsistent state"):c.operation=e,c.states|=f),c.sync=c.sync||h):a.set(g,new y(e,b,f,h));this.dirty=this._hasDirtyGeometryRecords}_ensureGeomRecord(a,
b){let c=this._residentGeomRecords.get(a);c||(c=new Map,this._residentGeomRecords.set(a,c));a=c.get(b);a||(a=new Map,c.set(b,a));return a}get _hasDirtyGeometryRecords(){return u.someMap(this._dirtyGeomRecords,a=>u.someMap(a,b=>b&&0<b.size))}_ensureDirtyRecord(a,b){let c=this._dirtyGeomRecords.get(a);c||(c=new Map,this._dirtyGeomRecords.set(a,c));a=c.get(b);a||(a=new Map,c.set(b,a));return a}_getParentLayerId(a){return a.parentLayer?a.parentLayer.id:w.nullUid}formatDebugInfo(){const a=["ADD","UPD",
void 0,"REM"];let b="";this._dirtyGeomRecords.forEach((c,e)=>{c.forEach((f,h)=>{0<b.length&&(b+="\n");b+=e+"."+h;const g=[];f.forEach(k=>{const l=k.operation;g[l]||(g[l]=[]);g[l].push(k.geometry.id)});for(f=0;f<g.length;f++)if(g[f])for(b+=" "+a[f-1]+": ",h=0;h<g[f].length;h++)b+=g[f][h]+", "})});return b}get test(){const a=this;return{get residentLayerCount(){return a._residentGeomRecords.size},get residentObjectCount(){return Array.from(a._residentGeomRecords.values()).reduce((b,c)=>b+c.size,0)},
commit:b=>a._dirtyGeomRecords.forEach((c,e)=>a.commitLayer(e,b))}}};t.__decorate([v.property({constructOnly:!0})],n.prototype,"model",void 0);t.__decorate([v.property()],n.prototype,"dirty",void 0);return n=t.__decorate([x.subclass("esri.views.3d.webgl-engine.lib.ModelDirtySet")],n)});