// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("require exports ../core/shaderTechnique/ReloadableShaderModule ../core/shaderTechnique/ShaderTechnique ../lib/DefaultVertexAttributeLocations ../lib/Program ../../../../chunks/Compositing.glsl ./CompositingTechniqueConfiguration ../../../webgl/enums ../../../webgl/renderState".split(" "),function(g,f,h,k,l,m,n,c,b,a){class d extends k.ShaderTechnique{initializeProgram(e){return new m.Program(e.rctx,d.shader.get().build(this.configuration),l.Default3D)}initializePipeline(){switch(this.configuration.alphaMode){case c.AlphaMode.None:return a.makePipelineState({colorWrite:a.defaultColorWriteParams});
case c.AlphaMode.Alpha:return a.makePipelineState({blending:a.separateBlendingParams(b.BlendFactor.SRC_ALPHA,b.BlendFactor.ONE,b.BlendFactor.ONE_MINUS_SRC_ALPHA,b.BlendFactor.ONE_MINUS_SRC_ALPHA),colorWrite:a.defaultColorWriteParams});case c.AlphaMode.PremultipliedAlpha:case c.AlphaMode.COUNT:return a.makePipelineState({blending:a.simpleBlendingParams(b.BlendFactor.ONE,b.BlendFactor.ONE_MINUS_SRC_ALPHA),colorWrite:a.defaultColorWriteParams})}}}d.shader=new h.ReloadableShaderModule(n.Compositing,()=>
new Promise((e,p)=>g(["./Compositing.glsl"],e,p)));f.CompositingTechnique=d;Object.defineProperty(f,Symbol.toStringTag,{value:"Module"})});