// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("require exports ../../../../chunks/tslib.es6 ../core/shaderLibrary/ShaderOutput ../core/shaderModules/interfaces ../core/shaderTechnique/ReloadableShaderModule ../core/shaderTechnique/ShaderTechnique ../core/shaderTechnique/ShaderTechniqueConfiguration ../lib/basicInterfaces ../lib/OrderIndependentTransparency ../lib/Program ../lib/StencilUtils ../lib/TransparencyPassType ../lib/VertexAttribute ../materials/DefaultTechniqueConfiguration ../../../../chunks/ImageMaterial.glsl ../../../webgl/enums ../../../webgl/renderState".split(" "),
function(w,f,b,h,x,y,z,c,t,k,A,m,l,n,B,C,u,g){class D extends x.NoParameters{}class p extends z.ShaderTechnique{initializeProgram(d){return new A.Program(d.rctx,p.shader.get().build(this.configuration),v)}_setPipelineState(d,q){const e=this.configuration,r=d===l.TransparencyPassType.NONE,E=d===l.TransparencyPassType.FrontFace;return g.makePipelineState({blending:e.output!==h.ShaderOutput.Color&&e.output!==h.ShaderOutput.Alpha||!e.transparent?null:r?F:k.oitBlending(d),culling:g.cullingParams(e.cullFace),
depthTest:{func:k.oitDepthTest(d)},depthWrite:r?e.writeDepth?g.defaultDepthWriteParams:null:k.oitDepthWrite(d),colorWrite:g.defaultColorWriteParams,stencilWrite:e.hasOccludees?m.stencilWriteMaskOn:null,stencilTest:e.hasOccludees?q?m.stencilToolMaskBaseParams:m.stencilBaseAllZerosParams:null,polygonOffset:r||E?null:k.getOITPolygonOffset(e.enableOffset)})}initializePipeline(){this._occludeePipelineState=this._setPipelineState(this.configuration.transparencyPassType,!0);return this._setPipelineState(this.configuration.transparencyPassType,
!1)}getPipeline(d){return d?this._occludeePipelineState:super.getPipeline()}}p.shader=new y.ReloadableShaderModule(C.ImageMaterial,()=>new Promise((d,q)=>w(["./ImageMaterial.glsl"],d,q)));const F=g.simpleBlendingParams(u.BlendFactor.ONE,u.BlendFactor.ONE_MINUS_SRC_ALPHA);class a extends B.DefaultTechniqueConfiguration{constructor(){super(...arguments);this.output=h.ShaderOutput.Color;this.cullFace=t.CullFaceOptions.None;this.transparent=this.hasSlicePlane=!1;this.writeDepth=this.enableOffset=!0;this.hasOccludees=
!1;this.transparencyPassType=l.TransparencyPassType.NONE;this.cullAboveGround=this.multipassEnabled=!1;this.perspectiveInterpolation=!0}}b.__decorate([c.parameter({count:h.ShaderOutput.COUNT})],a.prototype,"output",void 0);b.__decorate([c.parameter({count:t.CullFaceOptions.COUNT})],a.prototype,"cullFace",void 0);b.__decorate([c.parameter()],a.prototype,"hasSlicePlane",void 0);b.__decorate([c.parameter()],a.prototype,"transparent",void 0);b.__decorate([c.parameter()],a.prototype,"enableOffset",void 0);
b.__decorate([c.parameter()],a.prototype,"writeDepth",void 0);b.__decorate([c.parameter()],a.prototype,"hasOccludees",void 0);b.__decorate([c.parameter({count:l.TransparencyPassType.COUNT})],a.prototype,"transparencyPassType",void 0);b.__decorate([c.parameter()],a.prototype,"multipassEnabled",void 0);b.__decorate([c.parameter()],a.prototype,"cullAboveGround",void 0);b.__decorate([c.parameter()],a.prototype,"perspectiveInterpolation",void 0);b.__decorate([c.parameter({constValue:!1})],a.prototype,
"occlusionPass",void 0);const v=new Map([[n.VertexAttribute.POSITION,0],[n.VertexAttribute.UV0,2],[n.VertexAttribute.PERSPECTIVEDIVIDE,3]]);f.ImageMaterialPassParameters=D;f.ImageMaterialTechnique=p;f.ImageMaterialTechniqueConfiguration=a;f.vertexAttributeLocations=v;Object.defineProperty(f,Symbol.toStringTag,{value:"Module"})});