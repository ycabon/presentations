// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("../../../chunks/tslib.es6 ../../../geometry ../../../Graphic ../../../core/asyncUtils ../../../core/Collection ../../../core/Error ../../../core/Evented ../../../core/Logger ../../../core/maybe ../../../core/quantityUtils ../../../core/reactiveUtils ../../../core/screenUtils ../../../core/accessorSupport/decorators/property ../../../core/has ../../../core/RandomLCG ../../../core/accessorSupport/decorators/subclass ../../../geometry/support/coordsUtils ../../../layers/GraphicsLayer ../../../symbols/SimpleMarkerSymbol ../../ViewingMode ../../2d/interactive/SnappingVisualizer2D ./drawUtils ./GraphicMover ./HighlightHelper ./layerUtils ./settings ../../input/InputManager ../../interactive/keybindings ../../interactive/editGeometry/EditGeometryOperations ../../interactive/sketch/SketchOptions ../../interactive/snapping/SnappingContext ../../interactive/tooltip/Tooltip ../../interactive/tooltip/TranslateTooltipInfos ../../support/automaticAreaMeasurementUtils ../../support/automaticLengthMeasurementUtils ../../../geometry/Polyline ../../../geometry/Point".split(" "),
function(q,t,z,I,D,J,n,K,B,E,w,F,r,ra,sa,L,x,M,A,N,O,P,Q,R,S,T,U,V,W,G,X,Y,H,Z,C,aa,y){class ba{constructor(a,b,c){this.graphic=a;this.mover=b;this.selected=c;this.type="reshape-start"}}class ca{constructor(a,b,c){this.graphic=a;this.mover=b;this.selected=c;this.type="reshape"}}class da{constructor(a,b,c){this.graphic=a;this.mover=b;this.selected=c;this.type="reshape-stop"}}class ea{constructor(a,b,c){this.mover=a;this.dx=b;this.dy=c;this.type="move-start"}}class fa{constructor(a,b,c){this.mover=
a;this.dx=b;this.dy=c;this.type="move"}}class ha{constructor(a,b,c){this.mover=a;this.dx=b;this.dy=c;this.type="move-stop"}}class ia{constructor(a){this.added=a;this.type="vertex-select"}}class ja{constructor(a){this.removed=a;this.type="vertex-deselect"}}class ka{constructor(a,b,c,d){this.added=a;this.graphic=b;this.oldGraphic=c;this.vertices=d;this.type="vertex-add"}}class la{constructor(a,b,c,d){this.removed=a;this.graphic=b;this.oldGraphic=c;this.vertices=d;this.type="vertex-remove"}}t=T.settings.reshapeGraphics;
const ma={vertices:{default:new A({style:"circle",size:t.vertex.size,color:t.vertex.color,outline:{color:t.vertex.outlineColor,width:1}}),hover:new A({style:"circle",size:t.vertex.hoverSize,color:t.vertex.hoverColor,outline:{color:t.vertex.hoverOutlineColor,width:1}}),selected:new A({style:"circle",size:t.selected.size,color:t.selected.color,outline:{color:t.selected.outlineColor,width:1}})},midpoints:{default:new A({style:"circle",size:t.midpoint.size,color:t.midpoint.color,outline:{color:t.midpoint.outlineColor,
width:1}}),hover:new A({style:"circle",size:t.midpoint.size,color:t.midpoint.color,outline:{color:t.midpoint.outlineColor,width:1}})}};n=class extends n.EventedAccessor{constructor(a){super(a);this._editGeometryOperations=this._activeOperationInfo=null;this._graphicAttributes={esriSketchTool:"box"};this._translateVertexTooltipInfo=this._translateGraphicTooltipInfo=this.tooltip=this._stagedVertex=this._snappingTask=this._hoverGraphic=this._snappingContext=this._mover=null;this.callbacks={onReshapeStart(){},
onReshape(){},onReshapeStop(){},onMoveStart(){},onMove(){},onMoveStop(){},onGraphicClick(){}};this.enableVertices=this.enableMovement=this.enableMidpoints=!0;this.layer=this.graphic=null;this.midpointGraphics=new D;this.midpointSymbol=new A({style:"circle",size:6,color:[200,200,200],outline:{color:[100,100,100],width:1}});this.selectedVertices=[];this.snappingManager=null;this.symbols=ma;this.sketchOptions=new G;this.type="reshape";this.vertexGraphics=new D;this.view=null}initialize(){const a=this.view;
this._highlightHelper=new R({view:a});this._setup();this.addHandles([w.when(()=>a?.ready,()=>{const {layer:b,view:c}=this;S.addUniqueLayer(c,b);this.addHandles(c.on("key-down",d=>this._keyDownHandler(d),U.ViewEventPriorities.TOOL))},{once:!0,initial:!0}),w.pausable(()=>this.graphic,()=>this.refresh()),w.pausable(()=>this.layer,(b,c)=>{c&&(this._clearSelection(),this._resetGraphics(c));this.refresh()}),w.pausable(()=>this.enableMidpoints,()=>this.refresh()),w.watch(()=>this.sketchOptions.tooltips.effectiveEnabled,
b=>{this.tooltip=b?new Y.Tooltip({view:this.view}):B.destroyMaybe(this.tooltip)},w.syncAndInitial),w.watch(()=>this.view.effectiveTheme.accentColor,()=>this._updateSymbolsForTheme(),w.initial)])}destroy(){this._reset();this._mover?.destroy();this._mover=null;this.tooltip=B.destroyMaybe(this.tooltip)}set highlightsEnabled(a){this._highlightHelper?.removeAll();this._set("highlightsEnabled",a);this._setUpHighlights()}get state(){const a=this.view.ready,b=!(!this.graphic||!this.layer);return a&&b?"active":
a?"ready":"disabled"}isUIGraphic(a){const b=[];this.graphic&&b.push(this.graphic);b.concat(this.vertexGraphics.items,this.midpointGraphics.items);return 0<b.length&&b.includes(a)}refresh(){this._reset();this._setup()}reset(){this.graphic=null}clearSelection(){this._clearSelection()}removeSelectedVertices(){this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_setup(){const {graphic:a,layer:b}=this;if(b&&null!=a?.geometry){var c=a.geometry;"mesh"===c.type||"extent"===c.type?this._logGeometryTypeError():
("polygon"===c.type&&x.closeRingsAndFixWinding(c),this._setUpHighlights(),this._setupGraphics(),this._setupMover())}}_setUpHighlights(){this.highlightsEnabled&&this.graphic&&this._highlightHelper?.add(this.graphic)}_setUpGeometryHelper(){var a=this.graphic.geometry;null==a||"mesh"===a.type||"extent"===a.type?this._logGeometryTypeError():(a="multipoint"===a.type?new aa({paths:a.points,spatialReference:a.spatialReference}):a,this._editGeometryOperations=W.EditGeometryOperations.fromGeometry(a,N.ViewingMode.Local))}_saveSnappingContextForHandle(a,
b){this._snappingGraphicsLayer=new M({listMode:"hide",internal:!0,title:"Reshape snapping layer"});this.view.map.layers.add(this._snappingGraphicsLayer);this._snappingContext=new X.SnappingContext({editGeometryOperations:this._editGeometryOperations,elevationInfo:{mode:"on-the-ground",offset:0},pointer:b.viewEvent?.pointerType||"mouse",excludeFeature:this.graphic,feature:this.graphic,visualizer:new O.SnappingVisualizer2D(this._snappingGraphicsLayer),vertexHandle:this._getVertexFromEditGeometry(a)})}_reset(){this._clearSelection();
this._highlightHelper?.removeAll();this._updateTooltip();this._resetGraphics();this._resetSnappingStateVars();this._activeOperationInfo=null;this._mover&&this._mover.destroy();this._mover=null;this.view.cursor="default"}_resetSnappingStateVars(){null!=this.snappingManager&&this.snappingManager.doneSnapping();null!=this._snappingGraphicsLayer&&(this.view?.map&&this.view.map.layers.remove(this._snappingGraphicsLayer),this._snappingGraphicsLayer.destroy());this._editGeometryOperations=B.destroyMaybe(this._editGeometryOperations);
this._snappingTask=B.abortMaybe(this._snappingTask);this._stagedVertex=this._snappingContext=this._snappingTask=null}_resetGraphics(a){this._removeMidpointGraphics(a);this._removeVertexGraphics(a);this._set("selectedVertices",[])}_removeMidpointGraphics(a){(a=a||this.layer)&&a.removeMany(this.midpointGraphics.items);this.midpointGraphics.items.forEach(b=>b.destroy());this.midpointGraphics.removeAll()}_removeVertexGraphics(a){(a=a||this.layer)&&a.removeMany(this.vertexGraphics.items);this.vertexGraphics.items.forEach(b=>
b.destroy());this.vertexGraphics.removeAll()}_getCoordinatesForUI(a){const b=x.geometryToCoordinates(a.clone());if("polygon"===a.type)for(const c of b)a=c[c.length-1],c[0][0]===a[0]&&c[0][1]===a[1]&&2<c.length&&c.pop();return b}_setupGraphics(){var a=this.graphic.geometry;null==a||"polyline"!==a.type&&"polygon"!==a.type||(a=this._getCoordinatesForUI(a),this.enableMidpoints&&this._setUpMidpointGraphics(a),this.enableVertices&&this._setUpVertexGraphics(a))}_setUpMidpointGraphics(a){this._removeMidpointGraphics();
a=this._createMidpointGraphics(a);this.midpointGraphics.addMany(a);this.layer.addMany(a)}_setUpVertexGraphics(a){this._removeVertexGraphics();a=this._createVertexGraphics(a);this.vertexGraphics.addMany(a);this._storeRelatedVertexIndices();this.layer.addMany(a)}_createVertexGraphics(a){const {_graphicAttributes:b,symbols:c,view:{spatialReference:d}}=this,f=[];a?.forEach((e,g)=>{e.forEach((h,k)=>{const [m,l,p]=h;f.push(new z({geometry:new y({x:m,y:l,z:p,spatialReference:d}),symbol:c?.vertices?.default,
attributes:{...b,pathIndex:g,pointIndex:k}}))})});return f}_createMidpointGraphics(a){const {_graphicAttributes:b,symbols:c,view:{spatialReference:d}}=this,f=[];a?.forEach((e,g)=>{e.forEach((h,k)=>{const [m,l,p]=h;h=e[k+1]?k+1:0;if("polygon"===this.graphic.geometry?.type||0!==h){const [u,v,na]=e[h],[oa,pa,qa]=x.getMidpoint([m,l,p],[u,v,na]);f.push(new z({geometry:new y({x:oa,y:pa,z:qa,spatialReference:d}),symbol:c.midpoints.default,attributes:{...b,pathIndex:g,pointIndexStart:k,pointIndexEnd:h}}))}})});
return f}_updateSymbolsForTheme(){const a=this.view.effectiveTheme.accentColor;this.symbols={vertices:{...this.symbols.vertices,default:this.symbols.vertices.default.clone().set("color",a),hover:this.symbols.vertices.hover?.clone().set("color",a)},midpoints:{...this.symbols.midpoints}};for(const b of this.vertexGraphics)this._isSelected(b)?b.symbol=this.symbols.vertices.selected:b.symbol=this._hoverGraphic===b?this.symbols.vertices.hover:this.symbols.vertices.default}_storeRelatedVertexIndices(){const a=
this.vertexGraphics.items;if(a){var b=a.map(({geometry:c})=>({x:c.x,y:c.y}));for(let c=0;c<b.length;c++){const d=[];for(let f=0;f<b.length;f++){if(c===f)continue;const e=b[c],g=b[f];e.x===g.x&&e.y===g.y&&d.push(f)}a[c].attributes.relatedGraphicIndices=d}}}_setupMover(){const {enableMovement:a,graphic:b,midpointGraphics:c,vertexGraphics:d,view:f}=this,e=d.concat(c).items;a&&e.push(b);this._mover=new Q({enableMoveAllGraphics:!1,highlightsEnabled:!1,indicatorsEnabled:!1,graphics:e,view:f,callbacks:{onGraphicClick:g=>
this._onGraphicClickCallback(g),onGraphicMoveStart:g=>this._onGraphicMoveStartCallback(g),onGraphicMove:g=>this._onGraphicMoveCallback(g),onGraphicMoveStop:g=>this._onGraphicMoveStopCallback(g),onGraphicPointerOver:g=>this._onGraphicPointerOverCallback(g),onGraphicPointerOut:g=>this._onGraphicPointerOutCallback(g)}})}_onGraphicClickCallback(a){a.viewEvent.stopPropagation();const b=a.graphic;if(b===this.graphic){if(this.clearSelection(),this.emit("graphic-click",a),this.callbacks.onGraphicClick)this.callbacks.onGraphicClick(a)}else if(this._isMidpoint(b)){if(2!==
a.viewEvent.button){a=this.graphic.clone();var c=this._createVertexFromMidpoint(b);this.refresh();this._emitVertexAddEvent([b],a,c)}}else this._isVertex(b)&&(a.viewEvent.stopPropagation(),2===a.viewEvent.button?this._removeVertices(b):(a.viewEvent.native.shiftKey||this._clearSelection(),this.selectedVertices.includes(b)?this._removeFromSelection(b,!0):this._addToSelection(b)))}_setUpOperation(a){const {graphic:b,dx:c,dy:d}=a,f=b===this.graphic;this._resetSnappingStateVars();this._setUpGeometryHelper();
this._saveSnappingContextForHandle(b,a);this._activeOperationInfo={target:this.graphic,mover:b,operationType:f?"move":"reshape",totalDx:c,totalDy:d}}_onGraphicMoveStartCallback(a){const {dx:b,dy:c,graphic:d}=a;if(d===this.graphic){var {geometry:f}=d;this._setUpOperation(a);this._emitMoveStartEvent(b,c);null!=f&&"point"===f.type&&this._onHandleMove(d,b,c,a,()=>{this._updateTooltip(this.graphic,a.viewEvent);this._emitMoveEvent(b,c)})}else{if(!this.selectedVertices.includes(d)){this._clearSelection();
if(this._isMidpoint(d)){f=this.graphic.clone();const e=this._createVertexFromMidpoint(d);this._emitVertexAddEvent([d],f,e)}this._addToSelection(d)}this._setUpOperation(a);this._emitReshapeStartEvent(d);this._onHandleMove(d,b,c,a,()=>{this._updateTooltip(d,a.viewEvent);this._emitReshapeEvent(d)})}}_onGraphicMoveCallback(a){var b=this._activeOperationInfo;if(b){var {dx:c,dy:d,graphic:f}=a;b.totalDx+=c;b.totalDy+=d;({operationType:b}=b);var {geometry:e}=f;if(null!=e)if("move"===b)if("point"===e.type)this._onHandleMove(f,
c,d,a,()=>{this._updateTooltip(this.graphic,a.viewEvent);this._emitMoveEvent(c,d)});else{if("polyline"===e.type||"polygon"===e.type)b=this._getCoordinatesForUI(e),this._updateVertexGraphicLocations(b),this._updateTooltip(this.graphic,a.viewEvent),this._emitMoveEvent(c,d)}else this._onHandleMove(f,c,d,a,()=>{this._updateTooltip(f,a.viewEvent);this._emitReshapeEvent(f)})}}_onGraphicMoveStopCallback(a){const b=this._activeOperationInfo;if(b){var {dx:c,dy:d,graphic:f}=a,{operationType:e}=b;b.totalDx+=
c;b.totalDy+=d;this._onHandleMove(f,c,d,a,()=>"move"===e?this._emitMoveStopEvent():this._emitReshapeStopEvent(f));this._isMidpoint(f)?this.refresh():(this._updateTooltip(this._isVertex(f)?f:null),this._resetSnappingStateVars(),this._activeOperationInfo=null)}}_updateVertexGraphicLocations(a){const b=this.view.spatialReference;for(const c of this.vertexGraphics){const {pathIndex:d,pointIndex:f}=c.attributes,[e,g,h]=a[d][f];c.geometry=new y({x:e,y:g,z:h,spatialReference:b})}this._updateMidpointGraphicLocations(a)}_updateMidpointGraphicLocations(a){for(const b of this.midpointGraphics){const {pathIndex:c,
pointIndexStart:d,pointIndexEnd:f}=b.attributes,[e,g,h]=a[c][d],[k,m,l]=a[c][f],[p,u,v]=x.getMidpoint([e,g,h],[k,m,l]);b.geometry=new y({x:p,y:u,z:v,spatialReference:this.view.spatialReference})}}_getIndicesForVertexGraphic({attributes:a}){return[a?.pathIndex||0,a?.pointIndex||0]}_getVertexFromEditGeometry(a){const [b,c]=this._getIndicesForVertexGraphic(a);return this._editGeometryOperations.data.components[b].vertices[c]}_onHandleMove(a,b,c,d,f){B.abortMaybe(this._snappingTask);const e=this._snappingContext;
if(e){var g=a.geometry,h="graphic-move-stop"===d.type;if(null!=this.snappingManager&&2>this.selectedVertices.length&&!h){const k=this.snappingManager;this._stagedVertex=k.update({point:g,context:e});this._syncGeometryAfterVertexMove(a,new y(this._stagedVertex),b,c,h);f();this._snappingTask=I.createTask(async m=>{m=await k.snap({point:g,context:e,signal:m});m.valid&&(this._stagedVertex=m.apply(),this._syncGeometryAfterVertexMove(a,new y(this._stagedVertex),b,c,h),f())})}else d=null!=this._stagedVertex?
new y(this._stagedVertex):g,this._syncGeometryAfterVertexMove(a,d,b,c,h),f()}}async _syncGeometryAfterVertexMove(a,b,c,d,f=!1){const e=this._editGeometryOperations.data.geometry;if("point"===e.type)a.geometry=b;else if("mesh"===e.type)a.geometry=e.centerAt(b),a.notifyGeometryChanged();else{const {x:g,y:h,z:k}=b,[m,l]=this._getIndicesForVertexGraphic(a);let p=x.geometryToCoordinates(e);const u=p[m].length-1,v=null!=k?[g,h,k]:[g,h];p[m][l]=v;"polygon"===e.type&&(0===l?p[m][u]=v:l===u&&(p[m][0]=v));
this._isVertex(a)&&(p=this._moveRelatedCoordinates(p,a,v),p=this._moveSelectedHandleCoordinates(p,a,c,d,"polygon"===e.type),this._updateMidpointGraphicLocations(p));this.graphic.geometry=e.clone();c=this._getVertexFromEditGeometry(a);this._editGeometryOperations.moveVertices([c],g-c.pos[0],h-c.pos[1],0);f&&(this._mover?this._mover.updateGeometry(this._mover.graphics.indexOf(a),b):a.geometry=b)}}_moveRelatedCoordinates(a,b,c){var {relatedGraphicIndices:d}=b.attributes;for(const f of d){d=this.vertexGraphics.at(f);
const {pathIndex:e,pointIndex:g}=d.attributes;a[e][g]=c;d.geometry=b.geometry}return a}_moveSelectedHandleCoordinates(a,b,c,d,f){for(const g of this.selectedVertices)if(g!==b){const {pathIndex:h,pointIndex:k,relatedGraphicIndices:m}=g.attributes,l=P.cloneMove(g.geometry,c,d,this.view);var e=a[h].length-1;a[h][k]=[l.x,l.y];g.geometry=l;f&&(0===k?a[h][e]=[l.x,l.y]:k===e&&(a[h][0]=[l.x,l.y]));for(const p of m){e=this.vertexGraphics.at(p);const {pathIndex:u,pointIndex:v}=e.attributes;a[u][v]=[l.x,l.y];
e.geometry=l}}return a}_onGraphicPointerOverCallback(a){this._hoverGraphic=a=a.graphic;const b=this._isVertex(a);b&&!this._isSelected(a)&&(a.symbol=this.symbols.vertices.hover);this._updateTooltip(b?a:null);this._updateHoverCursor(a)}_onGraphicPointerOutCallback(a){a=a.graphic;this._hoverGraphic=null;this._isVertex(a)&&!this._isSelected(a)&&(a.symbol=this.symbols.vertices.default);this.view.cursor="default";this._updateTooltip()}_createVertexFromMidpoint(a){const {_graphicAttributes:b,graphic:c}=
this;var d=c.geometry;if(null==d||"polygon"!==d.type&&"polyline"!==d.type)return[];d=d.clone();const f=[],{pathIndex:e,pointIndexStart:g,pointIndexEnd:h}=a.attributes,{x:k,y:m,z:l}=a.geometry,p=0===h?g+1:h,u=x.geometryToCoordinates(d);u[e].splice(p,0,null!=l?[k,m,l]:[k,m]);a.attributes={...b,pathIndex:e,pointIndex:p,relatedGraphicIndices:[]};f.push({coordinates:u[e][p],componentIndex:e,vertexIndex:p});this.graphic.geometry=d;return f}_addToSelection(a){a instanceof z&&(a=[a]);for(const b of a)b.symbol=
this.symbols.vertices.selected;this._set("selectedVertices",this.selectedVertices.concat(a));this._emitSelectEvent(a)}_removeFromSelection(a,b){const {vertices:c}=this.symbols;b=b?c.hover:c.default;a instanceof z&&(a=[a]);for(const d of a)this.selectedVertices.splice(this.selectedVertices.indexOf(d),1),this._set("selectedVertices",this.selectedVertices),d.set("symbol",b);this._emitDeselectEvent(a)}_clearSelection(){if(this.selectedVertices.length){const a=this.selectedVertices;for(const b of this.selectedVertices)b.set("symbol",
this.symbols.vertices.default);this._set("selectedVertices",[]);this._emitDeselectEvent(a)}}_keyDownHandler(a){V.sketchKeys.delete.includes(a.key)&&!a.repeat&&this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_removeVertices(a){var b=this.graphic.geometry;if(!(null==b||"polygon"!==b.type&&"polyline"!==b.type||"polygon"===b.type&&4>this.vertexGraphics.length||3>this.vertexGraphics.length)){a instanceof z&&(a=[a]);var c=this.graphic.clone();b=b.clone();var d=x.geometryToCoordinates(b),
f=[];a instanceof z&&(a=[a]);for(const e of a){const {x:g,y:h}=e.geometry;for(let k=0;k<d.length;k++){const m=d[k];for(let l=0;l<m.length;l++){const [p,u]=m[l];g===p&&h===u&&(f.push({coordinates:d[k][l],componentIndex:k,vertexIndex:l}),d[k].splice(Number(l),1))}}}if("polygon"===b.type)d=d.filter(e=>{if(2>e.length)return!1;const [g,h]=e[0],[k,m]=e[e.length-1];if(2===e.length&&g===k&&h===m)return!1;g===k&&h===m||e.push(e[0]);return!0}),b.rings=d;else{for(const e of d)1===e.length&&d.splice(d.indexOf(e),
1);b.paths=d}this.graphic.geometry=b;this.refresh();this._emitVertexRemoveEvent(a,c,f)}}_isVertex(a){return this.vertexGraphics.includes(a)}_isSelected(a){return this._isVertex(a)&&this.selectedVertices.includes(a)}_isMidpoint(a){return this.midpointGraphics.includes(a)}_updateHoverCursor(a){this.view.cursor=this._isMidpoint(a)?"copy":"move"}_updateTooltip(a,b){null!=this.tooltip&&(a?a===this.graphic?this._updateMoveGraphicTooltip(b):this._updateMoveVertexTooltip(b):this.tooltip.clear())}_updateMoveGraphicTooltip(a){const {tooltip:b,
sketchOptions:c,view:d}=this;if(null!=b){var f=this._translateGraphicTooltipInfo??(this._translateGraphicTooltipInfo=new H.TranslateGraphicTooltipInfo({sketchOptions:c}));f.clear();f.sketchOptions=c;if(a){const {x:e,y:g}=a.origin;a=d.toMap(a);const h=d.toMap(F.createScreenPoint(e,g));a=C.autoDistanceBetweenPoints2D(h,a);f.distance=null!=a?a:E.zeroMeters}b.info=f}}_updateMoveVertexTooltip(a){const {tooltip:b,graphic:{geometry:c},sketchOptions:d,view:f}=this;if(null!=b){var e=this._translateVertexTooltipInfo??
(this._translateVertexTooltipInfo=new H.TranslateVertexTooltipInfo({sketchOptions:d}));e.clear();e.sketchOptions=d;"polygon"===c?.type?e.area=Z.autoArea2D(c):"polyline"===c?.type&&(e.totalLength=C.autoLength2D(c));if(a){const {x:g,y:h}=a.origin;a=f.toMap(a);const k=f.toMap(F.createScreenPoint(g,h));a=C.autoDistanceBetweenPoints2D(k,a);e.distance=null!=a?a:E.zeroMeters}b.info=e}}_emitMoveStartEvent(a,b){a=new ea(this.graphic,a,b);this.emit("move-start",a);if(this.callbacks.onMoveStart)this.callbacks.onMoveStart(a)}_emitMoveEvent(a,
b){a=new fa(this.graphic,a,b);this.emit("move",a);if(this.callbacks.onMove)this.callbacks.onMove(a)}_emitMoveStopEvent(){var a=this._activeOperationInfo;if(a){var {totalDx:b,totalDy:c}=a;a=new ha(this.graphic,b,c);this.emit("move-stop",a);if(this.callbacks.onMoveStop)this.callbacks.onMoveStop(a)}}_emitReshapeStartEvent(a){a=new ba(this.graphic,a,this.selectedVertices);this.emit("reshape-start",a);if(this.callbacks.onReshapeStart)this.callbacks.onReshapeStart(a)}_emitReshapeEvent(a){a=new ca(this.graphic,
a,this.selectedVertices);this.emit("reshape",a);if(this.callbacks.onReshape)this.callbacks.onReshape(a)}_emitReshapeStopEvent(a){a=new da(this.graphic,a,this.selectedVertices);this.emit("reshape-stop",a);if(this.callbacks.onReshapeStop)this.callbacks.onReshapeStop(a)}_emitSelectEvent(a){a=new ia(a);this.emit("select",a);if(this.callbacks.onVertexSelect)this.callbacks.onVertexSelect(a)}_emitDeselectEvent(a){a=new ja(a);this.emit("deselect",a);if(this.callbacks.onVertexDeselect)this.callbacks.onVertexDeselect(a)}_emitVertexAddEvent(a,
b,c){a=new ka(a,this.graphic,b,c);this.emit("vertex-add",a);if(this.callbacks.onVertexAdd)this.callbacks.onVertexAdd(a)}_emitVertexRemoveEvent(a,b,c){a=new la(a,this.graphic,b,c);this.emit("vertex-remove",a);if(this.callbacks.onVertexRemove)this.callbacks.onVertexRemove(a)}_logGeometryTypeError(){K.getLogger(this).error(new J("reshape:invalid-geometry","Reshape operation not supported for the provided graphic. The geometry type is not supported."))}};q.__decorate([r.property()],n.prototype,"tooltip",
void 0);q.__decorate([r.property()],n.prototype,"_translateGraphicTooltipInfo",void 0);q.__decorate([r.property()],n.prototype,"_translateVertexTooltipInfo",void 0);q.__decorate([r.property()],n.prototype,"callbacks",void 0);q.__decorate([r.property()],n.prototype,"enableMidpoints",void 0);q.__decorate([r.property()],n.prototype,"enableMovement",void 0);q.__decorate([r.property()],n.prototype,"enableVertices",void 0);q.__decorate([r.property()],n.prototype,"graphic",void 0);q.__decorate([r.property({value:!0})],
n.prototype,"highlightsEnabled",null);q.__decorate([r.property()],n.prototype,"layer",void 0);q.__decorate([r.property({readOnly:!0})],n.prototype,"midpointGraphics",void 0);q.__decorate([r.property()],n.prototype,"midpointSymbol",void 0);q.__decorate([r.property({readOnly:!0})],n.prototype,"selectedVertices",void 0);q.__decorate([r.property()],n.prototype,"snappingManager",void 0);q.__decorate([r.property({readOnly:!0})],n.prototype,"state",null);q.__decorate([r.property()],n.prototype,"symbols",
void 0);q.__decorate([r.property({type:G})],n.prototype,"sketchOptions",void 0);q.__decorate([r.property({readOnly:!0})],n.prototype,"type",void 0);q.__decorate([r.property({readOnly:!0})],n.prototype,"vertexGraphics",void 0);q.__decorate([r.property()],n.prototype,"view",void 0);return n=q.__decorate([L.subclass("esri.views.draw.support.Reshape")],n)});