// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../core/mathUtils ../../../../core/libs/gl-matrix-2/math/vec2 ../../../../core/libs/gl-matrix-2/factories/vec2f64 ../../../../chunks/vec32 ../../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../../geometry/support/plane ../../../../geometry/support/vector ../../../support/geometry2dUtils".split(" "),function(m,x,p,n,c,g,h,t,u){class v{get plane(){return this._plane}get requiresSplitEdgeLeft(){return!this._left.isOriginalDirection}get requiresSplitEdgeRight(){return!this._right.isOriginalDirection}get edgeDirection(){return this._edgeDirection}constructor(a,
b,d,e=0,f=q.IMMEDIATE){this._helper=a;this._planeType=b;this._edge=d;this.distance=e;this._plane=h.create();this._offsetPlane=h.create();this._minDistance=-Infinity;this._maxDistance=Infinity;this._selectedArrow=1;f===q.IMMEDIATE&&this._initialize()}_initialize(){this._initializeNeighbors();this._initializePlane();this._initializeDistanceConstraints()}_initializeNeighbors(){const a=this._toXYZ(this._edge.leftVertex.pos),b=this._toXYZ(this._edge.leftVertex.leftEdge?.leftVertex?.pos),d=this._toXYZ(this._edge.rightVertex.pos),
e=this._toXYZ(this._edge.rightVertex.rightEdge?.rightVertex?.pos);this._edgeDirection=c.direction(g.create(),a,d);b?(this._left=this._computeNeighbor(a,b,this._edgeDirection),this._right=this._computeNeighbor(d,e,this._edgeDirection,this._left)):(this._right=this._computeNeighbor(d,e,this._edgeDirection),this._left=this._computeNeighbor(a,b,this._edgeDirection,this._right))}_toXYZ(a){return null!=a?this._helper.toXYZ(a):null}_pointToXYZ(a){return this._toXYZ(this._helper.pointToVector(a))}_computeNeighbor(a,
b,d,e){const f=g.create();if(b)return c.direction(f,a,b),e=!this._passesBisectingAngleThreshold(f,d),{start:a,end:b,direction:e?this._bisectVectorsPerpendicular(d,f):f,isOriginalDirection:!e};this._helper.hasZ()?e&&(c.cross(f,d,e.direction),c.cross(f,f,d),c.normalize(f,f),Math.sign(f[1])!==Math.sign(d[0])&&c.scale(f,f,-1)):c.set(f,-d[1],d[0],0);return{start:a,end:b,direction:f,isOriginalDirection:!0}}_passesBisectingAngleThreshold(a,b){a=Math.abs(t.angle(b,a));return a>=w&&a<=Math.PI-w}_bisectVectorsPerpendicular(a,
b){a=0>c.dot(a,b)?a:c.negate(g.create(),a);const d=Math.abs(c.dot(a,b));if(!(.001>d||.999<d))return this._bisectDirection(a,b);b=c.cross(g.create(),a,[0,0,1]);return c.normalize(b,b)}_bisectDirection(a,b){a=c.add(g.create(),a,b);return c.normalize(a,a)}_initializePlane(){const a=this._computeNormalDirection(this._left),b=this._computeNormalDirection(this._right);0>c.dot(a,b)&&c.negate(b,b);h.fromPositionAndNormal(this._left.start,this._bisectDirection(a,b),this._plane)}_computeNormalDirection(a){a=
c.cross(g.create(),a.direction,this._edgeDirection);c.normalize(a,a);a=c.cross(g.create(),this._edgeDirection,a);this._planeType===m.PlaneType.XY&&(a[2]=0);return c.normalize(a,a)}_initializeDistanceConstraints(){null==this._left.end||this.requiresSplitEdgeLeft||this._updateDistanceConstraint(h.signedDistance(this._plane,this._left.end));null==this._right.end||this.requiresSplitEdgeRight||this._updateDistanceConstraint(h.signedDistance(this._plane,this._right.end));this._updateIntersectDistanceConstraint(this._plane)}_updateDistanceConstraint(a){0>=
a&&(this._minDistance=Math.max(this._minDistance,a));0<=a&&(this._maxDistance=Math.min(this._maxDistance,a))}_updateIntersectDistanceConstraint(a){var b=h.getNormal(a);const d=this._edgeDirection;var e=c.add(g.create(),this._left.start,this._left.direction);const f=c.add(g.create(),this._right.start,this._right.direction);var k=this._pointInBasis2D(n.create(),b,d,this._left.start),l=this._pointInBasis2D(n.create(),b,d,e),r=this._pointInBasis2D(n.create(),b,d,this._right.start);b=this._pointInBasis2D(n.create(),
b,d,f);[r]=u.intersectLineAndRay({start:l,end:k,type:u.LineType.LINE},{start:b,end:r,type:u.LineType.LINE});r&&(k=p.subtract(n.create(),k,l),p.normalize(k,k),l=p.subtract(n.create(),r,l),l=p.dot(k,l),e=c.add(g.create(),e,c.scale(g.create(),this._left.direction,-l)),a=h.signedDistance(a,e),this._updateDistanceConstraint(a))}_pointInBasis2D(a,b,d,e){a[0]=t.projectPointSignedLength(b,e);a[1]=t.projectPointSignedLength(d,e);return a}_offset(a,b){Number.isFinite(this._minDistance)&&(b=Math.max(this._minDistance,
b));Number.isFinite(this._maxDistance)&&(b=Math.min(this._maxDistance,b));h.copy(this._offsetPlane,this._plane);this._offsetPlane[3]-=b;b=(e,f,k)=>null!=f&&h.intersectLine(this._offsetPlane,e,c.add(g.create(),e,f),k);const d=g.create();(a===this._edge.leftVertex?b(this._left.start,this._left.direction,d):b(this._right.start,this._right.direction,d))&&this._helper.copy(this._helper.fromXYZ(d,void 0,this._helper.getM(a.pos)),a.pos)}selectArrowFromStartPoint(a){this._selectedArrow=h.isPointInside(this.plane,
this._pointToXYZ(a))?1:-1}get selectedArrow(){return this._selectedArrow}signedDistanceToPoint(a){return h.signedDistance(this.plane,this._pointToXYZ(a))}apply(a){this._offset(a,this.distance)}undo(a){this._offset(a,0)}canAccumulate(a){return a instanceof v&&this._edge.leftVertex.index===a._edge.leftVertex.index&&this._edge.rightVertex.index===a._edge.rightVertex.index&&this._edge.component===a._edge.component&&this._maybeEqualsVec3(this._left.direction,a._left.direction)&&this._maybeEqualsVec3(this._right.direction,
a._right.direction)&&c.equals(h.getNormal(this._plane),h.getNormal(a._plane))}accumulate(a,b){this._offset(a,this._plane[3]-b._plane[3]+b.distance)}accumulateParams(a){this.distance=a.distance-a._plane[3]+this._plane[3]}clone(){const a=new v(this._helper,this._planeType,this._edge,this.distance,q.DEFERRED);h.copy(a._plane,this._plane);h.copy(a._offsetPlane,this._offsetPlane);a._maxDistance=this._maxDistance;a._minDistance=this._minDistance;a._left=this._cloneNeighbor(this._left);a._right=this._cloneNeighbor(this._right);
a._edgeDirection=c.copy(g.create(),this._edgeDirection);return a}_maybeEqualsVec3(a,b){return null==a&&null==b||null!=a&&null!=b&&c.equals(a,b)}_cloneNeighbor({start:a,end:b,direction:d,isOriginalDirection:e}){return{start:c.copy(g.create(),a),end:null!=b?c.copy(g.create(),b):null,direction:c.copy(g.create(),d),isOriginalDirection:e}}}const w=x.deg2rad(15);m.PlaneType=void 0;(function(a){a[a.XYZ=0]="XYZ";a[a.XY=1]="XY"})(m.PlaneType||(m.PlaneType={}));var q;(function(a){a[a.IMMEDIATE=0]="IMMEDIATE";
a[a.DEFERRED=1]="DEFERRED"})(q||={});m.OffsetEdgeVertex=v;Object.defineProperty(m,Symbol.toStringTag,{value:"Module"})});