// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../core/arrayUtils ../../../core/mathUtils ../../../core/libs/gl-matrix-2/math/vec2 ../../../core/libs/gl-matrix-2/factories/vec2f64 ../../../chunks/vec32 ../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../chunks/vec42 ../../../core/libs/gl-matrix-2/factories/vec4f64 ../../../geometry/support/geodesicConstants ../../../geometry/support/geodesicUtils ../../../geometry/support/plane ../../../chunks/sphere ../../3d/support/mathUtils ./normalizedPoint ../../support/geometry3dUtils ../../support/geometry2dUtils".split(" "),
function(n,X,oa,H,Y,k,m,Z,pa,qa,I,l,K,ra,g,e,aa){function A(a,b){if(a instanceof L){var c=[];for(const d of a.constraints)(a=d.intersect(b))&&c.push(a);return N(c)}if(b instanceof L)return A(b,a);if(a instanceof M)return ba(a,b);if(b instanceof M)return ba(b,a);if(u(a))return{point:c}=a,b=b.closestTo(c),k.equals(b,c)?a:void 0;if(x(a)){if(u(b))return A(b,a);if(x(b))return v(e.intersectLineLikes(a.lineLike,b.lineLike));if(B(b))return sa(a,b);if(y(b))return v(e.intersectVerticalPlaneAndLineLike(b.planeLike,
a.lineLike));if(z(b))return v(e.intersectLineLikeAndVerticalCylinder(a.lineLike,b.center,b.radius));if(F(b))return v(e.intersectLineLikeAndCircle(a.lineLike,b));if(C(b))return ta(a,b);if(D(b))return ua(a,b)}else if(B(a)){if(u(b)||x(b))return A(b,a);if(B(b))return e.isClose(a.z,b.z)?a:void 0;if(y(b))return va(a,b);if(z(b)){const [d,f]=b.center;return new O(g.fromValues(d,f,a.z),b.radius)}if(F(b))return wa(a,b);if(C(b))return e.isClose(b.center[2],a.z)?b:void 0;if(D(b))return xa(a,b)}else if(y(a)){if(u(b)||
x(b)||B(b))return A(b,a);if(y(b))return S(e.intersectVerticalPlanes(a.planeLike,b.planeLike));if(z(b))return S(e.intersectVerticalPlaneAndVerticalCylinder(a.planeLike,b.center,b.radius));if(F(b))return ya(a,b);if(C(b))return za(a,b);if(D(b))return Aa(a,b)}else if(z(a)){if(u(b)||x(b)||B(b)||y(b))return A(b,a);if(z(b))return S(e.intersectVerticalCylinders(g.asVec2(a.center),a.radius,g.asVec2(b.center),b.radius));if(!F(b)){if(C(b))return c=H.squaredDistance(g.asVec2(a.center),g.asVec2(b.center)),e.isClose(c,
0)&&e.isClose(a.radius,b.radius)||(a=e.intersectVerticalCylinders(g.asVec2(a.center),a.radius,g.asVec2(b.center),b.radius),b=ca(a,b.center[2])),b;D(b)}}else if(F(a)){if(u(b)||x(b)||B(b)||y(b)||z(b))return A(b,a);F(b)||(C(b)?b.asCircle():D(b))}else if(C(a)){if(u(b)||x(b)||B(b)||y(b)||z(b)||F(b))return A(b,a);if(C(b))return e.vectorsHaveCloseZ(b.center,a.center)?(c=H.squaredDistance(g.asVec2(b.center),g.asVec2(a.center)),e.isClose(c,0)&&e.isClose(b.radius,a.radius)||(a=e.intersectVerticalCylinders(g.asVec2(b.center),
b.radius,g.asVec2(a.center),a.radius),b=ca(a,b.center[2]))):b=void 0,b;D(b)}else if(D(a)){if(u(b)||x(b)||B(b)||y(b)||z(b)||C(b))return A(b,a);D(b)}}function ta({lineLike:a},{center:b,radius:c}){const d=b[2];a=e.intersectLineLikeAndVerticalCylinder(a,b,c).filter(f=>e.isClose(f[2],d));return v(a)}function ua({lineLike:a},{sphere:b}){return v(K.intersectLine(b,a.start,a.end))}function va({z:a},{planeLike:b}){const [c,d]=b.start,[f,h]=b.end,p=g.fromValues(c,d,a);a=g.fromValues(f,h,a);return b.type===
e.VerticalPlaneType.PLANE?new T(p,a):new da(p,a)}function xa(a,{center:b,radius:c}){const d=Math.abs(b[2]-a.z);if(!(d>c)||e.isClose(d,c))if(a=g.fromValues(b[0],b[1],a.z),c=Math.sqrt(c**2-d**2),!e.isClose(c,0))return new O(a,c)}function ba(a,b){const {planeLike:c,getZ:d}=a,f=[];if(u(b))a.addIfOnTheGround(f,e.intersectVerticalPlaneAndPoint(c,b.point));else if(x(b))a.addIfOnTheGround(f,e.intersectVerticalPlaneAndLineLike(c,b.lineLike));else if(z(b))for(const [h,p]of e.intersectVerticalPlaneAndVerticalCylinder(c,
b.center,b.radius))a=d(h,p),null!=a&&f.push(m.fromValues(h,p,a));else if(y(b)||b instanceof M)for(const [h,p]of e.intersectVerticalPlanes(c,b.planeLike))a=d(h,p)??0,f.push(m.fromValues(h,p,a));return v(f)}function S(a){return N(a.map(([b,c])=>{const d=g.fromValues(b,c,0);b=g.fromValues(b,c,1);return new T(d,b)}))}function v(a){return N(a.map(b=>b?new J(g.fromVec3(b)):void 0))}function ca(a,b){return v(a.map(([c,d])=>[c,d,b]))}function N(a){if(0!==a.length)return 1===a.length?a[0]??void 0:new L(a.filter(X.isSome))}
function u(a){return a instanceof J}function x(a){return a instanceof P}function B(a){return a instanceof ea}function y(a){return a instanceof Q}function z(a){return a instanceof fa}function C(a){return a instanceof O}function F(a){return a instanceof R}function D(a){return a instanceof ha}class t{intersect(a){return A(this,a)}closestPoints(a){return[this.closestTo(a)]}}class J extends t{constructor(a){super();this.point=a}equals(a){return this===a||u(a)&&k.exactEquals(this.point,a.point)}closestTo(){return g.clone(this.point)}}
class P extends t{constructor(a,b,c){super();this.start=a;this.end=b;this.lineLike={start:a,end:b,type:c}}equals(a){return this===a||x(a)&&this.lineLike.type===a.lineLike.type&&k.exactEquals(this.start,a.start)&&k.exactEquals(this.end,a.end)}closestTo(a){a=e.projectPointToLineLike(a,this.lineLike);return g.fromVec3(a)}}class T extends P{constructor(a,b){super(a,b,aa.LineType.LINE)}}class da extends P{constructor(a,b){super(a,b,aa.LineType.RAY)}}class L extends t{constructor(a){super();this.constraints=
a}equals(a){return this===a||a instanceof L&&X.equals(this.constraints,a.constraints,(b,c)=>b.equals(c))}closestTo(a){let b=Infinity,c;for(const d of this.constraints){const f=d.closestTo(a),h=k.squaredDistance(a,f);h<b&&(b=h,c=f)}return c?g.clone(c):a}closestPoints(a){return this.constraints.flatMap(b=>b===this?[]:b.closestPoints(a))}}class fa extends t{constructor(a,b){super();this.center=a;this.radius=b}equals(a){return this===a||z(a)&&this.center[0]===a.center[0]&&this.center[1]===a.center[1]&&
this.radius===a.radius}closestTo(a){a=e.projectPointToVerticalCylinder(a,this.center,this.radius);return g.fromVec3(a)}}class O extends t{constructor(a,b){super();this.center=a;this.radius=b}equals(a){return this===a||C(a)&&k.exactEquals(this.center,a.center)&&this.radius===a.radius}closestTo(a){a=e.projectPointToVerticalCylinder(a,this.center,this.radius);a[2]=this.center[2];return g.fromVec3(a)}asCircle(){return new R(g.clone(this.center),this.radius,g.fromValues(0,0,1))}}class R extends t{constructor(a,
b,c,d){super();this.center=a;this.radius=b;this.normal=c;this.slicePlane=d}equals(a){return this===a||F(a)&&k.exactEquals(this.center,a.center)&&k.exactEquals(this.normal,a.normal)&&this.radius===a.radius}closestTo(a){const {center:b,radius:c}=this;l.projectPoint(this.getPlane(Ba),a,U);var d=k.sub(U,U,b),f=k.squaredLength(d);if(e.isClose(f,0))return g.clone(a);f=c/Math.sqrt(f);d=k.scaleAndAdd(m.create(),b,d,f);({slicePlane:f}=this);return f&&!e.isPointInsidePlane(f,d)?V(f,this)?.closestTo(a)??g.clone(a):
g.fromVec3(d)}getPlane(a=l.create()){return l.fromPositionAndNormal(this.center,this.normal,a)}}const U=m.create(),Ba=l.create();class ea extends t{constructor(a){super();this.z=a}equals(a){return this===a||B(a)&&this.z===a.z}closestTo(a){return g.fromVec3(m.fromValues(a[0],a[1],this.z))}getPlane(a=l.create()){k.set(ia,0,0,this.z);return l.fromPositionAndNormal(ia,m.UNIT_Z,a)}}const ia=m.create();class Q extends t{constructor(a,b,c){super();this.start=a;this.end=b;this.planeLike={start:g.asVec2(a),
end:g.asVec2(b),type:c}}equals(a){return this===a||y(a)&&this.planeLike.type===a.planeLike.type&&k.exactEquals(this.start,a.start)&&k.exactEquals(this.end,a.end)}closestTo(a){return g.fromVec3(e.projectPointToVerticalPlane(a,this.planeLike))}closestEndTo(a){const {start:b,end:c}=this.planeLike;return 0<Math.sign(H.dot(H.subtract(Ca,c,b),H.subtract(Da,g.asVec2(a),b)))?this.end:this.start}getPlane(a=l.create()){const b=k.copy(ja,this.end);b[2]+=1;return l.fromPoints(this.start,this.end,b,a)}getSlicePlane(a=
l.create()){const {start:b,end:c,type:d}=this.planeLike;if(d!==e.VerticalPlaneType.PLANE){var f=k.set(ja,b[0],b[1],0),h=k.set(ka,c[0],c[1],0);h=k.subtract(ka,h,f);l.fromPositionAndNormal(f,h,a);return a}}}const Ca=Y.create(),Da=Y.create(),ja=m.create(),ka=m.create();class Ea extends Q{constructor(a,b){super(a,b,e.VerticalPlaneType.HALF_PLANE)}}class Fa extends Q{constructor(a,b){super(a,b,e.VerticalPlaneType.PLANE)}}class ha extends t{constructor(a,b){super();this.sphere=K.fromCenterAndRadius(a,b)}equals(a){return this===
a||D(a)&&K.exactEquals(this.sphere,a.sphere)}closestTo(a){a=K.projectPoint(this.sphere,a,m.create());return g.fromVec3(a)}get center(){return K.getCenter(this.sphere)}get radius(){return this.sphere[3]}}class M extends t{constructor(a,b,c){super();this.start=a;this.end=b;this.getZ=c;this.planeLike={start:g.asVec2(a),end:g.asVec2(b),type:e.VerticalPlaneType.PLANE}}equals(a){return this===a||a instanceof M&&k.exactEquals(this.start,a.start)&&k.exactEquals(this.end,a.end)&&this.getZ===a.getZ}closestTo(a){a=
e.projectPointToVerticalPlane(a,this.planeLike);a[2]=this.getZ(a[0],a[1])??0;return g.fromVec3(a)}addIfOnTheGround(a,b){for(const c of b)b=this.getZ(c[0],c[1])??0,e.isClose(c[2],b)&&(c[2]=b,a.push(c))}}class la extends t{constructor(a,b,c,d,f){super();this._origin=a;this._spatialReference=b;this._distanceMeters=c;this._elevationMeters=d;this._directionDegrees=f}equals(a){return this===a||a instanceof la&&H.exactEquals(this._origin,a._origin)&&this._distanceMeters===a._distanceMeters&&this._elevationMeters===
a._elevationMeters&&this._directionDegrees===a._directionDegrees}closestTo([a,b,c]){H.set(G,a,b);if(null!=this._directionDegrees&&null!=this._distanceMeters)I.directGeodeticSolver(G,this._origin,this._directionDegrees,this._distanceMeters,this._spatialReference);else if(null!=this._directionDegrees){a=G;b=this._origin;var d=this._directionDegrees,f=this._spatialReference;let {azimuth:h,distance:p}=I.inverseGeodeticSolver(Ga,b,G,f);h??=0;let r=p*Math.cos((h-d)*qa.toRadians);r=Math.max(0,r);I.directGeodeticSolver(a,
b,d,r,f)}else null!=this._distanceMeters&&({azimuth:a}=I.inverseGeodeticSolver(Ha,this._origin,G,this._spatialReference),I.directGeodeticSolver(G,this._origin,a??0,this._distanceMeters,this._spatialReference));return g.create(G[0],G[1],this._elevationMeters??c)}}const G=[0,0],Ha=new I.InverseGeodeticSolverResult,Ga=new I.InverseGeodeticSolverResult,sa=(()=>{const a=l.create();return(b,c)=>{const {start:d,end:f}=b;if(e.vectorsHaveCloseZ(d,f)&&e.isClose(d[2],c.z))return b;b=m.create();if(l.intersectLine(c.getPlane(a),
d,f,b))return new J(g.fromVec3(b))}})(),V=(()=>{const a=pa.create(),b=m.create(),c=m.create();return(d,f,h)=>{const {normal:p,center:r,radius:E}=f;ra.tangentFrame(p,b,c);const W=l.getNormal(d);var w=E*k.dot(W,b),q=E*k.dot(W,c);Z.set(a,r[0],r[1],r[2],1);const Ia=Z.dot(d,a),ma=Math.hypot(w,q),na=e.isClose(ma,0);if(e.isClose(l.distance(d,r),0)){if(na)return f;if(e.isClose(E,0))return!h||e.isPointInsidePlane(h,r)?new J(g.clone(r)):void 0;k.cross(b,W,p);k.normalize(b,b);w=[];q=m.clone(r);k.scaleAndAdd(q,
q,b,E);h&&!e.isPointInsidePlane(h,q)||w.push(q);q=m.clone(r);k.scaleAndAdd(q,q,b,-E);h&&!e.isPointInsidePlane(h,q)||w.push(q);return v(w)}if(!(na||(d=-Ia/ma,1<Math.abs(d)||e.isClose(d,1))))return w=Math.atan(w/q),d=oa.asinClamped(d)-w,w=Math.PI-d,q=[],f=m.create(),k.scaleAndAdd(f,r,b,E*Math.cos(d)),k.scaleAndAdd(f,f,c,E*Math.sin(d)),q.push(f),d=m.create(),k.scaleAndAdd(d,r,b,E*Math.cos(w)),k.scaleAndAdd(d,d,c,E*Math.sin(w)),q.push(d),v(h?e.pointsInsidePlane(h,q):q)}})(),wa=(()=>{const a=l.create();
return(b,c)=>V(b.getPlane(a),c,c.slicePlane)})(),za=(()=>{const a=l.create();return(b,{center:c,radius:d})=>{d=e.intersectVerticalPlaneAndVerticalCylinder(b.planeLike,c,d);c=c[2];b.getSlicePlane(a);b=[];for(const [f,h]of d)d=[f,h,c],e.isPointInsidePlane(a,d)&&b.push(d);return v(b)}})(),ya=(()=>{const a=l.create(),b=l.create();return(c,d)=>V(c.getPlane(a),d,c.getSlicePlane(b))})(),Aa=(()=>{const a=l.create();return(b,{center:c,radius:d})=>{const f=b.getPlane(a),h=l.signedDistance(f,c);var p=Math.abs(h);
if(!(p>d)||e.isClose(p,d)){p=m.clone(l.getNormal(f));var r=k.scaleAndAdd(m.create(),c,p,h);d=Math.sqrt(d**2-h**2);return e.isClose(d,0)?new J(g.fromVec3(l.projectPoint(f,c,m.create()))):new R(g.fromVec3(r),d,p,b.getSlicePlane())}}})();n.CircleConstraint=R;n.Constraint=t;n.DrapedLineConstraint=M;n.GeodesicConstraint=la;n.HorizontalCircleConstraint=O;n.HorizontalPlaneConstraint=ea;n.LineConstraint=T;n.LineLikeConstraint=P;n.PointConstraint=J;n.RayConstraint=da;n.SetConstraint=L;n.SphereConstraint=ha;
n.VerticalCylinderConstraint=fa;n.VerticalHalfPlaneConstraint=Ea;n.VerticalPlaneConstraint=Fa;n.VerticalPlaneLikeConstraint=Q;n.constraintOrSet=N;n.isPoint=u;Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});