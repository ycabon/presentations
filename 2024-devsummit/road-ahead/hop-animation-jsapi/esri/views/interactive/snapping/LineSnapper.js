// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../core/Cyclical ../../../core/quantityUtils ../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../support/elevationInfoUtils ../sketch/normalizedPoint ./SnappingAlgorithm ./snappingUtils ./candidates/LineSnappingCandidate ../support/viewUtils ../../support/angularMeasurementUtils ../../support/geodesicLengthMeasurementUtils ../../support/geometry3dUtils ../../support/geometry2dUtils".split(" "),function(r,t,u,v,l,m,w,n,x,p,q,y,z,A){class B extends w.SnappingAlgorithm{snapNewVertex(e,
a){var c=a.editGeometryOperations.data.components[0],b=c.edges.length;const d=[];if(1>b)return d;var {spatialReference:f}=a;f=p.vectorToScreenPoint(e,f,l.absoluteHeightElevationInfo,this.view);const {view:h}=this;b=c=c.edges[b-1];do{if(this.edgeExceedsShortLineThreshold(b,a)){const g=n.editEdgeToSnappingEdge(b,h,a);this._processCandidateProposal(g.left,g.right,e,f,a,d)}b=b.leftVertex.leftEdge}while(b&&b!==c);return d}snapExistingVertex(e,a){const c=[],b=a.vertexHandle;var d=b.component;if(2>d.edges.length)return c;
const {view:f}=this;var {spatialReference:h}=a;h=p.vectorToScreenPoint(e,h,l.absoluteHeightElevationInfo,f);var g=b.leftEdge,k=b.rightEdge;g&&k&&this.edgeExceedsShortLineThreshold(g,a)&&this.edgeExceedsShortLineThreshold(k,a)&&this._processCandidateProposal(m.fromAnyMapPoint(g.leftVertex.pos,f,a),m.fromAnyMapPoint(k.rightVertex.pos,f,a),e,h,a,c);g=d=d.edges[0];do g!==b.leftEdge&&g!==b.rightEdge&&this.edgeExceedsShortLineThreshold(g,a)&&(k=n.editEdgeToSnappingEdge(g,f,a),this._processCandidateProposal(k.left,
k.right,e,h,a,c)),g=g.rightVertex.rightEdge;while(g&&g!==d);return c}_processCandidateProposal(e,a,c,b,d,f){const {spatialReference:h,pointer:g}=d,k=v.create();this._projectedLine(k,e,a,c,d);c=m.fromVec3(k);n.squaredScreenDistance(b,p.vectorToScreenPoint(c,h,l.absoluteHeightElevationInfo,this.view))<this.squaredProximityThreshold(g)&&f.push(new x.LineSnappingCandidate({lineStart:e,lineEnd:a,targetPoint:c,isDraped:"on-the-ground"===d.elevationInfo?.mode}))}_projectedLine(e,a,c,b,d){this._projectToLineGeodesic(e,
a,c,b,d)||this._projectToLinePlanar(e,b,a,c)}_projectToLineGeodesic(e,a,c,b,{spatialReference:d}){var f=q.radiansGeographicBetweenVec(a,c,d,d);if(null==f)return!1;const h=q.radiansGeographicBetweenVec(c,b,d,d);if(null==h)return!1;a=y.geodesicDistance(c,b,d);if(null==a)return!1;f=Math.abs(t.cyclicalPI.shortestSignedDiff(f,h))>Math.PI/2?t.cyclical2PI.normalize(f+Math.PI):f;q.pointFromDistanceAlongAzimuth(e,c,d,u.valueInUnit(a,"meters"),u.createAngle(f,"radians","geographic"),"geodesic");e[2]=b[2];return!0}_projectToLinePlanar(e,
a,c,b){z.projectPointToLineLike(a,{start:c,end:b,type:A.LineType.LINE},e);e[2]=a[2]}}r.LineSnapper=B;Object.defineProperty(r,Symbol.toStringTag,{value:"Module"})});