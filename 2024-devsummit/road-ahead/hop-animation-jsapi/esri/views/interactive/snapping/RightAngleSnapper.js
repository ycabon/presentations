// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../core/Cyclical ../../../core/quantityUtils ../../../core/libs/gl-matrix-2/math/vec2 ../../../core/libs/gl-matrix-2/factories/vec2f64 ../../../chunks/vec32 ../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../support/elevationInfoUtils ../sketch/constraints ../sketch/normalizedPoint ./SnappingAlgorithm ./snappingUtils ./candidates/RightAngleSnappingCandidate ../support/viewUtils ../../support/angularMeasurementUtils ../../support/geodesicLengthMeasurementUtils".split(" "),
function(u,z,v,k,A,m,n,p,B,g,C,D,w,q,r,E){class F extends C.SnappingAlgorithm{snapNewVertex(f,c){var a=c.editGeometryOperations.data.components[0];const b=[];if(2>a.vertices.length)return b;var {view:d}=this;d=q.vectorToScreenPoint(f,c.spatialReference,p.absoluteHeightElevationInfo,d);const e=a.vertices.at(-1);this._checkForSnappingCandidate(b,e.leftEdge,e,e.leftEdge.leftVertex,f,d,c);a=a.vertices[0];this._checkForSnappingCandidate(b,a.rightEdge,a,a.rightEdge.rightVertex,f,d,c);return b}snapExistingVertex(f,
c){const a=[];var b=c.vertexHandle;if(3>b.component.vertices.length)return a;var {view:d}=this;d=q.vectorToScreenPoint(f,c.spatialReference,p.absoluteHeightElevationInfo,d);var e=b.leftEdge;b=b.rightEdge;e?.leftVertex.leftEdge&&(e=e.leftVertex.leftEdge,this._checkForSnappingCandidate(a,e,e.rightVertex,e.leftVertex,f,d,c));b?.rightVertex.rightEdge&&(b=b.rightVertex.rightEdge,this._checkForSnappingCandidate(a,b,b.leftVertex,b.rightVertex,f,d,c));return a}_checkForSnappingCandidate(f,c,a,b,d,e,h){this.edgeExceedsShortLineThreshold(c,
h)&&(c=this.view,a=g.fromAnyMapPoint(a.pos,c,h),b=g.fromAnyMapPoint(b.pos,c,h),this._checkForSnappingCandidateNormalized(f,b,a,d,e,h))}_checkForSnappingCandidateNormalized(f,c,a,b,d,e){this._projectionRay(x,c,a,b,e);this._checkForSnappingCandidateAlongProjectedRay(f,c,a,x,b,d,e)}_projectionRay(f,c,a,b,d){this._projectionRayGeodesic(f,c,a,b,d)||this._projectionRayPlanar(f,c,a)}_projectionRayGeodesic(f,c,a,b,{spatialReference:d}){c=r.radiansGeographicBetweenVec(c,a,d,d);if(null==c)return!1;var e=r.radiansGeographicBetweenVec(a,
b,d,d);if(null==e)return!1;e=Math.sign(z.cyclical2PI.shortestSignedDiff(c,e))*Math.PI*.5;c=v.createAngle(c+e,"radians","geographic");e=n.create();b=E.geodesicDistance(a,b,d);if(null==b)return!1;r.pointFromDistanceAlongAzimuth(e,a,d,v.valueInUnit(b,"meters"),c,"geodesic");m.subtract(f,e,a);return!0}_projectionRayPlanar(f,c,a){c=k.subtract(t,g.asVec2(a),g.asVec2(c));m.set(f,c[1],-c[0],0)}_checkForSnappingCandidateAlongProjectedRay(f,c,a,b,d,e,h){const {spatialReference:G,pointer:H}=h;var l=k.subtract(t,
g.asVec2(d),g.asVec2(a));l=k.dot(b,l)/k.squaredLength(b);const y=k.scaleAndAdd(t,g.asVec2(a),b,l);d=g.fromValues(y[0],y[1],d[2]);D.squaredScreenDistance(e,q.vectorToScreenPoint(d,G,p.absoluteHeightElevationInfo,this.view))>this.squaredProximityThreshold(H)||this.isVertical(d,a,h)||this.isVertical(a,c,h)||(b=m.scaleAndAdd(n.create(),a,b,Math.sign(l)),f.push(new w.RightAngleSnappingCandidate({targetPoint:d,constraint:new B.VerticalHalfPlaneConstraint(a,g.fromVec3(b)),previousVertex:c,otherVertex:a,
otherVertexType:w.OtherVertexType.CENTER,isDraped:"on-the-ground"===h.elevationInfo?.mode})))}}const t=A.create(),x=n.create();u.RightAngleSnapper=F;Object.defineProperty(u,Symbol.toStringTag,{value:"Module"})});