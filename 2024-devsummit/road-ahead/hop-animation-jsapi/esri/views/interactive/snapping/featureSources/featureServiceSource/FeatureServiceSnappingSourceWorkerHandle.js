// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/tslib.es6 ../../../../../core/Accessor ../../../../../core/arrayUtils ../../../../../core/maybe ../../../../../core/promiseUtils ../../../../../core/accessorSupport/decorators/property ../../../../../core/has ../../../../../core/Logger ../../../../../core/accessorSupport/decorators/subclass ../../../../../core/support/UpdatingHandles ../../../../../core/workers/WorkerHandle ../../../../../geometry/support/typeUtils ../../../../../layers/graphics/dehydratedPoint".split(" "),
function(d,f,m,k,n,l,g,w,x,p,q,r,t,u){d.FeatureServiceSnappingSourceWorkerHandle=class extends m{get updating(){return this._updatingHandles.updating||this._workerHandleUpdating}constructor(a){super(a);this._updatingHandles=new q.UpdatingHandles;this.schedule=this._suspendController=null;this.hasZ=!1;this.elevationAlignPointsInFeatures=async b=>{const c=[];for(const {points:e}of b.pointsInFeatures)for(const {z:h}of e)c.push(h);return{elevations:c,drapedObjectIds:new Set,failedObjectIds:new Set}};
this.queryForSymbologySnapping=async()=>({candidates:[],sourceCandidateIndices:[]});this.availability=0;this._workerHandleUpdating=!0;this._editId=0;this.updateOutFields=l.debounce(async(b,c)=>{await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("updateOutFields",[...b],c));this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},c))})}destroy(){this._suspendController=n.abortMaybe(this._suspendController);this._workerHandle.destroy();this._updatingHandles.destroy()}initialize(){this._workerHandle=
new v(this.schedule,{alignElevation:async(a,{signal:b})=>({result:await this.elevationAlignPointsInFeatures(a.query,b)}),getSymbologyCandidates:async(a,{signal:b})=>({result:await this.queryForSymbologySnapping(a,b)})});this.addHandles([this._workerHandle.on("notify-updating",({updating:a})=>this._workerHandleUpdating=a),this._workerHandle.on("notify-availability",({availability:a})=>this._set("availability",a))])}async setup(a,b){const c=this._serviceInfoFromLayer(a.layer);null!=c&&(a={configuration:this._convertConfiguration(a.configuration),
serviceInfo:c,spatialReference:a.spatialReference.toJSON(),hasZ:this.hasZ,elevationInfo:a.layer.elevationInfo?.toJSON()},await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("setup",a,b)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},b)))}async configure(a,b){a=this._convertConfiguration(a);await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("configure",a,b));this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",
{},b))}async refresh(a){await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("refresh",{},a));this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},a))}async fetchCandidates(a,b){const {point:c,filter:e,coordinateHelper:h}=a;a={...a,point:u.makeDehydratedPoint(c[0],c[1],c[2],h.spatialReference.toJSON()),filter:e?.toJSON()};return this._workerHandle.invoke(a,b)}async updateTiles(a,b){a={tiles:a.tiles,tileInfo:null!=a.tileInfo?a.tileInfo.toJSON():null,
tileSize:a.tileSize};await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("updateTiles",a,b));this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},b))}async applyEdits(a,b){var c=this._editId++;await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("beginApplyEdits",{id:c},b));a=await this._updatingHandles.addPromise(l.whenOrAbort(a.result,b));c={id:c,edits:{addedFeatures:a.addedFeatures?.map(({objectId:e})=>e).filter(k.isSome)??[],
deletedFeatures:a.deletedFeatures?.map(({objectId:e,globalId:h})=>({objectId:e,globalId:h}))??[],updatedFeatures:a.updatedFeatures?.map(({objectId:e})=>e).filter(k.isSome)??[]}};await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("endApplyEdits",c,b));this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},b))}getDebugInfo(a){return this._workerHandle.invokeMethod("getDebugInfo",{},a)}async notifyElevationSourceChange(){await this._workerHandle.invokeMethod("notifyElevationSourceChange",
{})}async notifySymbologyChange(){await this._workerHandle.invokeMethod("notifySymbologyChange",{})}async setSymbologySnappingSupported(a){await this._workerHandle.invokeMethod("setSymbologySnappingSupported",a)}async setSuspended(a){this._suspendController?.abort();this._suspendController=new AbortController;await this._workerHandle.invokeMethod("setSuspended",a,this._suspendController.signal)}_convertConfiguration(a){return{filter:null!=a.filter?a.filter.toJSON():null,customParameters:a.customParameters,
viewType:a.viewType}}_serviceInfoFromLayer(a){return"multipatch"===a.geometryType||"mesh"===a.geometryType?null:{url:a.parsedUrl?.path??"",fieldsIndex:a.fieldsIndex.toJSON(),geometryType:t.featureGeometryTypeKebabDictionary.toJSON(a.geometryType),capabilities:a.capabilities,objectIdField:a.objectIdField,globalIdField:a.globalIdField,spatialReference:a.spatialReference.toJSON(),timeInfo:a.timeInfo?.toJSON()}}};f.__decorate([g.property({constructOnly:!0})],d.FeatureServiceSnappingSourceWorkerHandle.prototype,
"schedule",void 0);f.__decorate([g.property({constructOnly:!0})],d.FeatureServiceSnappingSourceWorkerHandle.prototype,"hasZ",void 0);f.__decorate([g.property({constructOnly:!0})],d.FeatureServiceSnappingSourceWorkerHandle.prototype,"elevationAlignPointsInFeatures",void 0);f.__decorate([g.property({constructOnly:!0})],d.FeatureServiceSnappingSourceWorkerHandle.prototype,"queryForSymbologySnapping",void 0);f.__decorate([g.property({readOnly:!0})],d.FeatureServiceSnappingSourceWorkerHandle.prototype,
"updating",null);f.__decorate([g.property({readOnly:!0})],d.FeatureServiceSnappingSourceWorkerHandle.prototype,"availability",void 0);f.__decorate([g.property()],d.FeatureServiceSnappingSourceWorkerHandle.prototype,"_workerHandleUpdating",void 0);d.FeatureServiceSnappingSourceWorkerHandle=f.__decorate([p.subclass("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceSnappingSourceWorkerHandle")],d.FeatureServiceSnappingSourceWorkerHandle);class v extends r.WorkerHandle{constructor(a,
b){super("FeatureServiceSnappingSourceWorker","fetchCandidates",{},a,{strategy:"dedicated",client:b})}}Object.defineProperty(d,Symbol.toStringTag,{value:"Module"})});