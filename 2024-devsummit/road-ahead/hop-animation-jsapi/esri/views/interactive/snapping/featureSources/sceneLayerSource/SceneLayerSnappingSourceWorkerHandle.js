// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/tslib.es6 ../../../../../core/Accessor ../../../../../core/accessorSupport/decorators/property ../../../../../core/has ../../../../../core/Logger ../../../../../core/RandomLCG ../../../../../core/accessorSupport/decorators/subclass ../../../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../../../core/workers/WorkerHandle ../../../../../chunks/sphere ../../../sketch/normalizedPoint ../../candidates/EdgeSnappingCandidate ../../candidates/VertexSnappingCandidate".split(" "),
function(d,h,p,l,z,A,B,q,m,r,t,u,v,w){d.SceneLayerSnappingSourceWorkerHandle=class extends p{constructor(a){super(a);this.availability=0;this._ids=new Set}destroy(){this._workerHandle.destroy();this._workerHandle=null}initialize(){this._workerHandle=new x(this.schedule,{fetchAllEdgeLocations:(a,b)=>this._fetchAllEdgeLocations(a,b)})}async fetchCandidates(a,b){const e=a.coordinateHelper;var {point:f}=a;const c=y;this.renderCoordsHelper.toRenderCoords(f,e.spatialReference,c);f=a.distance;a=await this._workerHandle.invoke({bounds:t.fromValues(c[0],
c[1],c[2],"number"===typeof f?f:f.distance),returnEdge:a.returnEdge,returnVertex:"none"!==a.vertexMode},b);a.candidates.sort((k,g)=>k.distance-g.distance);return a.candidates.map(k=>this._convertCandidate(e,k))}async add(a,b){this._ids.add(a.id);await this._workerHandle.invokeMethod("add",a,b)}async remove(a,b){this._ids.delete(a.id);await this._workerHandle.invokeMethod("remove",a,b)}_convertCandidate(a,b){switch(b.type){case "edge":return new v.EdgeSnappingCandidate({objectId:b.objectId,targetPoint:this._convertRenderCoordinate(a,
b.target),edgeStart:this._convertRenderCoordinate(a,b.start),edgeEnd:this._convertRenderCoordinate(a,b.end),isDraped:!1});case "vertex":return new w.VertexSnappingCandidate({objectId:b.objectId,targetPoint:this._convertRenderCoordinate(a,b.target),isDraped:!1})}}_convertRenderCoordinate({spatialReference:a},b){const e=m.create();this.renderCoordsHelper.fromRenderCoords(b,e,a);return u.fromVec3(e)}async _fetchAllEdgeLocations(a,b){const e=[],f=[];for(const {id:c,uid:k}of a.components)this._ids.has(c)&&
e.push((async()=>{const g=await this.fetchEdgeLocations(c,b.signal),n=g.locations.buffer;f.push(n);return{id:c,uid:k,objectIds:g.objectIds,locations:n,origin:g.origin,type:g.type}})());return{result:{components:(await Promise.all(e)).filter(({id:c})=>this._ids.has(c))},transferList:f}}};h.__decorate([l.property({constructOnly:!0})],d.SceneLayerSnappingSourceWorkerHandle.prototype,"renderCoordsHelper",void 0);h.__decorate([l.property({constructOnly:!0})],d.SceneLayerSnappingSourceWorkerHandle.prototype,
"fetchEdgeLocations",void 0);h.__decorate([l.property({constructOnly:!0})],d.SceneLayerSnappingSourceWorkerHandle.prototype,"schedule",void 0);h.__decorate([l.property({readOnly:!0})],d.SceneLayerSnappingSourceWorkerHandle.prototype,"availability",void 0);d.SceneLayerSnappingSourceWorkerHandle=h.__decorate([q.subclass("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],d.SceneLayerSnappingSourceWorkerHandle);class x extends r.WorkerHandle{constructor(a,
b){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},a,{strategy:"dedicated",client:b})}}const y=m.create();Object.defineProperty(d,Symbol.toStringTag,{value:"Module"})});