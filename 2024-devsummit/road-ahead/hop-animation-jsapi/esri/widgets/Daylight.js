// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("require ../chunks/tslib.es6 ../core/Logger ../core/reactiveUtils ../core/accessorSupport/decorators/property ../core/has ../core/RandomLCG ../core/accessorSupport/decorators/subclass ./Widget ./Daylight/css ./Daylight/DaylightViewModel ./Daylight/VisibleElements ./Daylight/support/daylightUtils ./Daylight/support/SliderWithDropdown ../chunks/componentsUtils ./support/DatePicker ./support/globalCss ./support/Heading ./support/widgetUtils ./support/decorators/messageBundle ./support/jsxFactory".split(" "),
function(n,e,x,l,g,d,F,y,z,f,r,t,A,B,C,D,m,E,G,u,h){const v=/(.*)\s(.*)/;d=class extends z{constructor(a,b){super(a,b);this.headingLevel=3;this.iconClass=f.css.widgetIcon;this.icon=null;this.viewModel=new r;this.visibleElements=new t;this.dateOrSeason="date";this._timeSlider=new B({viewModel:this.viewModel.timeSliderViewModel,steps:this.timeSliderSteps,labelInputsEnabled:!1,visibleElements:{labels:!0},tickConfigs:[{mode:"position",values:[0,360,720,1080,1439],labelsVisible:!0,tickCreatedFunction:this._onPrimaryTickCreated.bind(this)},
{mode:"position",values:[120,240,480,600,840,960,1200,1320],tickCreatedFunction:this._onSecondaryTickCreated.bind(this)}]});this._datePicker=new D({viewModel:this.viewModel.datePickerViewModel,commitOnMonthChange:!0});this._onPlayDayClick=()=>{this.viewModel.toggleDayPlaying()};this._onYearPlayClick=()=>{this.viewModel.toggleYearPlaying()};this._onSeasonChange=c=>{this.viewModel.currentSeason=c.target.value};this._onSunLightingCheckboxChange=()=>{this.viewModel.toggleSunLightingEnabled()};this._onShadowCheckboxChange=
()=>{this.viewModel.toggleDirectShadowsEnabled()}}get label(){return this.messages?.title??""}set label(a){this._overrideIfSome("label",a)}get playSpeedMultiplier(){return this.viewModel.playSpeedMultiplier}set playSpeedMultiplier(a){this.viewModel.playSpeedMultiplier=a}get timeSliderSteps(){return this._timeSlider?.steps??5}set timeSliderSteps(a){this._timeSlider.steps=a}get view(){return this.viewModel.view}set view(a){this.viewModel.view=a}get test(){return{datePicker:this._datePicker}}get _useAmPm(){const a=
this._timeSlider.viewModel.getLabelForValue(0,"tick");return null!=a&&v.test(a)}postInitialize(){this.viewModel.isSupported&&this.addHandles([l.watch(()=>this.viewModel.datePickerViewModel,a=>this._datePicker.viewModel=a,l.syncAndInitial),l.watch(()=>this.viewModel.timeSliderViewModel,a=>this._timeSlider.viewModel=a,l.syncAndInitial),l.watch(()=>this.visibleElements?.timezone,a=>this._timeSlider.showDropDown=a,l.syncAndInitial),l.watch(()=>!this.viewModel.sunLightingEnabled,a=>{this._datePicker.disabled=
a;this._timeSlider.disabled=a},l.syncAndInitial),l.when(()=>!this.visible,()=>this._datePicker?.close(!1),l.sync)])}destroy(){this._datePicker.destroy();this._timeSlider.destroy()}render(){const {messages:a,viewModel:b,visibleElements:c}=this,k=b.isSupported;return h.tsx("div",{class:this.classes(f.css.base,m.globalCss.widget)},k?h.tsx(h.tsxFragment,null,c.header?h.tsx(E.Heading,{level:this.headingLevel},a.title):null,this._renderTimeOptions(),c.datePicker?this._renderDateOrSeason():null,c.sunLightingToggle?
this._renderSunLightingToggle():null,c.shadowsToggle?this._renderShadowsToggle():null):h.tsx("div",{class:f.css.panelError,key:"unsupported"},h.tsx("p",null,a.unsupported)))}loadDependencies(){return C.loadCalciteComponents({button:()=>new Promise((a,b)=>n(["../chunks/calcite-button"],a,b)),checkbox:()=>new Promise((a,b)=>n(["../chunks/calcite-checkbox"],a,b)),label:()=>new Promise((a,b)=>n(["../chunks/calcite-label"],a,b)),option:()=>new Promise((a,b)=>n(["../chunks/calcite-option"],a,b)),select:()=>
new Promise((a,b)=>n(["../chunks/calcite-select"],a,b))})}_renderTimeOptions(){const {viewModel:a,visibleElements:b,messages:c}=this,{directShadowsEnabled:k,dayPlaying:p}=a,w=!a.sunLightingEnabled;return h.tsx("div",{class:this.classes(f.css.dayContainer,{[f.css.sliderShadowOn]:k,[f.css.sliderShadowOff]:!k,[f.css.sliderDateOn]:b.datePicker,[f.css.sliderDateOff]:!b.datePicker,[f.css.sliderAmPmOn]:this._useAmPm,[f.css.containerDisabled]:w}),key:"daylight-time-options"},this._timeSlider.render(),b.playButtons?
this._renderPlayPauseButton({playing:p,disabled:w,label:c.playDay,onClick:this._onPlayDayClick}):null)}_renderDateOptions(){const {viewModel:a,visibleElements:b,messages:c}=this,{yearPlaying:k}=a,p=!a.sunLightingEnabled;return h.tsx("div",{class:this.classes(f.css.dateContainer,p&&f.css.containerDisabled),key:"daylight-date"},this._datePicker.render(),b.playButtons?this._renderPlayPauseButton({playing:k,disabled:p,label:c.playYear,onClick:this._onYearPlayClick}):null)}_renderPlayPauseButton({playing:a,
disabled:b,label:c,onClick:k}){return h.tsx("calcite-button",{appearance:"solid",class:f.css.playPauseButton,disabled:b,iconStart:a?"pause-f":"play-f",label:c,onclick:k,round:!0,title:c,type:"button"})}_renderSeasonSelect(){const {messages:a,viewModel:b}=this,c=!b.sunLightingEnabled;return h.tsx("calcite-select",{class:this.classes(f.css.seasonPicker),disabled:c,label:a.season,onCalciteSelectChange:this._onSeasonChange},A.orderedSeasons.map(k=>h.tsx("calcite-option",{selected:b.currentSeason===k,
value:k},a[k])))}_renderDateOrSeason(){return"date"===this.dateOrSeason?this._renderDateOptions():this._renderSeasonSelect()}_renderSunLightingToggle(){const a=this.messages?.sunLightingToggle;return h.tsx("calcite-label",{key:"date-time-toggle",layout:"inline",scale:"s",title:a?.tooltip},h.tsx("calcite-checkbox",{checked:this.viewModel.sunLightingEnabled,class:f.css.sunLightingCheckbox,onCalciteCheckboxChange:this._onSunLightingCheckboxChange}),a?.label)}_renderShadowsToggle(){const a=this.messages.shadowsToggle;
return h.tsx("calcite-label",{key:"shadow-toggle",layout:"inline",scale:"s",title:a?.tooltip},h.tsx("calcite-checkbox",{checked:this.viewModel.directShadowsEnabled,class:f.css.shadowsCheckbox,onCalciteCheckboxChange:this._onShadowCheckboxChange}),a.label)}_onPrimaryTickCreated(a,b,c){b.classList.add(...q,m.globalCss.primaryTick);c.classList.add(...q,m.globalCss.primaryTickLabel);c.onclick=b.onclick=this._makeGoToTime(a);a=c.textContent;if(a=null!=a&&v.exec(a))c.innerHTML=`${a[1]}<br><div class=${m.globalCss.primaryTickAmPm}>${a[2]}</div>`}_onSecondaryTickCreated(a,
b){b.classList.add(...q,m.globalCss.secondaryTick);b.onclick=this._makeGoToTime(a)}_makeGoToTime(a){return()=>{this.viewModel.timeSliderPosition=a}}};e.__decorate([g.property(),u.messageBundle("esri/widgets/Daylight/t9n/Daylight")],d.prototype,"messages",void 0);e.__decorate([g.property(),u.messageBundle("esri/widgets/support/t9n/timezone")],d.prototype,"timezoneMessages",void 0);e.__decorate([g.property()],d.prototype,"headingLevel",void 0);e.__decorate([g.property()],d.prototype,"iconClass",void 0);
e.__decorate([g.property()],d.prototype,"icon",void 0);e.__decorate([g.property()],d.prototype,"label",null);e.__decorate([g.property()],d.prototype,"playSpeedMultiplier",null);e.__decorate([g.property()],d.prototype,"timeSliderSteps",null);e.__decorate([g.property()],d.prototype,"view",null);e.__decorate([g.property({type:r})],d.prototype,"viewModel",void 0);e.__decorate([g.property({type:t,nonNullable:!0})],d.prototype,"visibleElements",void 0);e.__decorate([g.property({cast:a=>{if("season"===a||
"date"===a)return a;x.getLogger("esri.widgets.Daylight").warn(`"${a}" is not a valid option. Acceptable values are only "date" or "season". Defaulting to "${"date"}".`);return"date"}})],d.prototype,"dateOrSeason",void 0);e.__decorate([g.property()],d.prototype,"_timeSlider",void 0);e.__decorate([g.property()],d.prototype,"_useAmPm",null);e.__decorate([g.property()],d.prototype,"_datePicker",void 0);d=e.__decorate([y.subclass("esri.widgets.Daylight")],d);const q=[m.globalCss.interactive,m.globalCss.anchor];
return d});