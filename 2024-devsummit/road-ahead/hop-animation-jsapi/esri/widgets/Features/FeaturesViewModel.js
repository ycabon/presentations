// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.29/esri/copyright.txt for details.
//>>built
define("../../chunks/tslib.es6 ../../geometry ../../Graphic ../../symbols ../../core/arrayUtils ../../core/Error ../../core/Logger ../../core/ReactiveSet ../../core/reactiveUtils ../../core/accessorSupport/decorators/property ../../core/has ../../core/accessorSupport/decorators/subclass ../../geometry/projection ../../geometry/support/geometryUtils ../../geometry/support/webMercatorUtils ../../layers/Layer ../../layers/LayerConstants ../../symbols/support/symbolUtils ../../views/support/layerViewUtils ../Feature/FeatureViewModel ../Popup/actions ../Popup/actionUtils ../support/AnchorElementViewModel ../support/GoTo ../../symbols/SimpleFillSymbol ../../geometry/Point".split(" "),
function(e,d,y,N,z,u,v,A,m,f,O,B,C,D,E,w,F,G,x,H,p,n,I,J,K,L){d=class extends J.GoToMixin(I){constructor(a){super(a);this._pendingPromises=new A;this._selectedClusterFeature=this._highlightActiveFeaturePromise=this._highlightSelectedFeaturePromise=this._fetchFeaturesController=null;this.actions=new p.ActionsCollection;this.activeFeature=null;this.autoCloseEnabled=!1;this.autoOpenEnabled=!0;this.browseClusterEnabled=!1;this.content=null;this.defaultPopupTemplateEnabled=!1;this.featurePage=null;this.featuresPerPage=
20;this.featureMenuOpen=!1;this.featureViewModelAbilities=null;this.featureViewModels=[];this.includeDefaultActions=this.highlightEnabled=!0;this.selectedClusterBoundaryFeature=new y({symbol:new K({outline:{width:1.5,color:"cyan"},style:"none"})});this.title=null;this.updateLocationEnabled=!1;this.view=null;this.visible=!1;this.zoomFactor=4;this.zoomToLocation=null}initialize(){this.addHandles([this.on("view-change",()=>this._autoClose()),m.watch(()=>[this.highlightEnabled,this.selectedFeature,this.visible,
this.view],()=>this._highlightSelectedFeature()),m.watch(()=>[this.highlightEnabled,this.activeFeature,this.visible,this.view],()=>this._highlightActiveFeature()),m.watch(()=>this.view?.animation?.state,a=>this._animationStateChange(a)),m.watch(()=>this.location,a=>this._locationChange(a)),m.watch(()=>this.selectedFeature,a=>this._selectedFeatureChange(a)),m.watch(()=>[this.selectedFeatureIndex,this.featureCount,this.featuresPerPage],()=>this._selectedFeatureIndexChange()),m.watch(()=>[this.featurePage,
this.selectedFeatureIndex,this.featureCount,this.featuresPerPage,this.featureViewModels],()=>this._setGraphicOnFeatureViewModels()),m.watch(()=>this.featureViewModels,()=>this._featureViewModelsChange()),this.on("trigger-action",a=>n.triggerAction({event:a,viewModel:this,view:this.view})),m.when(()=>!this.waitingForResult,()=>this._waitingForResultChange(),m.sync),m.watch(()=>[this.features,this.view?.map,this.view?.spatialReference,this.view?.timeZone],()=>this._updateFeatureVMs()),m.watch(()=>this.view?.scale,
()=>this._viewScaleChange()),m.when(()=>!this.visible,()=>this.browseClusterEnabled=!1),m.watch(()=>this.browseClusterEnabled,a=>a?this.enableClusterBrowsing():this.disableClusterBrowsing())])}destroy(){this._cancelFetchingFeatures();this._pendingPromises.clear();this.browseClusterEnabled=!1;this.view=null}get active(){return!(!this.visible||this.waitingForResult)}get allActions(){const a=this._get("allActions")||new p.ActionsCollection;a.removeAll();const {actions:b,defaultActions:c,defaultPopupTemplateEnabled:g,
includeDefaultActions:h,selectedFeature:l}=this,k=h?c.concat(b):b,q=l&&("function"===typeof l.getEffectivePopupTemplate&&l.getEffectivePopupTemplate(g)||l.popupTemplate),r=q?.actions;(q?.overwriteActions?r:r?.concat(k)??k)?.filter(Boolean).forEach(t=>a.add(t));return a}get defaultActions(){const a=this._get("defaultActions")||new p.ActionsCollection;a.removeAll();a.addMany(n.isClusterFeature(this.selectedFeature)?[p.zoomToClusteredFeatures.clone(),p.browseClusteredFeatures.clone()]:[p.zoomToFeature.clone()]);
return a}get featureCount(){return this.features.length}set features(a){a=a||[];this._set("features",a);const {pendingPromisesCount:b,promiseCount:c,selectedFeatureIndex:g}=this,h=c&&a.length;h&&b&&-1===g?this.selectedFeatureIndex=0:h&&-1!==g||(this.selectedFeatureIndex=a.length?0:-1)}set location(a){let b=a;const c=this.view?.spatialReference?.isWebMercator;a?.spatialReference?.isWGS84&&c&&(b=E.geographicToWebMercator(a));this._set("location",b)}get pendingPromisesCount(){return this._pendingPromises.size}get promiseCount(){return this.promises.length}get promises(){return this._get("promises")||
[]}set promises(a){this._pendingPromises.clear();this.features=[];Array.isArray(a)&&a.length?(this._set("promises",a),a=a.slice(0),a.forEach(b=>this._pendingPromises.add(b)),a.reduce((b,c)=>b.finally(()=>c.then(g=>{this._pendingPromises.has(c)&&this._updateFeatures(g)}).finally(()=>this._pendingPromises.delete(c)).catch(()=>{})),Promise.resolve())):this._set("promises",[])}get selectedFeature(){const {features:a,selectedFeatureIndex:b}=this;return-1===b?null:a[b]||null}get selectedFeatureIndex(){const a=
this._get("selectedFeatureIndex");return"number"===typeof a?a:-1}set selectedFeatureIndex(a){const {featureCount:b}=this;a=isNaN(a)||-1>a||!b?-1:(a+b)%b;this.activeFeature=null;this._set("selectedFeatureIndex",a)}get selectedFeatureViewModel(){return this.featureViewModels[this.selectedFeatureIndex]||null}get state(){return this.view?.ready?"ready":"disabled"}get waitingForContents(){return this.featureViewModels.some(a=>a.waitingForContent)}get waitingForResult(){return!(!(this._fetchFeaturesController||
0<this.pendingPromisesCount)||0!==this.featureCount)}centerAtLocation(){const {view:a}=this,b=n.getSelectedTarget(this);return b&&a?this.callGoTo({target:{target:b,scale:a.scale}}):Promise.reject(new u("center-at-location:invalid-target-or-view","Cannot center at a location without a target and view.",{target:b,view:a}))}zoomTo(a){return this.callGoTo(a)}clear(){this.set({promises:[],features:[],content:null,title:null,location:null,activeFeature:null})}fetchFeatures(a,b){const {view:c}=this;if(!c||
!a)throw new u("fetch-features:invalid-screenpoint-or-view","Cannot fetch features without a screenPoint and view.",{screenPoint:a,view:c});return c.fetchPopupFeatures(a,{pointerType:b?.event?.pointerType,defaultPopupTemplateEnabled:this.defaultPopupTemplateEnabled,signal:b?.signal})}open(a){a={updateLocationEnabled:!1,promises:[],fetchFeatures:!1,...a,visible:!0};var {fetchFeatures:b}=a;delete a.fetchFeatures;b&&this._setFetchFeaturesPromises(a.location);b=["actionsMenuOpen","collapsed"];for(const c of b)delete a[c];
this.set(a)}triggerAction(a){(a=this.allActions.at(a))&&!a.disabled&&this.emit("trigger-action",{action:a})}next(){this.selectedFeatureIndex++;return this}previous(){this.selectedFeatureIndex--;return this}disableClusterBrowsing(){n.removeClusteredFeaturesForBrowsing(this);this._clearBrowsedClusterGraphics()}async enableClusterBrowsing(){const {view:a,selectedFeature:b}=this;"2d"!==a?.type?v.getLogger(this).warn("enableClusterBrowsing:invalid-view: View must be 2d MapView.",b):n.isClusterFeature(b)?
(await n.displayClusterExtent(this),await n.browseAggregateFeatures(this)):v.getLogger(this).warn("enableClusterBrowsing:invalid-selectedFeature: Selected feature must represent an aggregate/cluster graphic.",b)}handleViewClick(a){this.autoOpenEnabled&&this._fetchFeaturesAndOpen(a)}_animationStateChange(a){this.zoomToLocation||(p.zoomToFeature.disabled="waiting-for-target"===a)}_clearBrowsedClusterGraphics(){const a=[this.selectedClusterBoundaryFeature,this._selectedClusterFeature].filter(z.isSome);
this.view?.graphics?.removeMany(a);this._selectedClusterFeature=null;this.selectedClusterBoundaryFeature.geometry=null}_viewScaleChange(){n.isClusterFeature(this.selectedFeature)?(this.visible=this.browseClusterEnabled=!1,this.clear()):this.browseClusterEnabled&&(this.features=this.selectedFeature?[this.selectedFeature]:[])}_locationChange(a){const {selectedFeature:b,updateLocationEnabled:c}=this;c&&a&&(!b||b.geometry)&&this.centerAtLocation()}_selectedFeatureIndexChange(){this.featurePage=1<this.featureCount?
Math.floor(this.selectedFeatureIndex/this.featuresPerPage)+1:null}_featureViewModelsChange(){this.featurePage=1<this.featureCount?1:null}_setGraphicOnFeatureViewModels(){const {features:a,featureCount:b,featurePage:c,featuresPerPage:g,featureViewModels:h}=this;if(null!==c){var l=((c-1)*g+b)%b;h.slice(l,l+g).forEach((k,q)=>{k&&(k.graphic??(k.graphic=a[l+q]))})}}async _selectedFeatureChange(a){const {location:b,updateLocationEnabled:c,view:g}=this;a&&g&&(this.browseClusterEnabled?(this._selectedClusterFeature&&
(g.graphics.remove(this._selectedClusterFeature),this._selectedClusterFeature=null),n.isClusterFeature(a)||(a.symbol=await G.getDisplayedSymbol(a),this._selectedClusterFeature=a,g.graphics.add(this._selectedClusterFeature))):!c&&b||!a.geometry?c&&!a.geometry&&(await this.centerAtLocation(),a=g.center?.clone())&&(this.location=a):this.location=D.getPointFromGeometry(a.geometry))}_waitingForResultChange(){!this.featureCount&&this.promises&&(this.visible=!1)}async _setFetchFeaturesPromises(a){({pendingFeatures:a}=
await this._fetchFeaturesWithController({mapPoint:a}));this.promises=a}_destroyFeatureVMs(){this.featureViewModels.forEach(a=>a&&!a.destroyed&&a.destroy());this._set("featureViewModels",[])}_updateFeatureVMs(){const {selectedFeature:a,features:b,featureViewModels:c,view:g}=this;n.isClusterFeature(a)||(this.browseClusterEnabled=!1);this._destroyFeatureVMs();if(b?.length){var h=c.slice(0),l=[];b.forEach((k,q)=>{if(k){var r=null;h.some((t,M)=>{t&&t.graphic===k&&(r=t,h.splice(M,1));return!!r});if(r)l[q]=
r;else{const t=new H({abilities:this.featureViewModelAbilities,defaultPopupTemplateEnabled:this.defaultPopupTemplateEnabled,spatialReference:g?.spatialReference,graphic:k===a?k:null,location:this.location,map:g?.map,view:g});l[q]=t}}});h.forEach(k=>k&&!k.destroyed&&k.destroy());this._set("featureViewModels",l)}}async _getScreenPoint(a,b){const {view:c}=this;await c?.when();const g=a?.spatialReference,h=c?.spatialReference;if(!g||!h)return null;await C.initializeProjection(g,h,null,b);return c.toScreen(a)}_cancelFetchingFeatures(){const a=
this._fetchFeaturesController;a&&a.abort();this._fetchFeaturesController=null}async _projectScreenPointAndFetchFeatures({mapPoint:a,screenPoint:b,event:c,signal:g}){return this.fetchFeatures(b??await this._getScreenPoint(a??this.location,{signal:g}),{signal:g,event:c})}_fetchFeaturesWithController({mapPoint:a,screenPoint:b,event:c}){this._cancelFetchingFeatures();const g=new AbortController,{signal:h}=g;this._fetchFeaturesController=g;a=this._projectScreenPointAndFetchFeatures({mapPoint:a,screenPoint:b,
signal:h,event:c});a.catch(()=>{}).then(()=>{this._fetchFeaturesController=null});return a}async _fetchFeaturesAndOpen(a){const {mapPoint:b,screenPoint:c}=a,{view:g}=this;({pendingFeatures:a}=await this._fetchFeaturesWithController({mapPoint:b,screenPoint:c,event:a}));g?.popup&&"open"in g.popup&&g.popup.open({location:b??void 0,promises:a})}_autoClose(){this.autoCloseEnabled&&(this.visible=!1)}async _getLayerView(a,b){await a.when();return a.whenLayerView(b)}_getHighlightLayer(a){const {layer:b,sourceLayer:c}=
a;return c&&"layer"in c&&c.layer?c.layer:"map-notes"===c?.type||"subtype-group"===c?.type?c:b}_getHighlightTarget(a,b){b="imagery"===b.type?void 0:"objectIdField"in b?b.objectIdField||F.fallbackObjectIDAttribute:null;const c=a.attributes;return c&&b&&c[b]||a}_mapIncludesLayer(a){return!!this.view?.map?.allLayers?.includes(a)}async _highlightActiveFeature(){this.removeHandles("highlight-active-feature");const {highlightEnabled:a,view:b,activeFeature:c,visible:g}=this;if(c&&b&&a&&g){var h=this._getHighlightLayer(c);
if(h&&h instanceof w&&this._mapIncludesLayer(h)){var l=this._getLayerView(b,h);this._highlightActiveFeaturePromise=l;var k=await l;k&&x.highlightsSupported(k)&&this._highlightActiveFeaturePromise===l&&this.activeFeature&&this.highlightEnabled&&(h=k.highlight(this._getHighlightTarget(c,h)),this.addHandles(h,"highlight-active-feature"))}}}async _highlightSelectedFeature(){this.removeHandles("highlight-selected-feature");const {selectedFeature:a,highlightEnabled:b,view:c,visible:g}=this;if(a&&c&&b&&
g){var h=this._getHighlightLayer(a);if(h&&h instanceof w&&this._mapIncludesLayer(h)){var l=this._getLayerView(c,h);this._highlightSelectedFeaturePromise=l;var k=await l;k&&x.highlightsSupported(k)&&this._highlightSelectedFeaturePromise===l&&this.selectedFeature&&this.highlightEnabled&&this.visible&&(h=k.highlight(this._getHighlightTarget(a,h)),this.addHandles(h,"highlight-selected-feature"))}}}_updateFeatures(a){const {features:b}=this;a=a.filter(c=>!b.includes(c));a?.length&&(this.features=b.concat(a))}};
e.__decorate([f.property()],d.prototype,"_fetchFeaturesController",void 0);e.__decorate([f.property({type:p.ActionsCollection})],d.prototype,"actions",void 0);e.__decorate([f.property({readOnly:!0})],d.prototype,"active",null);e.__decorate([f.property()],d.prototype,"activeFeature",void 0);e.__decorate([f.property({readOnly:!0})],d.prototype,"allActions",null);e.__decorate([f.property()],d.prototype,"autoCloseEnabled",void 0);e.__decorate([f.property()],d.prototype,"autoOpenEnabled",void 0);e.__decorate([f.property()],
d.prototype,"browseClusterEnabled",void 0);e.__decorate([f.property()],d.prototype,"content",void 0);e.__decorate([f.property({type:p.ActionsCollection,readOnly:!0})],d.prototype,"defaultActions",null);e.__decorate([f.property({type:Boolean})],d.prototype,"defaultPopupTemplateEnabled",void 0);e.__decorate([f.property({readOnly:!0})],d.prototype,"featureCount",null);e.__decorate([f.property()],d.prototype,"featurePage",void 0);e.__decorate([f.property({value:[]})],d.prototype,"features",null);e.__decorate([f.property()],
d.prototype,"featuresPerPage",void 0);e.__decorate([f.property()],d.prototype,"featureMenuOpen",void 0);e.__decorate([f.property()],d.prototype,"featureViewModelAbilities",void 0);e.__decorate([f.property({readOnly:!0})],d.prototype,"featureViewModels",void 0);e.__decorate([f.property()],d.prototype,"highlightEnabled",void 0);e.__decorate([f.property()],d.prototype,"includeDefaultActions",void 0);e.__decorate([f.property({type:L})],d.prototype,"location",null);e.__decorate([f.property({readOnly:!0})],
d.prototype,"pendingPromisesCount",null);e.__decorate([f.property({readOnly:!0})],d.prototype,"promiseCount",null);e.__decorate([f.property()],d.prototype,"promises",null);e.__decorate([f.property({readOnly:!0})],d.prototype,"selectedClusterBoundaryFeature",void 0);e.__decorate([f.property({value:null,readOnly:!0})],d.prototype,"selectedFeature",null);e.__decorate([f.property({value:-1})],d.prototype,"selectedFeatureIndex",null);e.__decorate([f.property({readOnly:!0})],d.prototype,"selectedFeatureViewModel",
null);e.__decorate([f.property({readOnly:!0})],d.prototype,"state",null);e.__decorate([f.property()],d.prototype,"title",void 0);e.__decorate([f.property()],d.prototype,"updateLocationEnabled",void 0);e.__decorate([f.property()],d.prototype,"view",void 0);e.__decorate([f.property()],d.prototype,"visible",void 0);e.__decorate([f.property({readOnly:!0})],d.prototype,"waitingForContents",null);e.__decorate([f.property({readOnly:!0})],d.prototype,"waitingForResult",null);e.__decorate([f.property()],d.prototype,
"zoomFactor",void 0);e.__decorate([f.property()],d.prototype,"zoomToLocation",void 0);e.__decorate([f.property()],d.prototype,"centerAtLocation",null);return d=e.__decorate([B.subclass("esri.widgets.Features.FeaturesViewModel")],d)});